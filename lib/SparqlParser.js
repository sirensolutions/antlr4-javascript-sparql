// Generated from sparql/SparqlParser.g4 by ANTLR 4.5
// jshint ignore: start

module.exports = function (antlr4, SparqlParserListener) {

var grammarFileName = "SparqlParser.g4";

var serializedATN = ["\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\3\u00a4\u05f4\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t",
    "\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20",
    "\t\20\4\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4",
    "\27\t\27\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35",
    "\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'",
    "\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61",
    "\t\61\4\62\t\62\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4",
    "8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C",
    "\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\t",
    "N\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY",
    "\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\t",
    "d\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to",
    "\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4z\tz\4",
    "{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080\4\u0081\t\u0081\4",
    "\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085\t\u0085\4\u0086",
    "\t\u0086\3\2\3\2\3\2\3\2\3\2\5\2\u0112\n\2\3\2\3\2\3\2\3\2\5\2\u0118",
    "\n\2\3\2\5\2\u011b\n\2\3\3\3\3\7\3\u011f\n\3\f\3\16\3\u0122\13\3\3\4",
    "\3\4\3\4\3\5\3\5\3\5\3\5\3\6\3\6\7\6\u012d\n\6\f\6\16\6\u0130\13\6\3",
    "\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\5\b\u013c\n\b\3\b\6\b\u013f\n",
    "\b\r\b\16\b\u0140\3\b\5\b\u0144\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t",
    "\u014d\n\t\3\n\3\n\3\n\7\n\u0152\n\n\f\n\16\n\u0155\13\n\3\n\3\n\3\n",
    "\3\n\7\n\u015b\n\n\f\n\16\n\u015e\13\n\3\n\3\n\3\n\5\n\u0163\n\n\3\n",
    "\3\n\5\n\u0167\n\n\3\13\3\13\6\13\u016b\n\13\r\13\16\13\u016c\3\13\5",
    "\13\u0170\n\13\3\13\7\13\u0173\n\13\f\13\16\13\u0176\13\13\3\13\5\13",
    "\u0179\n\13\3\13\3\13\3\f\3\f\7\f\u017f\n\f\f\f\16\f\u0182\13\f\3\f",
    "\3\f\3\f\3\r\3\r\5\r\u0189\n\r\3\r\3\r\3\16\5\16\u018e\n\16\3\16\3\16",
    "\3\17\5\17\u0193\n\17\3\17\5\17\u0196\n\17\3\17\5\17\u0199\n\17\3\17",
    "\5\17\u019c\n\17\3\20\3\20\3\20\6\20\u01a1\n\20\r\20\16\20\u01a2\3\21",
    "\3\21\3\21\3\21\3\21\3\21\5\21\u01ab\n\21\3\21\3\21\3\21\5\21\u01b0",
    "\n\21\3\22\3\22\6\22\u01b4\n\22\r\22\16\22\u01b5\3\23\3\23\3\24\3\24",
    "\3\24\6\24\u01bd\n\24\r\24\16\24\u01be\3\25\3\25\3\25\3\25\3\25\3\25",
    "\3\25\5\25\u01c8\n\25\3\26\3\26\5\26\u01cc\n\26\3\26\3\26\5\26\u01d0",
    "\n\26\5\26\u01d2\n\26\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\5\31\u01dc",
    "\n\31\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u01e4\n\32\f\32\16\32\u01e7",
    "\13\32\3\32\3\32\5\32\u01eb\n\32\5\32\u01ed\n\32\3\33\3\33\3\33\3\33",
    "\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u01fa\n\33\3\34\3\34\5\34\u01fe",
    "\n\34\3\34\3\34\3\34\5\34\u0203\n\34\3\35\3\35\5\35\u0207\n\35\3\35",
    "\3\35\3\36\3\36\5\36\u020d\n\36\3\36\3\36\3\37\3\37\5\37\u0213\n\37",
    "\3\37\3\37\3 \3 \5 \u0219\n \3 \3 \3 \3 \3!\3!\5!\u0221\n!\3!\3!\3!",
    "\3!\3\"\3\"\5\"\u0229\n\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3$\3$\3$\3$\3",
    "%\3%\3%\3%\3&\3&\5&\u023d\n&\3&\3&\5&\u0241\n&\3&\5&\u0244\n&\3&\7&",
    "\u0247\n&\f&\16&\u024a\13&\3&\3&\3&\3\'\3\'\3\'\3(\3(\3(\3)\3)\5)\u0257",
    "\n)\3)\3)\3*\3*\5*\u025d\n*\3*\5*\u0260\n*\3+\3+\3+\3,\3,\3,\3,\5,\u0269",
    "\n,\3-\3-\3-\3-\3.\3.\3.\3.\3/\5/\u0274\n/\3/\7/\u0277\n/\f/\16/\u027a",
    "\13/\3\60\3\60\5\60\u027e\n\60\3\60\5\60\u0281\n\60\3\61\3\61\3\61\3",
    "\61\5\61\u0287\n\61\3\61\3\61\3\62\3\62\3\62\5\62\u028e\n\62\7\62\u0290",
    "\n\62\f\62\16\62\u0293\13\62\3\63\3\63\3\63\5\63\u0298\n\63\3\63\3\63",
    "\3\64\5\64\u029d\n\64\3\64\7\64\u02a0\n\64\f\64\16\64\u02a3\13\64\3",
    "\65\3\65\5\65\u02a7\n\65\3\65\5\65\u02aa\n\65\3\66\3\66\3\66\5\66\u02af",
    "\n\66\7\66\u02b1\n\66\f\66\16\66\u02b4\13\66\3\67\3\67\3\67\3\67\3\67",
    "\3\67\3\67\3\67\5\67\u02be\n\67\38\38\38\39\39\39\39\3:\3:\5:\u02c9",
    "\n:\3:\3:\3:\3;\3;\3;\3;\3;\3;\3;\3<\3<\3<\3=\3=\5=\u02da\n=\3>\3>\3",
    ">\7>\u02df\n>\f>\16>\u02e2\13>\3>\3>\3?\3?\7?\u02e8\n?\f?\16?\u02eb",
    "\13?\3?\3?\3?\7?\u02f0\n?\f?\16?\u02f3\13?\3?\3?\3@\3@\7@\u02f9\n@\f",
    "@\16@\u02fc\13@\3@\3@\3A\3A\3A\3A\3A\5A\u0305\nA\3B\3B\3B\3C\3C\3C\7",
    "C\u030d\nC\fC\16C\u0310\13C\3D\3D\3D\3E\3E\3E\3E\3E\3E\5E\u031b\nE\3",
    "F\3F\3F\3G\3G\5G\u0322\nG\3G\3G\5G\u0326\nG\3G\3G\3H\3H\3H\7H\u032d",
    "\nH\fH\16H\u0330\13H\3I\3I\5I\u0334\nI\3I\3I\3J\3J\3J\5J\u033b\nJ\7",
    "J\u033d\nJ\fJ\16J\u0340\13J\3K\3K\3K\3K\3K\3K\5K\u0348\nK\3L\5L\u034b",
    "\nL\3M\3M\3M\3M\3M\3M\5M\u0353\nM\7M\u0355\nM\fM\16M\u0358\13M\3N\3",
    "N\5N\u035c\nN\3O\3O\3O\7O\u0361\nO\fO\16O\u0364\13O\3P\3P\3Q\3Q\3Q\3",
    "Q\3Q\3Q\5Q\u036e\nQ\3R\5R\u0371\nR\3S\3S\5S\u0375\nS\3S\3S\3S\5S\u037a",
    "\nS\7S\u037c\nS\fS\16S\u037f\13S\3T\3T\5T\u0383\nT\3T\3T\3U\3U\3V\3",
    "V\3W\3W\3W\7W\u038e\nW\fW\16W\u0391\13W\3X\3X\3Y\3Y\3Z\3Z\3Z\7Z\u039a",
    "\nZ\fZ\16Z\u039d\13Z\3[\3[\3[\7[\u03a2\n[\f[\16[\u03a5\13[\3\\\3\\\5",
    "\\\u03a9\n\\\3]\5]\u03ac\n]\3]\3]\3^\3^\3_\3_\3_\3_\3_\3_\3_\3_\5_\u03ba",
    "\n_\3`\3`\3`\3`\3`\7`\u03c1\n`\f`\16`\u03c4\13`\5`\u03c6\n`\3`\5`\u03c9",
    "\n`\3a\5a\u03cc\na\3a\3a\5a\u03d0\na\3b\3b\3c\3c\5c\u03d6\nc\3d\3d\3",
    "d\3d\3e\3e\5e\u03de\ne\3f\3f\3f\3f\3g\3g\6g\u03e6\ng\rg\16g\u03e7\3",
    "g\3g\3h\3h\6h\u03ee\nh\rh\16h\u03ef\3h\3h\3i\3i\5i\u03f6\ni\3j\3j\5",
    "j\u03fa\nj\3k\3k\5k\u03fe\nk\3l\3l\5l\u0402\nl\3m\3m\3n\3n\3n\3n\3n",
    "\3n\5n\u040c\nn\3o\3o\3o\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0419\np\3p\3p\3",
    "p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0428\np\3p\3p\3p\5p\u042d\np\3p",
    "\3p\3p\3p\3p\3p\3p\7p\u0436\np\fp\16p\u0439\13p\3q\3q\5q\u043d\nq\3",
    "q\3q\5q\u0441\nq\3r\5r\u0444\nr\3r\3r\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s",
    "\5s\u0452\ns\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3",
    "t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t",
    "\5t\u047d\nt\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3",
    "t\3t\3t\3t\3t\3t\3t\3t\3t\5t\u049a\nt\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t",
    "\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3",
    "t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t",
    "\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3",
    "t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t",
    "\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3",
    "t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\5t\u0523\nt\3t\3t\3t\3t\3t\3t",
    "\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3",
    "t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t",
    "\3t\3t\3t\3t\3t\3t\3t\3t\5t\u0560\nt\3u\3u\3u\3u\3u\3u\3u\5u\u0569\n",
    "u\3u\3u\3v\3v\3v\3v\3v\3v\3v\5v\u0574\nv\3v\3v\3w\3w\3w\3w\3w\3w\3w",
    "\3w\3w\5w\u0581\nw\3w\3w\3x\3x\3x\3y\3y\3y\3y\3z\3z\3z\5z\u058f\nz\3",
    "z\3z\5z\u0593\nz\3z\3z\3z\3z\5z\u0599\nz\3z\3z\3z\3z\3z\3z\5z\u05a1",
    "\nz\3z\3z\3z\3z\3z\3z\5z\u05a9\nz\3z\3z\3z\3z\3z\3z\5z\u05b1\nz\3z\3",
    "z\3z\3z\3z\3z\5z\u05b9\nz\3z\3z\3z\3z\3z\3z\5z\u05c1\nz\3z\3z\3z\3z",
    "\3z\5z\u05c8\nz\3z\3z\5z\u05cc\nz\3{\3{\5{\u05d0\n{\3|\3|\3|\3|\5|\u05d6",
    "\n|\3}\3}\3}\5}\u05db\n}\3~\3~\3\177\3\177\3\u0080\3\u0080\3\u0081\3",
    "\u0081\3\u0082\3\u0082\3\u0083\3\u0083\5\u0083\u05e9\n\u0083\3\u0084",
    "\3\u0084\3\u0085\3\u0085\5\u0085\u05ef\n\u0085\3\u0086\3\u0086\3\u0086",
    "\3\u0086\2\3\u00de\u0087\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$",
    "&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c",
    "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4",
    "\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc",
    "\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4",
    "\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc",
    "\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\2\20\3\2\7\b\3\2\21\22\4",
    "\2\u0099\u0099\u009b\u009c\3\2yz\4\2\u009b\u009b\u009f\u009f\3\2\u0099",
    "\u009a\4\2\u008b\u008d\u00a0\u00a2\4\2\u0099\u009a\u009e\u009e\3\2|",
    "~\3\2\177\u0081\3\2\u0082\u0084\3\2\'(\3\2\u0085\u0088\3\2vw\u066b\2",
    "\u011a\3\2\2\2\4\u0120\3\2\2\2\6\u0123\3\2\2\2\b\u0126\3\2\2\2\n\u012a",
    "\3\2\2\2\f\u0134\3\2\2\2\16\u0139\3\2\2\2\20\u014c\3\2\2\2\22\u014e",
    "\3\2\2\2\24\u0168\3\2\2\2\26\u017c\3\2\2\2\30\u0186\3\2\2\2\32\u018d",
    "\3\2\2\2\34\u0192\3\2\2\2\36\u019d\3\2\2\2 \u01af\3\2\2\2\"\u01b1\3",
    "\2\2\2$\u01b7\3\2\2\2&\u01b9\3\2\2\2(\u01c7\3\2\2\2*\u01d1\3\2\2\2,",
    "\u01d3\3\2\2\2.\u01d6\3\2\2\2\60\u01db\3\2\2\2\62\u01dd\3\2\2\2\64\u01f9",
    "\3\2\2\2\66\u01fb\3\2\2\28\u0204\3\2\2\2:\u020a\3\2\2\2<\u0210\3\2\2",
    "\2>\u0216\3\2\2\2@\u021e\3\2\2\2B\u0226\3\2\2\2D\u022e\3\2\2\2F\u0232",
    "\3\2\2\2H\u0236\3\2\2\2J\u023c\3\2\2\2L\u024e\3\2\2\2N\u0251\3\2\2\2",
    "P\u0254\3\2\2\2R\u025f\3\2\2\2T\u0261\3\2\2\2V\u0268\3\2\2\2X\u026a",
    "\3\2\2\2Z\u026e\3\2\2\2\\\u0273\3\2\2\2^\u027b\3\2\2\2`\u0282\3\2\2",
    "\2b\u028a\3\2\2\2d\u0294\3\2\2\2f\u029c\3\2\2\2h\u02a4\3\2\2\2j\u02ab",
    "\3\2\2\2l\u02bd\3\2\2\2n\u02bf\3\2\2\2p\u02c2\3\2\2\2r\u02c6\3\2\2\2",
    "t\u02cd\3\2\2\2v\u02d4\3\2\2\2x\u02d9\3\2\2\2z\u02db\3\2\2\2|\u02e5",
    "\3\2\2\2~\u02f6\3\2\2\2\u0080\u0304\3\2\2\2\u0082\u0306\3\2\2\2\u0084",
    "\u0309\3\2\2\2\u0086\u0311\3\2\2\2\u0088\u031a\3\2\2\2\u008a\u031c\3",
    "\2\2\2\u008c\u031f\3\2\2\2\u008e\u0329\3\2\2\2\u0090\u0331\3\2\2\2\u0092",
    "\u0337\3\2\2\2\u0094\u0347\3\2\2\2\u0096\u034a\3\2\2\2\u0098\u034c\3",
    "\2\2\2\u009a\u035b\3\2\2\2\u009c\u035d\3\2\2\2\u009e\u0365\3\2\2\2\u00a0",
    "\u036d\3\2\2\2\u00a2\u0370\3\2\2\2\u00a4\u0374\3\2\2\2\u00a6\u0382\3",
    "\2\2\2\u00a8\u0386\3\2\2\2\u00aa\u0388\3\2\2\2\u00ac\u038a\3\2\2\2\u00ae",
    "\u0392\3\2\2\2\u00b0\u0394\3\2\2\2\u00b2\u0396\3\2\2\2\u00b4\u039e\3",
    "\2\2\2\u00b6\u03a6\3\2\2\2\u00b8\u03ab\3\2\2\2\u00ba\u03af\3\2\2\2\u00bc",
    "\u03b9\3\2\2\2\u00be\u03c8\3\2\2\2\u00c0\u03cb\3\2\2\2\u00c2\u03d1\3",
    "\2\2\2\u00c4\u03d5\3\2\2\2\u00c6\u03d7\3\2\2\2\u00c8\u03dd\3\2\2\2\u00ca",
    "\u03df\3\2\2\2\u00cc\u03e3\3\2\2\2\u00ce\u03eb\3\2\2\2\u00d0\u03f5\3",
    "\2\2\2\u00d2\u03f9\3\2\2\2\u00d4\u03fd\3\2\2\2\u00d6\u0401\3\2\2\2\u00d8",
    "\u0403\3\2\2\2\u00da\u040b\3\2\2\2\u00dc\u040d\3\2\2\2\u00de\u0418\3",
    "\2\2\2\u00e0\u043c\3\2\2\2\u00e2\u0443\3\2\2\2\u00e4\u0451\3\2\2\2\u00e6",
    "\u055f\3\2\2\2\u00e8\u0561\3\2\2\2\u00ea\u056c\3\2\2\2\u00ec\u0577\3",
    "\2\2\2\u00ee\u0584\3\2\2\2\u00f0\u0587\3\2\2\2\u00f2\u05cb\3\2\2\2\u00f4",
    "\u05cd\3\2\2\2\u00f6\u05d1\3\2\2\2\u00f8\u05da\3\2\2\2\u00fa\u05dc\3",
    "\2\2\2\u00fc\u05de\3\2\2\2\u00fe\u05e0\3\2\2\2\u0100\u05e2\3\2\2\2\u0102",
    "\u05e4\3\2\2\2\u0104\u05e8\3\2\2\2\u0106\u05ea\3\2\2\2\u0108\u05ee\3",
    "\2\2\2\u010a\u05f0\3\2\2\2\u010c\u0111\5\4\3\2\u010d\u0112\5\n\6\2\u010e",
    "\u0112\5\22\n\2\u010f\u0112\5\24\13\2\u0110\u0112\5\26\f\2\u0111\u010d",
    "\3\2\2\2\u0111\u010e\3\2\2\2\u0111\u010f\3\2\2\2\u0111\u0110\3\2\2\2",
    "\u0111\u0112\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0114\5\60\31\2\u0114",
    "\u0115\7\2\2\3\u0115\u011b\3\2\2\2\u0116\u0118\5\62\32\2\u0117\u0116",
    "\3\2\2\2\u0117\u0118\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u011b\7\2\2\3",
    "\u011a\u010c\3\2\2\2\u011a\u0117\3\2\2\2\u011b\3\3\2\2\2\u011c\u011f",
    "\5\6\4\2\u011d\u011f\5\b\5\2\u011e\u011c\3\2\2\2\u011e\u011d\3\2\2\2",
    "\u011f\u0122\3\2\2\2\u0120\u011e\3\2\2\2\u0120\u0121\3\2\2\2\u0121\5",
    "\3\2\2\2\u0122\u0120\3\2\2\2\u0123\u0124\7\4\2\2\u0124\u0125\7u\2\2",
    "\u0125\7\3\2\2\2\u0126\u0127\7\5\2\2\u0127\u0128\7v\2\2\u0128\u0129",
    "\7u\2\2\u0129\t\3\2\2\2\u012a\u012e\5\16\b\2\u012b\u012d\5\30\r\2\u012c",
    "\u012b\3\2\2\2\u012d\u0130\3\2\2\2\u012e\u012c\3\2\2\2\u012e\u012f\3",
    "\2\2\2\u012f\u0131\3\2\2\2\u0130\u012e\3\2\2\2\u0131\u0132\5\32\16\2",
    "\u0132\u0133\5\34\17\2\u0133\13\3\2\2\2\u0134\u0135\5\16\b\2\u0135\u0136",
    "\5\32\16\2\u0136\u0137\5\34\17\2\u0137\u0138\5\60\31\2\u0138\r\3\2\2",
    "\2\u0139\u013b\7\6\2\2\u013a\u013c\t\2\2\2\u013b\u013a\3\2\2\2\u013b",
    "\u013c\3\2\2\2\u013c\u0143\3\2\2\2\u013d\u013f\5\20\t\2\u013e\u013d",
    "\3\2\2\2\u013f\u0140\3\2\2\2\u0140\u013e\3\2\2\2\u0140\u0141\3\2\2\2",
    "\u0141\u0144\3\2\2\2\u0142\u0144\7\u009b\2\2\u0143\u013e\3\2\2\2\u0143",
    "\u0142\3\2\2\2\u0144\17\3\2\2\2\u0145\u014d\5\u00d8m\2\u0146\u0147\7",
    "\u0091\2\2\u0147\u0148\5\u00dep\2\u0148\u0149\7:\2\2\u0149\u014a\5\u00d8",
    "m\2\u014a\u014b\7\u0092\2\2\u014b\u014d\3\2\2\2\u014c\u0145\3\2\2\2",
    "\u014c\u0146\3\2\2\2\u014d\21\3\2\2\2\u014e\u0166\7\t\2\2\u014f\u0153",
    "\5\u0090I\2\u0150\u0152\5\30\r\2\u0151\u0150\3\2\2\2\u0152\u0155\3\2",
    "\2\2\u0153\u0151\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0156\3\2\2\2\u0155",
    "\u0153\3\2\2\2\u0156\u0157\5\32\16\2\u0157\u0158\5\34\17\2\u0158\u0167",
    "\3\2\2\2\u0159\u015b\5\30\r\2\u015a\u0159\3\2\2\2\u015b\u015e\3\2\2",
    "\2\u015c\u015a\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u015f\3\2\2\2\u015e",
    "\u015c\3\2\2\2\u015f\u0160\7\16\2\2\u0160\u0162\7\u0093\2\2\u0161\u0163",
    "\5b\62\2\u0162\u0161\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0164\3\2\2\2",
    "\u0164\u0165\7\u0094\2\2\u0165\u0167\5\34\17\2\u0166\u014f\3\2\2\2\u0166",
    "\u015c\3\2\2\2\u0167\23\3\2\2\2\u0168\u016f\7\n\2\2\u0169\u016b\5\u00d6",
    "l\2\u016a\u0169\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u016a\3\2\2\2\u016c",
    "\u016d\3\2\2\2\u016d\u0170\3\2\2\2\u016e\u0170\7\u009b\2\2\u016f\u016a",
    "\3\2\2\2\u016f\u016e\3\2\2\2\u0170\u0174\3\2\2\2\u0171\u0173\5\30\r",
    "\2\u0172\u0171\3\2\2\2\u0173\u0176\3\2\2\2\u0174\u0172\3\2\2\2\u0174",
    "\u0175\3\2\2\2\u0175\u0178\3\2\2\2\u0176\u0174\3\2\2\2\u0177\u0179\5",
    "\32\16\2\u0178\u0177\3\2\2\2\u0178\u0179\3\2\2\2\u0179\u017a\3\2\2\2",
    "\u017a\u017b\5\34\17\2\u017b\25\3\2\2\2\u017c\u0180\7\13\2\2\u017d\u017f",
    "\5\30\r\2\u017e\u017d\3\2\2\2\u017f\u0182\3\2\2\2\u0180\u017e\3\2\2",
    "\2\u0180\u0181\3\2\2\2\u0181\u0183\3\2\2\2\u0182\u0180\3\2\2\2\u0183",
    "\u0184\5\32\16\2\u0184\u0185\5\34\17\2\u0185\27\3\2\2\2\u0186\u0188",
    "\7\f\2\2\u0187\u0189\7\r\2\2\u0188\u0187\3\2\2\2\u0188\u0189\3\2\2\2",
    "\u0189\u018a\3\2\2\2\u018a\u018b\5\u0104\u0083\2\u018b\31\3\2\2\2\u018c",
    "\u018e\7\16\2\2\u018d\u018c\3\2\2\2\u018d\u018e\3\2\2\2\u018e\u018f",
    "\3\2\2\2\u018f\u0190\5d\63\2\u0190\33\3\2\2\2\u0191\u0193\5\36\20\2",
    "\u0192\u0191\3\2\2\2\u0192\u0193\3\2\2\2\u0193\u0195\3\2\2\2\u0194\u0196",
    "\5\"\22\2\u0195\u0194\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0198\3\2\2",
    "\2\u0197\u0199\5&\24\2\u0198\u0197\3\2\2\2\u0198\u0199\3\2\2\2\u0199",
    "\u019b\3\2\2\2\u019a\u019c\5*\26\2\u019b\u019a\3\2\2\2\u019b\u019c\3",
    "\2\2\2\u019c\35\3\2\2\2\u019d\u019e\7;\2\2\u019e\u01a0\7\20\2\2\u019f",
    "\u01a1\5 \21\2\u01a0\u019f\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2\u01a0\3",
    "\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\37\3\2\2\2\u01a4\u01b0\5\u00e6t\2\u01a5",
    "\u01b0\5\u008aF\2\u01a6\u01a7\7\u0091\2\2\u01a7\u01aa\5\u00dep\2\u01a8",
    "\u01a9\7:\2\2\u01a9\u01ab\5\u00d8m\2\u01aa\u01a8\3\2\2\2\u01aa\u01ab",
    "\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac\u01ad\7\u0092\2\2\u01ad\u01b0\3\2",
    "\2\2\u01ae\u01b0\5\u00d8m\2\u01af\u01a4\3\2\2\2\u01af\u01a5\3\2\2\2",
    "\u01af\u01a6\3\2\2\2\u01af\u01ae\3\2\2\2\u01b0!\3\2\2\2\u01b1\u01b3",
    "\7<\2\2\u01b2\u01b4\5$\23\2\u01b3\u01b2\3\2\2\2\u01b4\u01b5\3\2\2\2",
    "\u01b5\u01b3\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6#\3\2\2\2\u01b7\u01b8",
    "\5\u0088E\2\u01b8%\3\2\2\2\u01b9\u01ba\7\17\2\2\u01ba\u01bc\7\20\2\2",
    "\u01bb\u01bd\5(\25\2\u01bc\u01bb\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01bc",
    "\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\'\3\2\2\2\u01c0\u01c1\t\3\2\2\u01c1",
    "\u01c2\7\u0091\2\2\u01c2\u01c3\5\u00dep\2\u01c3\u01c4\7\u0092\2\2\u01c4",
    "\u01c8\3\2\2\2\u01c5\u01c8\5\u0088E\2\u01c6\u01c8\5\u00d8m\2\u01c7\u01c0",
    "\3\2\2\2\u01c7\u01c5\3\2\2\2\u01c7\u01c6\3\2\2\2\u01c8)\3\2\2\2\u01c9",
    "\u01cb\5,\27\2\u01ca\u01cc\5.\30\2\u01cb\u01ca\3\2\2\2\u01cb\u01cc\3",
    "\2\2\2\u01cc\u01d2\3\2\2\2\u01cd\u01cf\5.\30\2\u01ce\u01d0\5,\27\2\u01cf",
    "\u01ce\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0\u01d2\3\2\2\2\u01d1\u01c9\3",
    "\2\2\2\u01d1\u01cd\3\2\2\2\u01d2+\3\2\2\2\u01d3\u01d4\7\23\2\2\u01d4",
    "\u01d5\7|\2\2\u01d5-\3\2\2\2\u01d6\u01d7\7\24\2\2\u01d7\u01d8\7|\2\2",
    "\u01d8/\3\2\2\2\u01d9\u01da\7\25\2\2\u01da\u01dc\5x=\2\u01db\u01d9\3",
    "\2\2\2\u01db\u01dc\3\2\2\2\u01dc\61\3\2\2\2\u01dd\u01ec\5\4\3\2\u01de",
    "\u01e5\5\64\33\2\u01df\u01e0\7\u0097\2\2\u01e0\u01e1\5\4\3\2\u01e1\u01e2",
    "\5\64\33\2\u01e2\u01e4\3\2\2\2\u01e3\u01df\3\2\2\2\u01e4\u01e7\3\2\2",
    "\2\u01e5\u01e3\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01ea\3\2\2\2\u01e7",
    "\u01e5\3\2\2\2\u01e8\u01e9\7\u0097\2\2\u01e9\u01eb\5\4\3\2\u01ea\u01e8",
    "\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ed\3\2\2\2\u01ec\u01de\3\2\2\2",
    "\u01ec\u01ed\3\2\2\2\u01ed\63\3\2\2\2\u01ee\u01fa\5\66\34\2\u01ef\u01fa",
    "\58\35\2\u01f0\u01fa\5:\36\2\u01f1\u01fa\5> \2\u01f2\u01fa\5@!\2\u01f3",
    "\u01fa\5B\"\2\u01f4\u01fa\5<\37\2\u01f5\u01fa\5D#\2\u01f6\u01fa\5F$",
    "\2\u01f7\u01fa\5H%\2\u01f8\u01fa\5J&\2\u01f9\u01ee\3\2\2\2\u01f9\u01ef",
    "\3\2\2\2\u01f9\u01f0\3\2\2\2\u01f9\u01f1\3\2\2\2\u01f9\u01f2\3\2\2\2",
    "\u01f9\u01f3\3\2\2\2\u01f9\u01f4\3\2\2\2\u01f9\u01f5\3\2\2\2\u01f9\u01f6",
    "\3\2\2\2\u01f9\u01f7\3\2\2\2\u01f9\u01f8\3\2\2\2\u01fa\65\3\2\2\2\u01fb",
    "\u01fd\7)\2\2\u01fc\u01fe\7\63\2\2\u01fd\u01fc\3\2\2\2\u01fd\u01fe\3",
    "\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u0202\5\u0104\u0083\2\u0200\u0201\7",
    "8\2\2\u0201\u0203\5T+\2\u0202\u0200\3\2\2\2\u0202\u0203\3\2\2\2\u0203",
    "\67\3\2\2\2\u0204\u0206\7*\2\2\u0205\u0207\7\63\2\2\u0206\u0205\3\2",
    "\2\2\u0206\u0207\3\2\2\2\u0207\u0208\3\2\2\2\u0208\u0209\5V,\2\u0209",
    "9\3\2\2\2\u020a\u020c\7+\2\2\u020b\u020d\7\63\2\2\u020c\u020b\3\2\2",
    "\2\u020c\u020d\3\2\2\2\u020d\u020e\3\2\2\2\u020e\u020f\5V,\2\u020f;",
    "\3\2\2\2\u0210\u0212\7/\2\2\u0211\u0213\7\63\2\2\u0212\u0211\3\2\2\2",
    "\u0212\u0213\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0215\5T+\2\u0215=\3",
    "\2\2\2\u0216\u0218\7,\2\2\u0217\u0219\7\63\2\2\u0218\u0217\3\2\2\2\u0218",
    "\u0219\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021b\5R*\2\u021b\u021c\79",
    "\2\2\u021c\u021d\5R*\2\u021d?\3\2\2\2\u021e\u0220\7-\2\2\u021f\u0221",
    "\7\63\2\2\u0220\u021f\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0222\3\2\2",
    "\2\u0222\u0223\5R*\2\u0223\u0224\79\2\2\u0224\u0225\5R*\2\u0225A\3\2",
    "\2\2\u0226\u0228\7.\2\2\u0227\u0229\7\63\2\2\u0228\u0227\3\2\2\2\u0228",
    "\u0229\3\2\2\2\u0229\u022a\3\2\2\2\u022a\u022b\5R*\2\u022b\u022c\79",
    "\2\2\u022c\u022d\5R*\2\u022dC\3\2\2\2\u022e\u022f\7\61\2\2\u022f\u0230",
    "\7\66\2\2\u0230\u0231\5Z.\2\u0231E\3\2\2\2\u0232\u0233\7\60\2\2\u0233",
    "\u0234\7\66\2\2\u0234\u0235\5Z.\2\u0235G\3\2\2\2\u0236\u0237\7\60\2",
    "\2\u0237\u0238\7\16\2\2\u0238\u0239\5X-\2\u0239I\3\2\2\2\u023a\u023b",
    "\7\67\2\2\u023b\u023d\5\u0104\u0083\2\u023c\u023a\3\2\2\2\u023c\u023d",
    "\3\2\2\2\u023d\u0243\3\2\2\2\u023e\u0240\5L\'\2\u023f\u0241\5N(\2\u0240",
    "\u023f\3\2\2\2\u0240\u0241\3\2\2\2\u0241\u0244\3\2\2\2\u0242\u0244\5",
    "N(\2\u0243\u023e\3\2\2\2\u0243\u0242\3\2\2\2\u0244\u0248\3\2\2\2\u0245",
    "\u0247\5P)\2\u0246\u0245\3\2\2\2\u0247\u024a\3\2\2\2\u0248\u0246\3\2",
    "\2\2\u0248\u0249\3\2\2\2\u0249\u024b\3\2\2\2\u024a\u0248\3\2\2\2\u024b",
    "\u024c\7\16\2\2\u024c\u024d\5d\63\2\u024dK\3\2\2\2\u024e\u024f\7\60",
    "\2\2\u024f\u0250\5X-\2\u0250M\3\2\2\2\u0251\u0252\7\61\2\2\u0252\u0253",
    "\5X-\2\u0253O\3\2\2\2\u0254\u0256\7\62\2\2\u0255\u0257\7\r\2\2\u0256",
    "\u0255\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u0259\5",
    "\u0104\u0083\2\u0259Q\3\2\2\2\u025a\u0260\7\64\2\2\u025b\u025d\7\27",
    "\2\2\u025c\u025b\3\2\2\2\u025c\u025d\3\2\2\2\u025d\u025e\3\2\2\2\u025e",
    "\u0260\5\u0104\u0083\2\u025f\u025a\3\2\2\2\u025f\u025c\3\2\2\2\u0260",
    "S\3\2\2\2\u0261\u0262\7\27\2\2\u0262\u0263\5\u0104\u0083\2\u0263U\3",
    "\2\2\2\u0264\u0269\5T+\2\u0265\u0269\7\64\2\2\u0266\u0269\7\r\2\2\u0267",
    "\u0269\7\65\2\2\u0268\u0264\3\2\2\2\u0268\u0265\3\2\2\2\u0268\u0266",
    "\3\2\2\2\u0268\u0267\3\2\2\2\u0269W\3\2\2\2\u026a\u026b\7\u0093\2\2",
    "\u026b\u026c\5\\/\2\u026c\u026d\7\u0094\2\2\u026dY\3\2\2\2\u026e\u026f",
    "\7\u0093\2\2\u026f\u0270\5\\/\2\u0270\u0271\7\u0094\2\2\u0271[\3\2\2",
    "\2\u0272\u0274\5b\62\2\u0273\u0272\3\2\2\2\u0273\u0274\3\2\2\2\u0274",
    "\u0278\3\2\2\2\u0275\u0277\5^\60\2\u0276\u0275\3\2\2\2\u0277\u027a\3",
    "\2\2\2\u0278\u0276\3\2\2\2\u0278\u0279\3\2\2\2\u0279]\3\2\2\2\u027a",
    "\u0278\3\2\2\2\u027b\u027d\5`\61\2\u027c\u027e\7\u0098\2\2\u027d\u027c",
    "\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u0280\3\2\2\2\u027f\u0281\5b\62\2",
    "\u0280\u027f\3\2\2\2\u0280\u0281\3\2\2\2\u0281_\3\2\2\2\u0282\u0283",
    "\7\27\2\2\u0283\u0284\5\u00d6l\2\u0284\u0286\7\u0093\2\2\u0285\u0287",
    "\5b\62\2\u0286\u0285\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u0288\3\2\2\2",
    "\u0288\u0289\7\u0094\2\2\u0289a\3\2\2\2\u028a\u0291\5\u0094K\2\u028b",
    "\u028d\7\u0098\2\2\u028c\u028e\5\u0094K\2\u028d\u028c\3\2\2\2\u028d",
    "\u028e\3\2\2\2\u028e\u0290\3\2\2\2\u028f\u028b\3\2\2\2\u0290\u0293\3",
    "\2\2\2\u0291\u028f\3\2\2\2\u0291\u0292\3\2\2\2\u0292c\3\2\2\2\u0293",
    "\u0291\3\2\2\2\u0294\u0297\7\u0093\2\2\u0295\u0298\5\f\7\2\u0296\u0298",
    "\5f\64\2\u0297\u0295\3\2\2\2\u0297\u0296\3\2\2\2\u0298\u0299\3\2\2\2",
    "\u0299\u029a\7\u0094\2\2\u029ae\3\2\2\2\u029b\u029d\5j\66\2\u029c\u029b",
    "\3\2\2\2\u029c\u029d\3\2\2\2\u029d\u02a1\3\2\2\2\u029e\u02a0\5h\65\2",
    "\u029f\u029e\3\2\2\2\u02a0\u02a3\3\2\2\2\u02a1\u029f\3\2\2\2\u02a1\u02a2",
    "\3\2\2\2\u02a2g\3\2\2\2\u02a3\u02a1\3\2\2\2\u02a4\u02a6\5l\67\2\u02a5",
    "\u02a7\7\u0098\2\2\u02a6\u02a5\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a9",
    "\3\2\2\2\u02a8\u02aa\5j\66\2\u02a9\u02a8\3\2\2\2\u02a9\u02aa\3\2\2\2",
    "\u02aai\3\2\2\2\u02ab\u02b2\5\u00a0Q\2\u02ac\u02ae\7\u0098\2\2\u02ad",
    "\u02af\5\u00a0Q\2\u02ae\u02ad\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b1",
    "\3\2\2\2\u02b0\u02ac\3\2\2\2\u02b1\u02b4\3\2\2\2\u02b2\u02b0\3\2\2\2",
    "\u02b2\u02b3\3\2\2\2\u02b3k\3\2\2\2\u02b4\u02b2\3\2\2\2\u02b5\u02be",
    "\5\u0084C\2\u02b6\u02be\5n8\2\u02b7\u02be\5\u0082B\2\u02b8\u02be\5p",
    "9\2\u02b9\u02be\5r:\2\u02ba\u02be\5\u0086D\2\u02bb\u02be\5t;\2\u02bc",
    "\u02be\5v<\2\u02bd\u02b5\3\2\2\2\u02bd\u02b6\3\2\2\2\u02bd\u02b7\3\2",
    "\2\2\u02bd\u02b8\3\2\2\2\u02bd\u02b9\3\2\2\2\u02bd\u02ba\3\2\2\2\u02bd",
    "\u02bb\3\2\2\2\u02bd\u02bc\3\2\2\2\u02bem\3\2\2\2\u02bf\u02c0\7\26\2",
    "\2\u02c0\u02c1\5d\63\2\u02c1o\3\2\2\2\u02c2\u02c3\7\27\2\2\u02c3\u02c4",
    "\5\u00d6l\2\u02c4\u02c5\5d\63\2\u02c5q\3\2\2\2\u02c6\u02c8\7?\2\2\u02c7",
    "\u02c9\7\63\2\2\u02c8\u02c7\3\2\2\2\u02c8\u02c9\3\2\2\2\u02c9\u02ca",
    "\3\2\2\2\u02ca\u02cb\5\u00d6l\2\u02cb\u02cc\5d\63\2\u02ccs\3\2\2\2\u02cd",
    "\u02ce\7@\2\2\u02ce\u02cf\7\u0091\2\2\u02cf\u02d0\5\u00dep\2\u02d0\u02d1",
    "\7:\2\2\u02d1\u02d2\5\u00d8m\2\u02d2\u02d3\7\u0092\2\2\u02d3u\3\2\2",
    "\2\u02d4\u02d5\7\25\2\2\u02d5\u02d6\5x=\2\u02d6w\3\2\2\2\u02d7\u02da",
    "\5z>\2\u02d8\u02da\5|?\2\u02d9\u02d7\3\2\2\2\u02d9\u02d8\3\2\2\2\u02da",
    "y\3\2\2\2\u02db\u02dc\5\u00d8m\2\u02dc\u02e0\7\u0093\2\2\u02dd\u02df",
    "\5\u0080A\2\u02de\u02dd\3\2\2\2\u02df\u02e2\3\2\2\2\u02e0\u02de\3\2",
    "\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02e3\3\2\2\2\u02e2\u02e0\3\2\2\2\u02e3",
    "\u02e4\7\u0094\2\2\u02e4{\3\2\2\2\u02e5\u02e9\7\u0091\2\2\u02e6\u02e8",
    "\5\u00d8m\2\u02e7\u02e6\3\2\2\2\u02e8\u02eb\3\2\2\2\u02e9\u02e7\3\2",
    "\2\2\u02e9\u02ea\3\2\2\2\u02ea\u02ec\3\2\2\2\u02eb\u02e9\3\2\2\2\u02ec",
    "\u02ed\7\u0092\2\2\u02ed\u02f1\7\u0093\2\2\u02ee\u02f0\5~@\2\u02ef\u02ee",
    "\3\2\2\2\u02f0\u02f3\3\2\2\2\u02f1\u02ef\3\2\2\2\u02f1\u02f2\3\2\2\2",
    "\u02f2\u02f4\3\2\2\2\u02f3\u02f1\3\2\2\2\u02f4\u02f5\7\u0094\2\2\u02f5",
    "}\3\2\2\2\u02f6\u02fa\7\u0091\2\2\u02f7\u02f9\5\u0080A\2\u02f8\u02f7",
    "\3\2\2\2\u02f9\u02fc\3\2\2\2\u02fa\u02f8\3\2\2\2\u02fa\u02fb\3\2\2\2",
    "\u02fb\u02fd\3\2\2\2\u02fc\u02fa\3\2\2\2\u02fd\u02fe\7\u0092\2\2\u02fe",
    "\177\3\2\2\2\u02ff\u0305\5\u0104\u0083\2\u0300\u0305\5\u00f6|\2\u0301",
    "\u0305\5\u00f8}\2\u0302\u0305\5\u0100\u0081\2\u0303\u0305\7=\2\2\u0304",
    "\u02ff\3\2\2\2\u0304\u0300\3\2\2\2\u0304\u0301\3\2\2\2\u0304\u0302\3",
    "\2\2\2\u0304\u0303\3\2\2\2\u0305\u0081\3\2\2\2\u0306\u0307\7A\2\2\u0307",
    "\u0308\5d\63\2\u0308\u0083\3\2\2\2\u0309\u030e\5d\63\2\u030a\u030b\7",
    "\30\2\2\u030b\u030d\5d\63\2\u030c\u030a\3\2\2\2\u030d\u0310\3\2\2\2",
    "\u030e\u030c\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0085\3\2\2\2\u0310\u030e",
    "\3\2\2\2\u0311\u0312\7\31\2\2\u0312\u0313\5\u0088E\2\u0313\u0087\3\2",
    "\2\2\u0314\u0315\7\u0091\2\2\u0315\u0316\5\u00dep\2\u0316\u0317\7\u0092",
    "\2\2\u0317\u031b\3\2\2\2\u0318\u031b\5\u00e6t\2\u0319\u031b\5\u008a",
    "F\2\u031a\u0314\3\2\2\2\u031a\u0318\3\2\2\2\u031a\u0319\3\2\2\2\u031b",
    "\u0089\3\2\2\2\u031c\u031d\5\u0104\u0083\2\u031d\u031e\5\u008cG\2\u031e",
    "\u008b\3\2\2\2\u031f\u0325\7\u0091\2\2\u0320\u0322\7\7\2\2\u0321\u0320",
    "\3\2\2\2\u0321\u0322\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0326\5\u008e",
    "H\2\u0324\u0326\3\2\2\2\u0325\u0321\3\2\2\2\u0325\u0324\3\2\2\2\u0326",
    "\u0327\3\2\2\2\u0327\u0328\7\u0092\2\2\u0328\u008d\3\2\2\2\u0329\u032e",
    "\5\u00dep\2\u032a\u032b\7\u009d\2\2\u032b\u032d\5\u00dep\2\u032c\u032a",
    "\3\2\2\2\u032d\u0330\3\2\2\2\u032e\u032c\3\2\2\2\u032e\u032f\3\2\2\2",
    "\u032f\u008f\3\2\2\2\u0330\u032e\3\2\2\2\u0331\u0333\7\u0093\2\2\u0332",
    "\u0334\5\u0092J\2\u0333\u0332\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0335",
    "\3\2\2\2\u0335\u0336\7\u0094\2\2\u0336\u0091\3\2\2\2\u0337\u033e\5\u0094",
    "K\2\u0338\u033a\7\u0098\2\2\u0339\u033b\5\u0092J\2\u033a\u0339\3\2\2",
    "\2\u033a\u033b\3\2\2\2\u033b\u033d\3\2\2\2\u033c\u0338\3\2\2\2\u033d",
    "\u0340\3\2\2\2\u033e\u033c\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0093\3",
    "\2\2\2\u0340\u033e\3\2\2\2\u0341\u0342\5\u00d4k\2\u0342\u0343\5\u0098",
    "M\2\u0343\u0348\3\2\2\2\u0344\u0345\5\u00c4c\2\u0345\u0346\5\u0096L",
    "\2\u0346\u0348\3\2\2\2\u0347\u0341\3\2\2\2\u0347\u0344\3\2\2\2\u0348",
    "\u0095\3\2\2\2\u0349\u034b\5\u0098M\2\u034a\u0349\3\2\2\2\u034a\u034b",
    "\3\2\2\2\u034b\u0097\3\2\2\2\u034c\u034d\5\u009aN\2\u034d\u0356\5\u009c",
    "O\2\u034e\u0352\7\u0097\2\2\u034f\u0350\5\u009aN\2\u0350\u0351\5\u009c",
    "O\2\u0351\u0353\3\2\2\2\u0352\u034f\3\2\2\2\u0352\u0353\3\2\2\2\u0353",
    "\u0355\3\2\2\2\u0354\u034e\3\2\2\2\u0355\u0358\3\2\2\2\u0356\u0354\3",
    "\2\2\2\u0356\u0357\3\2\2\2\u0357\u0099\3\2\2\2\u0358\u0356\3\2\2\2\u0359",
    "\u035c\5\u00d6l\2\u035a\u035c\7\32\2\2\u035b\u0359\3\2\2\2\u035b\u035a",
    "\3\2\2\2\u035c\u009b\3\2\2\2\u035d\u0362\5\u009eP\2\u035e\u035f\7\u009d",
    "\2\2\u035f\u0361\5\u009eP\2\u0360\u035e\3\2\2\2\u0361\u0364\3\2\2\2",
    "\u0362\u0360\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u009d\3\2\2\2\u0364\u0362",
    "\3\2\2\2\u0365\u0366\5\u00d0i\2\u0366\u009f\3\2\2\2\u0367\u0368\5\u00d4",
    "k\2\u0368\u0369\5\u00a4S\2\u0369\u036e\3\2\2\2\u036a\u036b\5\u00c8e",
    "\2\u036b\u036c\5\u00a2R\2\u036c\u036e\3\2\2\2\u036d\u0367\3\2\2\2\u036d",
    "\u036a\3\2\2\2\u036e\u00a1\3\2\2\2\u036f\u0371\5\u00a4S\2\u0370\u036f",
    "\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u00a3\3\2\2\2\u0372\u0375\5\u00a8",
    "U\2\u0373\u0375\5\u00aaV\2\u0374\u0372\3\2\2\2\u0374\u0373\3\2\2\2\u0375",
    "\u0376\3\2\2\2\u0376\u037d\5\u00acW\2\u0377\u0379\7\u0097\2\2\u0378",
    "\u037a\5\u00a6T\2\u0379\u0378\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u037c",
    "\3\2\2\2\u037b\u0377\3\2\2\2\u037c\u037f\3\2\2\2\u037d\u037b\3\2\2\2",
    "\u037d\u037e\3\2\2\2\u037e\u00a5\3\2\2\2\u037f\u037d\3\2\2\2\u0380\u0383",
    "\5\u00a8U\2\u0381\u0383\5\u00aaV\2\u0382\u0380\3\2\2\2\u0382\u0381\3",
    "\2\2\2\u0383\u0384\3\2\2\2\u0384\u0385\5\u009cO\2\u0385\u00a7\3\2\2",
    "\2\u0386\u0387\5\u00b0Y\2\u0387\u00a9\3\2\2\2\u0388\u0389\5\u00d8m\2",
    "\u0389\u00ab\3\2\2\2\u038a\u038f\5\u00aeX\2\u038b\u038c\7\u009d\2\2",
    "\u038c\u038e\5\u00aeX\2\u038d\u038b\3\2\2\2\u038e\u0391\3\2\2\2\u038f",
    "\u038d\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u00ad\3\2\2\2\u0391\u038f\3",
    "\2\2\2\u0392\u0393\5\u00d2j\2\u0393\u00af\3\2\2\2\u0394\u0395\5\u00b2",
    "Z\2\u0395\u00b1\3\2\2\2\u0396\u039b\5\u00b4[\2\u0397\u0398\7\u00a3\2",
    "\2\u0398\u039a\5\u00b4[\2\u0399\u0397\3\2\2\2\u039a\u039d\3\2\2\2\u039b",
    "\u0399\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u00b3\3\2\2\2\u039d\u039b\3",
    "\2\2\2\u039e\u03a3\5\u00b8]\2\u039f\u03a0\7\u009f\2\2\u03a0\u03a2\5",
    "\u00b8]\2\u03a1\u039f\3\2\2\2\u03a2\u03a5\3\2\2\2\u03a3\u03a1\3\2\2",
    "\2\u03a3\u03a4\3\2\2\2\u03a4\u00b5\3\2\2\2\u03a5\u03a3\3\2\2\2\u03a6",
    "\u03a8\5\u00bc_\2\u03a7\u03a9\5\u00ba^\2\u03a8\u03a7\3\2\2\2\u03a8\u03a9",
    "\3\2\2\2\u03a9\u00b7\3\2\2\2\u03aa\u03ac\7\u0090\2\2\u03ab\u03aa\3\2",
    "\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03ae\5\u00b6\\\2",
    "\u03ae\u00b9\3\2\2\2\u03af\u03b0\t\4\2\2\u03b0\u00bb\3\2\2\2\u03b1\u03ba",
    "\5\u0104\u0083\2\u03b2\u03ba\7\32\2\2\u03b3\u03b4\7\u009e\2\2\u03b4",
    "\u03ba\5\u00be`\2\u03b5\u03b6\7\u0091\2\2\u03b6\u03b7\5\u00b0Y\2\u03b7",
    "\u03b8\7\u0092\2\2\u03b8\u03ba\3\2\2\2\u03b9\u03b1\3\2\2\2\u03b9\u03b2",
    "\3\2\2\2\u03b9\u03b3\3\2\2\2\u03b9\u03b5\3\2\2\2\u03ba\u00bd\3\2\2\2",
    "\u03bb\u03c9\5\u00c0a\2\u03bc\u03c5\7\u0091\2\2\u03bd\u03c2\5\u00c0",
    "a\2\u03be\u03bf\7\u00a3\2\2\u03bf\u03c1\5\u00c0a\2\u03c0\u03be\3\2\2",
    "\2\u03c1\u03c4\3\2\2\2\u03c2\u03c0\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3",
    "\u03c6\3\2\2\2\u03c4\u03c2\3\2\2\2\u03c5\u03bd\3\2\2\2\u03c5\u03c6\3",
    "\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c9\7\u0092\2\2\u03c8\u03bb\3\2\2",
    "\2\u03c8\u03bc\3\2\2\2\u03c9\u00bf\3\2\2\2\u03ca\u03cc\7\u0090\2\2\u03cb",
    "\u03ca\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03cf\3\2\2\2\u03cd\u03d0\5",
    "\u0104\u0083\2\u03ce\u03d0\7\32\2\2\u03cf\u03cd\3\2\2\2\u03cf\u03ce",
    "\3\2\2\2\u03d0\u00c1\3\2\2\2\u03d1\u03d2\7|\2\2\u03d2\u00c3\3\2\2\2",
    "\u03d3\u03d6\5\u00ccg\2\u03d4\u03d6\5\u00c6d\2\u03d5\u03d3\3\2\2\2\u03d5",
    "\u03d4\3\2\2\2\u03d6\u00c5\3\2\2\2\u03d7\u03d8\7\u0095\2\2\u03d8\u03d9",
    "\5\u0098M\2\u03d9\u03da\7\u0096\2\2\u03da\u00c7\3\2\2\2\u03db\u03de",
    "\5\u00ceh\2\u03dc\u03de\5\u00caf\2\u03dd\u03db\3\2\2\2\u03dd\u03dc\3",
    "\2\2\2\u03de\u00c9\3\2\2\2\u03df\u03e0\7\u0095\2\2\u03e0\u03e1\5\u00a4",
    "S\2\u03e1\u03e2\7\u0096\2\2\u03e2\u00cb\3\2\2\2\u03e3\u03e5\7\u0091",
    "\2\2\u03e4\u03e6\5\u00d0i\2\u03e5\u03e4\3\2\2\2\u03e6\u03e7\3\2\2\2",
    "\u03e7\u03e5\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03ea",
    "\7\u0092\2\2\u03ea\u00cd\3\2\2\2\u03eb\u03ed\7\u0091\2\2\u03ec\u03ee",
    "\5\u00d2j\2\u03ed\u03ec\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03ed\3\2",
    "\2\2\u03ef\u03f0\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f2\7\u0092\2\2",
    "\u03f2\u00cf\3\2\2\2\u03f3\u03f6\5\u00d4k\2\u03f4\u03f6\5\u00c4c\2\u03f5",
    "\u03f3\3\2\2\2\u03f5\u03f4\3\2\2\2\u03f6\u00d1\3\2\2\2\u03f7\u03fa\5",
    "\u00d4k\2\u03f8\u03fa\5\u00c8e\2\u03f9\u03f7\3\2\2\2\u03f9\u03f8\3\2",
    "\2\2\u03fa\u00d3\3\2\2\2\u03fb\u03fe\5\u00d8m\2\u03fc\u03fe\5\u00da",
    "n\2\u03fd\u03fb\3\2\2\2\u03fd\u03fc\3\2\2\2\u03fe\u00d5\3\2\2\2\u03ff",
    "\u0402\5\u00d8m\2\u0400\u0402\5\u0104\u0083\2\u0401\u03ff\3\2\2\2\u0401",
    "\u0400\3\2\2\2\u0402\u00d7\3\2\2\2\u0403\u0404\t\5\2\2\u0404\u00d9\3",
    "\2\2\2\u0405\u040c\5\u0104\u0083\2\u0406\u040c\5\u00f6|\2\u0407\u040c",
    "\5\u00f8}\2\u0408\u040c\5\u0100\u0081\2\u0409\u040c\5\u0108\u0085\2",
    "\u040a\u040c\5\u00dco\2\u040b\u0405\3\2\2\2\u040b\u0406\3\2\2\2\u040b",
    "\u0407\3\2\2\2\u040b\u0408\3\2\2\2\u040b\u0409\3\2\2\2\u040b\u040a\3",
    "\2\2\2\u040c\u00db\3\2\2\2\u040d\u040e\7\u0091\2\2\u040e\u040f\7\u0092",
    "\2\2\u040f\u00dd\3\2\2\2\u0410\u0411\bp\1\2\u0411\u0412\t\6\2\2\u0412",
    "\u0419\5\u00dep\f\u0413\u0414\t\7\2\2\u0414\u0419\5\u00dep\13\u0415",
    "\u0416\7\u009e\2\2\u0416\u0419\5\u00dep\n\u0417\u0419\5\u00e4s\2\u0418",
    "\u0410\3\2\2\2\u0418\u0413\3\2\2\2\u0418\u0415\3\2\2\2\u0418\u0417\3",
    "\2\2\2\u0419\u0437\3\2\2\2\u041a\u041b\f\t\2\2\u041b\u041c\t\6\2\2\u041c",
    "\u0436\5\u00dep\n\u041d\u041e\f\b\2\2\u041e\u041f\t\7\2\2\u041f\u0436",
    "\5\u00dep\t\u0420\u0421\f\5\2\2\u0421\u0422\t\b\2\2\u0422\u0436\5\u00de",
    "p\6\u0423\u0424\f\7\2\2\u0424\u0436\5\u00e0q\2\u0425\u0427\f\6\2\2\u0426",
    "\u0428\7q\2\2\u0427\u0426\3\2\2\2\u0427\u0428\3\2\2\2\u0428\u0429\3",
    "\2\2\2\u0429\u042a\7r\2\2\u042a\u042c\7\u0091\2\2\u042b\u042d\5\u008e",
    "H\2\u042c\u042b\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u042e\3\2\2\2\u042e",
    "\u0436\7\u0092\2\2\u042f\u0430\f\4\2\2\u0430\u0431\7\u008e\2\2\u0431",
    "\u0436\5\u00dep\2\u0432\u0433\f\3\2\2\u0433\u0434\7\u008f\2\2\u0434",
    "\u0436\5\u00dep\2\u0435\u041a\3\2\2\2\u0435\u041d\3\2\2\2\u0435\u0420",
    "\3\2\2\2\u0435\u0423\3\2\2\2\u0435\u0425\3\2\2\2\u0435\u042f\3\2\2\2",
    "\u0435\u0432\3\2\2\2\u0436\u0439\3\2\2\2\u0437\u0435\3\2\2\2\u0437\u0438",
    "\3\2\2\2\u0438\u00df\3\2\2\2\u0439\u0437\3\2\2\2\u043a\u043d\5\u00fc",
    "\177\2\u043b\u043d\5\u00fe\u0080\2\u043c\u043a\3\2\2\2\u043c\u043b\3",
    "\2\2\2\u043d\u0440\3\2\2\2\u043e\u043f\t\6\2\2\u043f\u0441\5\u00e2r",
    "\2\u0440\u043e\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u00e1\3\2\2\2\u0442",
    "\u0444\t\t\2\2\u0443\u0442\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0445\3",
    "\2\2\2\u0445\u0446\5\u00e4s\2\u0446\u00e3\3\2\2\2\u0447\u0448\7\u0091",
    "\2\2\u0448\u0449\5\u00dep\2\u0449\u044a\7\u0092\2\2\u044a\u0452\3\2",
    "\2\2\u044b\u0452\5\u00e6t\2\u044c\u0452\5\u00f4{\2\u044d\u0452\5\u00f6",
    "|\2\u044e\u0452\5\u00f8}\2\u044f\u0452\5\u0100\u0081\2\u0450\u0452\5",
    "\u00d8m\2\u0451\u0447\3\2\2\2\u0451\u044b\3\2\2\2\u0451\u044c\3\2\2",
    "\2\u0451\u044d\3\2\2\2\u0451\u044e\3\2\2\2\u0451\u044f\3\2\2\2\u0451",
    "\u0450\3\2\2\2\u0452\u00e5\3\2\2\2\u0453\u0560\5\u00f2z\2\u0454\u0455",
    "\7\33\2\2\u0455\u0456\7\u0091\2\2\u0456\u0457\5\u00dep\2\u0457\u0458",
    "\7\u0092\2\2\u0458\u0560\3\2\2\2\u0459\u045a\7\34\2\2\u045a\u045b\7",
    "\u0091\2\2\u045b\u045c\5\u00dep\2\u045c\u045d\7\u0092\2\2\u045d\u0560",
    "\3\2\2\2\u045e\u045f\7\35\2\2\u045f\u0460\7\u0091\2\2\u0460\u0461\5",
    "\u00dep\2\u0461\u0462\7\u009d\2\2\u0462\u0463\5\u00dep\2\u0463\u0464",
    "\7\u0092\2\2\u0464\u0560\3\2\2\2\u0465\u0466\7\36\2\2\u0466\u0467\7",
    "\u0091\2\2\u0467\u0468\5\u00dep\2\u0468\u0469\7\u0092\2\2\u0469\u0560",
    "\3\2\2\2\u046a\u046b\7\37\2\2\u046b\u046c\7\u0091\2\2\u046c\u046d\5",
    "\u00d8m\2\u046d\u046e\7\u0092\2\2\u046e\u0560\3\2\2\2\u046f\u0470\7",
    "B\2\2\u0470\u0471\7\u0091\2\2\u0471\u0472\5\u00dep\2\u0472\u0473\7\u0092",
    "\2\2\u0473\u0560\3\2\2\2\u0474\u0475\7C\2\2\u0475\u0476\7\u0091\2\2",
    "\u0476\u0477\5\u00dep\2\u0477\u0478\7\u0092\2\2\u0478\u0560\3\2\2\2",
    "\u0479\u047a\7D\2\2\u047a\u047c\7\u0091\2\2\u047b\u047d\5\u00dep\2\u047c",
    "\u047b\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u047e\3\2\2\2\u047e\u0560\7",
    "\u0092\2\2\u047f\u0480\7E\2\2\u0480\u0481\7\u0091\2\2\u0481\u0560\7",
    "\u0092\2\2\u0482\u0483\7F\2\2\u0483\u0484\7\u0091\2\2\u0484\u0485\5",
    "\u00dep\2\u0485\u0486\7\u0092\2\2\u0486\u0560\3\2\2\2\u0487\u0488\7",
    "G\2\2\u0488\u0489\7\u0091\2\2\u0489\u048a\5\u00dep\2\u048a\u048b\7\u0092",
    "\2\2\u048b\u0560\3\2\2\2\u048c\u048d\7H\2\2\u048d\u048e\7\u0091\2\2",
    "\u048e\u048f\5\u00dep\2\u048f\u0490\7\u0092\2\2\u0490\u0560\3\2\2\2",
    "\u0491\u0492\7I\2\2\u0492\u0493\7\u0091\2\2\u0493\u0494\5\u00dep\2\u0494",
    "\u0495\7\u0092\2\2\u0495\u0560\3\2\2\2\u0496\u0497\7J\2\2\u0497\u0499",
    "\7\u0091\2\2\u0498\u049a\5\u008eH\2\u0499\u0498\3\2\2\2\u0499\u049a",
    "\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u0560\7\u0092\2\2\u049c\u0560\5\u00ea",
    "v\2\u049d\u049e\7K\2\2\u049e\u049f\7\u0091\2\2\u049f\u04a0\5\u00dep",
    "\2\u04a0\u04a1\7\u0092\2\2\u04a1\u0560\3\2\2\2\u04a2\u0560\5\u00ecw",
    "\2\u04a3\u04a4\7L\2\2\u04a4\u04a5\7\u0091\2\2\u04a5\u04a6\5\u00dep\2",
    "\u04a6\u04a7\7\u0092\2\2\u04a7\u0560\3\2\2\2\u04a8\u04a9\7M\2\2\u04a9",
    "\u04aa\7\u0091\2\2\u04aa\u04ab\5\u00dep\2\u04ab\u04ac\7\u0092\2\2\u04ac",
    "\u0560\3\2\2\2\u04ad\u04ae\7N\2\2\u04ae\u04af\7\u0091\2\2\u04af\u04b0",
    "\5\u00dep\2\u04b0\u04b1\7\u0092\2\2\u04b1\u0560\3\2\2\2\u04b2\u04b3",
    "\7O\2\2\u04b3\u04b4\7\u0091\2\2\u04b4\u04b5\5\u00dep\2\u04b5\u04b6\7",
    "\u009d\2\2\u04b6\u04b7\5\u00dep\2\u04b7\u04b8\7\u0092\2\2\u04b8\u0560",
    "\3\2\2\2\u04b9\u04ba\7P\2\2\u04ba\u04bb\7\u0091\2\2\u04bb\u04bc\5\u00de",
    "p\2\u04bc\u04bd\7\u009d\2\2\u04bd\u04be\5\u00dep\2\u04be\u04bf\7\u0092",
    "\2\2\u04bf\u0560\3\2\2\2\u04c0\u04c1\7Q\2\2\u04c1\u04c2\7\u0091\2\2",
    "\u04c2\u04c3\5\u00dep\2\u04c3\u04c4\7\u009d\2\2\u04c4\u04c5\5\u00de",
    "p\2\u04c5\u04c6\7\u0092\2\2\u04c6\u0560\3\2\2\2\u04c7\u04c8\7R\2\2\u04c8",
    "\u04c9\7\u0091\2\2\u04c9\u04ca\5\u00dep\2\u04ca\u04cb\7\u009d\2\2\u04cb",
    "\u04cc\5\u00dep\2\u04cc\u04cd\7\u0092\2\2\u04cd\u0560\3\2\2\2\u04ce",
    "\u04cf\7S\2\2\u04cf\u04d0\7\u0091\2\2\u04d0\u04d1\5\u00dep\2\u04d1\u04d2",
    "\7\u009d\2\2\u04d2\u04d3\5\u00dep\2\u04d3\u04d4\7\u0092\2\2\u04d4\u0560",
    "\3\2\2\2\u04d5\u04d6\7U\2\2\u04d6\u04d7\7\u0091\2\2\u04d7\u04d8\5\u00de",
    "p\2\u04d8\u04d9\7\u0092\2\2\u04d9\u0560\3\2\2\2\u04da\u04db\7V\2\2\u04db",
    "\u04dc\7\u0091\2\2\u04dc\u04dd\5\u00dep\2\u04dd\u04de\7\u0092\2\2\u04de",
    "\u0560\3\2\2\2\u04df\u04e0\7W\2\2\u04e0\u04e1\7\u0091\2\2\u04e1\u04e2",
    "\5\u00dep\2\u04e2\u04e3\7\u0092\2\2\u04e3\u0560\3\2\2\2\u04e4\u04e5",
    "\7X\2\2\u04e5\u04e6\7\u0091\2\2\u04e6\u04e7\5\u00dep\2\u04e7\u04e8\7",
    "\u0092\2\2\u04e8\u0560\3\2\2\2\u04e9\u04ea\7Y\2\2\u04ea\u04eb\7\u0091",
    "\2\2\u04eb\u04ec\5\u00dep\2\u04ec\u04ed\7\u0092\2\2\u04ed\u0560\3\2",
    "\2\2\u04ee\u04ef\7Z\2\2\u04ef\u04f0\7\u0091\2\2\u04f0\u04f1\5\u00de",
    "p\2\u04f1\u04f2\7\u0092\2\2\u04f2\u0560\3\2\2\2\u04f3\u04f4\7[\2\2\u04f4",
    "\u04f5\7\u0091\2\2\u04f5\u04f6\5\u00dep\2\u04f6\u04f7\7\u0092\2\2\u04f7",
    "\u0560\3\2\2\2\u04f8\u04f9\7\\\2\2\u04f9\u04fa\7\u0091\2\2\u04fa\u04fb",
    "\5\u00dep\2\u04fb\u04fc\7\u0092\2\2\u04fc\u0560\3\2\2\2\u04fd\u04fe",
    "\7]\2\2\u04fe\u04ff\7\u0091\2\2\u04ff\u0560\7\u0092\2\2\u0500\u0501",
    "\7^\2\2\u0501\u0502\7\u0091\2\2\u0502\u0560\7\u0092\2\2\u0503\u0504",
    "\7_\2\2\u0504\u0505\7\u0091\2\2\u0505\u0560\7\u0092\2\2\u0506\u0507",
    "\7`\2\2\u0507\u0508\7\u0091\2\2\u0508\u0509\5\u00dep\2\u0509\u050a\7",
    "\u0092\2\2\u050a\u0560\3\2\2\2\u050b\u050c\7a\2\2\u050c\u050d\7\u0091",
    "\2\2\u050d\u050e\5\u00dep\2\u050e\u050f\7\u0092\2\2\u050f\u0560\3\2",
    "\2\2\u0510\u0511\7b\2\2\u0511\u0512\7\u0091\2\2\u0512\u0513\5\u00de",
    "p\2\u0513\u0514\7\u0092\2\2\u0514\u0560\3\2\2\2\u0515\u0516\7c\2\2\u0516",
    "\u0517\7\u0091\2\2\u0517\u0518\5\u00dep\2\u0518\u0519\7\u0092\2\2\u0519",
    "\u0560\3\2\2\2\u051a\u051b\7d\2\2\u051b\u051c\7\u0091\2\2\u051c\u051d",
    "\5\u00dep\2\u051d\u051e\7\u0092\2\2\u051e\u0560\3\2\2\2\u051f\u0520",
    "\7e\2\2\u0520\u0522\7\u0091\2\2\u0521\u0523\5\u008eH\2\u0522\u0521\3",
    "\2\2\2\u0522\u0523\3\2\2\2\u0523\u0524\3\2\2\2\u0524\u0560\7\u0092\2",
    "\2\u0525\u0526\7f\2\2\u0526\u0527\7\u0091\2\2\u0527\u0528\5\u00dep\2",
    "\u0528\u0529\7\u009d\2\2\u0529\u052a\5\u00dep\2\u052a\u052b\7\u009d",
    "\2\2\u052b\u052c\5\u00dep\2\u052c\u052d\7\u0092\2\2\u052d\u0560\3\2",
    "\2\2\u052e\u052f\7g\2\2\u052f\u0530\7\u0091\2\2\u0530\u0531\5\u00de",
    "p\2\u0531\u0532\7\u009d\2\2\u0532\u0533\5\u00dep\2\u0533\u0534\7\u0092",
    "\2\2\u0534\u0560\3\2\2\2\u0535\u0536\7h\2\2\u0536\u0537\7\u0091\2\2",
    "\u0537\u0538\5\u00dep\2\u0538\u0539\7\u009d\2\2\u0539\u053a\5\u00de",
    "p\2\u053a\u053b\7\u0092\2\2\u053b\u0560\3\2\2\2\u053c\u053d\7 \2\2\u053d",
    "\u053e\7\u0091\2\2\u053e\u053f\5\u00dep\2\u053f\u0540\7\u009d\2\2\u0540",
    "\u0541\5\u00dep\2\u0541\u0542\7\u0092\2\2\u0542\u0560\3\2\2\2\u0543",
    "\u0544\7!\2\2\u0544\u0545\7\u0091\2\2\u0545\u0546\5\u00dep\2\u0546\u0547",
    "\7\u0092\2\2\u0547\u0560\3\2\2\2\u0548\u0549\7\"\2\2\u0549\u054a\7\u0091",
    "\2\2\u054a\u054b\5\u00dep\2\u054b\u054c\7\u0092\2\2\u054c\u0560\3\2",
    "\2\2\u054d\u054e\7#\2\2\u054e\u054f\7\u0091\2\2\u054f\u0550\5\u00de",
    "p\2\u0550\u0551\7\u0092\2\2\u0551\u0560\3\2\2\2\u0552\u0553\7$\2\2\u0553",
    "\u0554\7\u0091\2\2\u0554\u0555\5\u00dep\2\u0555\u0556\7\u0092\2\2\u0556",
    "\u0560\3\2\2\2\u0557\u0558\7i\2\2\u0558\u0559\7\u0091\2\2\u0559\u055a",
    "\5\u00dep\2\u055a\u055b\7\u0092\2\2\u055b\u0560\3\2\2\2\u055c\u0560",
    "\5\u00e8u\2\u055d\u0560\5\u00eex\2\u055e\u0560\5\u00f0y\2\u055f\u0453",
    "\3\2\2\2\u055f\u0454\3\2\2\2\u055f\u0459\3\2\2\2\u055f\u045e\3\2\2\2",
    "\u055f\u0465\3\2\2\2\u055f\u046a\3\2\2\2\u055f\u046f\3\2\2\2\u055f\u0474",
    "\3\2\2\2\u055f\u0479\3\2\2\2\u055f\u047f\3\2\2\2\u055f\u0482\3\2\2\2",
    "\u055f\u0487\3\2\2\2\u055f\u048c\3\2\2\2\u055f\u0491\3\2\2\2\u055f\u0496",
    "\3\2\2\2\u055f\u049c\3\2\2\2\u055f\u049d\3\2\2\2\u055f\u04a2\3\2\2\2",
    "\u055f\u04a3\3\2\2\2\u055f\u04a8\3\2\2\2\u055f\u04ad\3\2\2\2\u055f\u04b2",
    "\3\2\2\2\u055f\u04b9\3\2\2\2\u055f\u04c0\3\2\2\2\u055f\u04c7\3\2\2\2",
    "\u055f\u04ce\3\2\2\2\u055f\u04d5\3\2\2\2\u055f\u04da\3\2\2\2\u055f\u04df",
    "\3\2\2\2\u055f\u04e4\3\2\2\2\u055f\u04e9\3\2\2\2\u055f\u04ee\3\2\2\2",
    "\u055f\u04f3\3\2\2\2\u055f\u04f8\3\2\2\2\u055f\u04fd\3\2\2\2\u055f\u0500",
    "\3\2\2\2\u055f\u0503\3\2\2\2\u055f\u0506\3\2\2\2\u055f\u050b\3\2\2\2",
    "\u055f\u0510\3\2\2\2\u055f\u0515\3\2\2\2\u055f\u051a\3\2\2\2\u055f\u051f",
    "\3\2\2\2\u055f\u0525\3\2\2\2\u055f\u052e\3\2\2\2\u055f\u0535\3\2\2\2",
    "\u055f\u053c\3\2\2\2\u055f\u0543\3\2\2\2\u055f\u0548\3\2\2\2\u055f\u054d",
    "\3\2\2\2\u055f\u0552\3\2\2\2\u055f\u0557\3\2\2\2\u055f\u055c\3\2\2\2",
    "\u055f\u055d\3\2\2\2\u055f\u055e\3\2\2\2\u0560\u00e7\3\2\2\2\u0561\u0562",
    "\7%\2\2\u0562\u0563\7\u0091\2\2\u0563\u0564\5\u00dep\2\u0564\u0565\7",
    "\u009d\2\2\u0565\u0568\5\u00dep\2\u0566\u0567\7\u009d\2\2\u0567\u0569",
    "\5\u00dep\2\u0568\u0566\3\2\2\2\u0568\u0569\3\2\2\2\u0569\u056a\3\2",
    "\2\2\u056a\u056b\7\u0092\2\2\u056b\u00e9\3\2\2\2\u056c\u056d\7&\2\2",
    "\u056d\u056e\7\u0091\2\2\u056e\u056f\5\u00dep\2\u056f\u0570\7\u009d",
    "\2\2\u0570\u0573\5\u00dep\2\u0571\u0572\7\u009d\2\2\u0572\u0574\5\u00de",
    "p\2\u0573\u0571\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0575\3\2\2\2\u0575",
    "\u0576\7\u0092\2\2\u0576\u00eb\3\2\2\2\u0577\u0578\7T\2\2\u0578\u0579",
    "\7\u0091\2\2\u0579\u057a\5\u00dep\2\u057a\u057b\7\u009d\2\2\u057b\u057c",
    "\5\u00dep\2\u057c\u057d\7\u009d\2\2\u057d\u0580\5\u00dep\2\u057e\u057f",
    "\7\u009d\2\2\u057f\u0581\5\u00dep\2\u0580\u057e\3\2\2\2\u0580\u0581",
    "\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0583\7\u0092\2\2\u0583\u00ed\3\2",
    "\2\2\u0584\u0585\7s\2\2\u0585\u0586\5d\63\2\u0586\u00ef\3\2\2\2\u0587",
    "\u0588\7q\2\2\u0588\u0589\7s\2\2\u0589\u058a\5d\63\2\u058a\u00f1\3\2",
    "\2\2\u058b\u058c\7j\2\2\u058c\u058e\7\u0091\2\2\u058d\u058f\7\7\2\2",
    "\u058e\u058d\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u0592\3\2\2\2\u0590\u0593",
    "\7\u009b\2\2\u0591\u0593\5\u00dep\2\u0592\u0590\3\2\2\2\u0592\u0591",
    "\3\2\2\2\u0593\u0594\3\2\2\2\u0594\u05cc\7\u0092\2\2\u0595\u0596\7k",
    "\2\2\u0596\u0598\7\u0091\2\2\u0597\u0599\7\7\2\2\u0598\u0597\3\2\2\2",
    "\u0598\u0599\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u059b\5\u00dep\2\u059b",
    "\u059c\7\u0092\2\2\u059c\u05cc\3\2\2\2\u059d\u059e\7l\2\2\u059e\u05a0",
    "\7\u0091\2\2\u059f\u05a1\7\7\2\2\u05a0\u059f\3\2\2\2\u05a0\u05a1\3\2",
    "\2\2\u05a1\u05a2\3\2\2\2\u05a2\u05a3\5\u00dep\2\u05a3\u05a4\7\u0092",
    "\2\2\u05a4\u05cc\3\2\2\2\u05a5\u05a6\7m\2\2\u05a6\u05a8\7\u0091\2\2",
    "\u05a7\u05a9\7\7\2\2\u05a8\u05a7\3\2\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05aa",
    "\3\2\2\2\u05aa\u05ab\5\u00dep\2\u05ab\u05ac\7\u0092\2\2\u05ac\u05cc",
    "\3\2\2\2\u05ad\u05ae\7n\2\2\u05ae\u05b0\7\u0091\2\2\u05af\u05b1\7\7",
    "\2\2\u05b0\u05af\3\2\2\2\u05b0\u05b1\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2",
    "\u05b3\5\u00dep\2\u05b3\u05b4\7\u0092\2\2\u05b4\u05cc\3\2\2\2\u05b5",
    "\u05b6\7o\2\2\u05b6\u05b8\7\u0091\2\2\u05b7\u05b9\7\7\2\2\u05b8\u05b7",
    "\3\2\2\2\u05b8\u05b9\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05bb\5\u00de",
    "p\2\u05bb\u05bc\7\u0092\2\2\u05bc\u05cc\3\2\2\2\u05bd\u05be\7p\2\2\u05be",
    "\u05c0\7\u0091\2\2\u05bf\u05c1\7\7\2\2\u05c0\u05bf\3\2\2\2\u05c0\u05c1",
    "\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u05c7\5\u00dep\2\u05c3\u05c4\7\u0097",
    "\2\2\u05c4\u05c5\7t\2\2\u05c5\u05c6\7\u00a0\2\2\u05c6\u05c8\5\u0102",
    "\u0082\2\u05c7\u05c3\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05c9\3\2\2\2",
    "\u05c9\u05ca\7\u0092\2\2\u05ca\u05cc\3\2\2\2\u05cb\u058b\3\2\2\2\u05cb",
    "\u0595\3\2\2\2\u05cb\u059d\3\2\2\2\u05cb\u05a5\3\2\2\2\u05cb\u05ad\3",
    "\2\2\2\u05cb\u05b5\3\2\2\2\u05cb\u05bd\3\2\2\2\u05cc\u00f3\3\2\2\2\u05cd",
    "\u05cf\5\u0104\u0083\2\u05ce\u05d0\5\u008cG\2\u05cf\u05ce\3\2\2\2\u05cf",
    "\u05d0\3\2\2\2\u05d0\u00f5\3\2\2\2\u05d1\u05d5\5\u0102\u0082\2\u05d2",
    "\u05d6\7{\2\2\u05d3\u05d4\7\u008a\2\2\u05d4\u05d6\5\u0104\u0083\2\u05d5",
    "\u05d2\3\2\2\2\u05d5\u05d3\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u00f7\3",
    "\2\2\2\u05d7\u05db\5\u00fa~\2\u05d8\u05db\5\u00fc\177\2\u05d9\u05db",
    "\5\u00fe\u0080\2\u05da\u05d7\3\2\2\2\u05da\u05d8\3\2\2\2\u05da\u05d9",
    "\3\2\2\2\u05db\u00f9\3\2\2\2\u05dc\u05dd\t\n\2\2\u05dd\u00fb\3\2\2\2",
    "\u05de\u05df\t\13\2\2\u05df\u00fd\3\2\2\2\u05e0\u05e1\t\f\2\2\u05e1",
    "\u00ff\3\2\2\2\u05e2\u05e3\t\r\2\2\u05e3\u0101\3\2\2\2\u05e4\u05e5\t",
    "\16\2\2\u05e5\u0103\3\2\2\2\u05e6\u05e9\7u\2\2\u05e7\u05e9\5\u0106\u0084",
    "\2\u05e8\u05e6\3\2\2\2\u05e8\u05e7\3\2\2\2\u05e9\u0105\3\2\2\2\u05ea",
    "\u05eb\t\17\2\2\u05eb\u0107\3\2\2\2\u05ec\u05ef\7x\2\2\u05ed\u05ef\5",
    "\u010a\u0086\2\u05ee\u05ec\3\2\2\2\u05ee\u05ed\3\2\2\2\u05ef\u0109\3",
    "\2\2\2\u05f0\u05f1\7\u0095\2\2\u05f1\u05f2\7\u0096\2\2\u05f2\u010b\3",
    "\2\2\2\u0096\u0111\u0117\u011a\u011e\u0120\u012e\u013b\u0140\u0143\u014c",
    "\u0153\u015c\u0162\u0166\u016c\u016f\u0174\u0178\u0180\u0188\u018d\u0192",
    "\u0195\u0198\u019b\u01a2\u01aa\u01af\u01b5\u01be\u01c7\u01cb\u01cf\u01d1",
    "\u01db\u01e5\u01ea\u01ec\u01f9\u01fd\u0202\u0206\u020c\u0212\u0218\u0220",
    "\u0228\u023c\u0240\u0243\u0248\u0256\u025c\u025f\u0268\u0273\u0278\u027d",
    "\u0280\u0286\u028d\u0291\u0297\u029c\u02a1\u02a6\u02a9\u02ae\u02b2\u02bd",
    "\u02c8\u02d9\u02e0\u02e9\u02f1\u02fa\u0304\u030e\u031a\u0321\u0325\u032e",
    "\u0333\u033a\u033e\u0347\u034a\u0352\u0356\u035b\u0362\u036d\u0370\u0374",
    "\u0379\u037d\u0382\u038f\u039b\u03a3\u03a8\u03ab\u03b9\u03c2\u03c5\u03c8",
    "\u03cb\u03cf\u03d5\u03dd\u03e7\u03ef\u03f5\u03f9\u03fd\u0401\u040b\u0418",
    "\u0427\u042c\u0435\u0437\u043c\u0440\u0443\u0451\u047c\u0499\u0522\u055f",
    "\u0568\u0573\u0580\u058e\u0592\u0598\u05a0\u05a8\u05b0\u05b8\u05c0\u05c7",
    "\u05cb\u05cf\u05d5\u05da\u05e8\u05ee"].join("");


var literalNames = [ 'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', "'a'", 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', 'null', 'null', 'null', 'null', 
                     'null', 'null', 'null', "'^^'", "'<='", "'>='", "'!='", 
                     "'&&'", "'||'", "'^'", "'('", "')'", "'{'", "'}'", 
                     "'['", "']'", "';'", "'.'", "'+'", "'-'", "'*'", "'?'", 
                     "','", "'!'", "'/'", "'='", "'<'", "'>'", "'|'" ];

var symbolicNames = [ 'null', "WS", "BASE", "PREFIX", "SELECT", "DISTINCT", 
                      "REDUCED", "CONSTRUCT", "DESCRIBE", "ASK", "FROM", 
                      "NAMED", "WHERE", "ORDER", "BY", "ASC", "DESC", "LIMIT", 
                      "OFFSET", "VALUES", "OPTIONAL", "GRAPH", "UNION", 
                      "FILTER", "A", "STR", "LANG", "LANGMATCHES", "DATATYPE", 
                      "BOUND", "SAMETERM", "ISIRI", "ISURI", "ISBLANK", 
                      "ISLITERAL", "REGEX", "SUBSTR", "TRUE", "FALSE", "LOAD", 
                      "CLEAR", "DROP", "ADD", "MOVE", "COPY", "CREATE", 
                      "DELETE", "INSERT", "USING", "SILENT", "DEFAULT", 
                      "ALL", "DATA", "WITH", "INTO", "TO", "AS", "GROUP", 
                      "HAVING", "UNDEF", "BINDINGS", "SERVICE", "BIND", 
                      "MINUS", "IRI", "URI", "BNODE", "RAND", "ABS", "CEIL", 
                      "FLOOR", "ROUND", "CONCAT", "STRLEN", "UCASE", "LCASE", 
                      "ENCODE_FOR_URI", "CONTAINS", "STRSTARTS", "STRENDS", 
                      "STRBEFORE", "STRAFTER", "REPLACE", "YEAR", "MONTH", 
                      "DAY", "HOURS", "MINUTES", "SECONDS", "TIMEZONE", 
                      "TZ", "NOW", "UUID", "STRUUID", "MD5", "SHA1", "SHA256", 
                      "SHA384", "SHA512", "COALESCE", "IF", "STRLANG", "STRDT", 
                      "ISNUMERIC", "COUNT", "SUM", "MIN", "MAX", "AVG", 
                      "SAMPLE", "GROUP_CONCAT", "NOT", "IN", "EXISTS", "SEPARATOR", 
                      "IRIREF", "PNAME_NS", "PNAME_LN", "BLANK_NODE_LABEL", 
                      "VAR1", "VAR2", "LANGTAG", "INTEGER", "DECIMAL", "DOUBLE", 
                      "INTEGER_POSITIVE", "DECIMAL_POSITIVE", "DOUBLE_POSITIVE", 
                      "INTEGER_NEGATIVE", "DECIMAL_NEGATIVE", "DOUBLE_NEGATIVE", 
                      "STRING_LITERAL1", "STRING_LITERAL2", "STRING_LITERAL_LONG1", 
                      "STRING_LITERAL_LONG2", "COMMENT", "REFERENCE", "LESS_EQUAL", 
                      "GREATER_EQUAL", "NOT_EQUAL", "AND", "OR", "INVERSE", 
                      "OPEN_BRACE", "CLOSE_BRACE", "OPEN_CURLY_BRACE", "CLOSE_CURLY_BRACE", 
                      "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", "SEMICOLON", 
                      "DOT", "PLUS_SIGN", "MINUS_SIGN", "ASTERISK", "QUESTION_MARK", 
                      "COMMA", "NEGATION", "DIVIDE", "EQUAL", "LESS", "GREATER", 
                      "PIPE", "ANY" ];

var ruleNames =  [ "query", "prologue", "baseDecl", "prefixDecl", "selectQuery", 
                   "subSelect", "selectClause", "selectVariables", "constructQuery", 
                   "describeQuery", "askQuery", "datasetClause", "whereClause", 
                   "solutionModifier", "groupClause", "groupCondition", 
                   "havingClause", "havingCondition", "orderClause", "orderCondition", 
                   "limitOffsetClauses", "limitClause", "offsetClause", 
                   "valuesClause", "updateCommand", "update", "load", "clear", 
                   "drop", "create", "add", "move", "copy", "insertData", 
                   "deleteData", "deleteWhere", "modify", "deleteClause", 
                   "insertClause", "usingClause", "graphOrDefault", "graphRef", 
                   "graphRefAll", "quadPattern", "quadData", "quads", "quadsDetails", 
                   "quadsNotTriples", "triplesTemplate", "groupGraphPattern", 
                   "groupGraphPatternSub", "groupGraphPatternSubList", "triplesBlock", 
                   "graphPatternNotTriples", "optionalGraphPattern", "graphGraphPattern", 
                   "serviceGraphPattern", "bind", "inlineData", "dataBlock", 
                   "inlineDataOneVar", "inlineDataFull", "dataBlockValues", 
                   "dataBlockValue", "minusGraphPattern", "groupOrUnionGraphPattern", 
                   "filter", "constraint", "functionCall", "argList", "expressionList", 
                   "constructTemplate", "constructTriples", "triplesSameSubject", 
                   "propertyList", "propertyListNotEmpty", "verb", "objectList", 
                   "object", "triplesSameSubjectPath", "propertyListPath", 
                   "propertyListPathNotEmpty", "propertyListPathNotEmptyList", 
                   "verbPath", "verbSimple", "objectListPath", "objectPath", 
                   "path", "pathAlternative", "pathSequence", "pathElt", 
                   "pathEltOrInverse", "pathMod", "pathPrimary", "pathNegatedPropertySet", 
                   "pathOneInPropertySet", "integer", "triplesNode", "blankNodePropertyList", 
                   "triplesNodePath", "blankNodePropertyListPath", "collection", 
                   "collectionPath", "graphNode", "graphNodePath", "varOrTerm", 
                   "varOrIRI", "var", "graphTerm", "nil", "expression", 
                   "unaryLiteralExpression", "unaryExpression", "primaryExpression", 
                   "builtInCall", "regexExpression", "subStringExpression", 
                   "strReplaceExpression", "existsFunction", "notExistsFunction", 
                   "aggregate", "iriRefOrFunction", "rdfLiteral", "numericLiteral", 
                   "numericLiteralUnsigned", "numericLiteralPositive", "numericLiteralNegative", 
                   "booleanLiteral", "string", "iri", "prefixedName", "blankNode", 
                   "anon" ];

function SparqlParser (input) {
    // szydan moved into constructor
    var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);
    var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });
    var sharedContextCache = new antlr4.PredictionContextCache();
    this.atn = atn; // instead of Object.defineProperty commented in line 738
    // szydan end

    antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SparqlParser.prototype = Object.create(antlr4.Parser.prototype);
SparqlParser.prototype.constructor = SparqlParser;

/*  szydan commented this out - instead atn is assigned directly to this in the constructor
Object.defineProperty(SparqlParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});
*/

SparqlParser.EOF = antlr4.Token.EOF;
SparqlParser.WS = 1;
SparqlParser.BASE = 2;
SparqlParser.PREFIX = 3;
SparqlParser.SELECT = 4;
SparqlParser.DISTINCT = 5;
SparqlParser.REDUCED = 6;
SparqlParser.CONSTRUCT = 7;
SparqlParser.DESCRIBE = 8;
SparqlParser.ASK = 9;
SparqlParser.FROM = 10;
SparqlParser.NAMED = 11;
SparqlParser.WHERE = 12;
SparqlParser.ORDER = 13;
SparqlParser.BY = 14;
SparqlParser.ASC = 15;
SparqlParser.DESC = 16;
SparqlParser.LIMIT = 17;
SparqlParser.OFFSET = 18;
SparqlParser.VALUES = 19;
SparqlParser.OPTIONAL = 20;
SparqlParser.GRAPH = 21;
SparqlParser.UNION = 22;
SparqlParser.FILTER = 23;
SparqlParser.A = 24;
SparqlParser.STR = 25;
SparqlParser.LANG = 26;
SparqlParser.LANGMATCHES = 27;
SparqlParser.DATATYPE = 28;
SparqlParser.BOUND = 29;
SparqlParser.SAMETERM = 30;
SparqlParser.ISIRI = 31;
SparqlParser.ISURI = 32;
SparqlParser.ISBLANK = 33;
SparqlParser.ISLITERAL = 34;
SparqlParser.REGEX = 35;
SparqlParser.SUBSTR = 36;
SparqlParser.TRUE = 37;
SparqlParser.FALSE = 38;
SparqlParser.LOAD = 39;
SparqlParser.CLEAR = 40;
SparqlParser.DROP = 41;
SparqlParser.ADD = 42;
SparqlParser.MOVE = 43;
SparqlParser.COPY = 44;
SparqlParser.CREATE = 45;
SparqlParser.DELETE = 46;
SparqlParser.INSERT = 47;
SparqlParser.USING = 48;
SparqlParser.SILENT = 49;
SparqlParser.DEFAULT = 50;
SparqlParser.ALL = 51;
SparqlParser.DATA = 52;
SparqlParser.WITH = 53;
SparqlParser.INTO = 54;
SparqlParser.TO = 55;
SparqlParser.AS = 56;
SparqlParser.GROUP = 57;
SparqlParser.HAVING = 58;
SparqlParser.UNDEF = 59;
SparqlParser.BINDINGS = 60;
SparqlParser.SERVICE = 61;
SparqlParser.BIND = 62;
SparqlParser.MINUS = 63;
SparqlParser.IRI = 64;
SparqlParser.URI = 65;
SparqlParser.BNODE = 66;
SparqlParser.RAND = 67;
SparqlParser.ABS = 68;
SparqlParser.CEIL = 69;
SparqlParser.FLOOR = 70;
SparqlParser.ROUND = 71;
SparqlParser.CONCAT = 72;
SparqlParser.STRLEN = 73;
SparqlParser.UCASE = 74;
SparqlParser.LCASE = 75;
SparqlParser.ENCODE_FOR_URI = 76;
SparqlParser.CONTAINS = 77;
SparqlParser.STRSTARTS = 78;
SparqlParser.STRENDS = 79;
SparqlParser.STRBEFORE = 80;
SparqlParser.STRAFTER = 81;
SparqlParser.REPLACE = 82;
SparqlParser.YEAR = 83;
SparqlParser.MONTH = 84;
SparqlParser.DAY = 85;
SparqlParser.HOURS = 86;
SparqlParser.MINUTES = 87;
SparqlParser.SECONDS = 88;
SparqlParser.TIMEZONE = 89;
SparqlParser.TZ = 90;
SparqlParser.NOW = 91;
SparqlParser.UUID = 92;
SparqlParser.STRUUID = 93;
SparqlParser.MD5 = 94;
SparqlParser.SHA1 = 95;
SparqlParser.SHA256 = 96;
SparqlParser.SHA384 = 97;
SparqlParser.SHA512 = 98;
SparqlParser.COALESCE = 99;
SparqlParser.IF = 100;
SparqlParser.STRLANG = 101;
SparqlParser.STRDT = 102;
SparqlParser.ISNUMERIC = 103;
SparqlParser.COUNT = 104;
SparqlParser.SUM = 105;
SparqlParser.MIN = 106;
SparqlParser.MAX = 107;
SparqlParser.AVG = 108;
SparqlParser.SAMPLE = 109;
SparqlParser.GROUP_CONCAT = 110;
SparqlParser.NOT = 111;
SparqlParser.IN = 112;
SparqlParser.EXISTS = 113;
SparqlParser.SEPARATOR = 114;
SparqlParser.IRIREF = 115;
SparqlParser.PNAME_NS = 116;
SparqlParser.PNAME_LN = 117;
SparqlParser.BLANK_NODE_LABEL = 118;
SparqlParser.VAR1 = 119;
SparqlParser.VAR2 = 120;
SparqlParser.LANGTAG = 121;
SparqlParser.INTEGER = 122;
SparqlParser.DECIMAL = 123;
SparqlParser.DOUBLE = 124;
SparqlParser.INTEGER_POSITIVE = 125;
SparqlParser.DECIMAL_POSITIVE = 126;
SparqlParser.DOUBLE_POSITIVE = 127;
SparqlParser.INTEGER_NEGATIVE = 128;
SparqlParser.DECIMAL_NEGATIVE = 129;
SparqlParser.DOUBLE_NEGATIVE = 130;
SparqlParser.STRING_LITERAL1 = 131;
SparqlParser.STRING_LITERAL2 = 132;
SparqlParser.STRING_LITERAL_LONG1 = 133;
SparqlParser.STRING_LITERAL_LONG2 = 134;
SparqlParser.COMMENT = 135;
SparqlParser.REFERENCE = 136;
SparqlParser.LESS_EQUAL = 137;
SparqlParser.GREATER_EQUAL = 138;
SparqlParser.NOT_EQUAL = 139;
SparqlParser.AND = 140;
SparqlParser.OR = 141;
SparqlParser.INVERSE = 142;
SparqlParser.OPEN_BRACE = 143;
SparqlParser.CLOSE_BRACE = 144;
SparqlParser.OPEN_CURLY_BRACE = 145;
SparqlParser.CLOSE_CURLY_BRACE = 146;
SparqlParser.OPEN_SQUARE_BRACKET = 147;
SparqlParser.CLOSE_SQUARE_BRACKET = 148;
SparqlParser.SEMICOLON = 149;
SparqlParser.DOT = 150;
SparqlParser.PLUS_SIGN = 151;
SparqlParser.MINUS_SIGN = 152;
SparqlParser.ASTERISK = 153;
SparqlParser.QUESTION_MARK = 154;
SparqlParser.COMMA = 155;
SparqlParser.NEGATION = 156;
SparqlParser.DIVIDE = 157;
SparqlParser.EQUAL = 158;
SparqlParser.LESS = 159;
SparqlParser.GREATER = 160;
SparqlParser.PIPE = 161;
SparqlParser.ANY = 162;

SparqlParser.RULE_query = 0;
SparqlParser.RULE_prologue = 1;
SparqlParser.RULE_baseDecl = 2;
SparqlParser.RULE_prefixDecl = 3;
SparqlParser.RULE_selectQuery = 4;
SparqlParser.RULE_subSelect = 5;
SparqlParser.RULE_selectClause = 6;
SparqlParser.RULE_selectVariables = 7;
SparqlParser.RULE_constructQuery = 8;
SparqlParser.RULE_describeQuery = 9;
SparqlParser.RULE_askQuery = 10;
SparqlParser.RULE_datasetClause = 11;
SparqlParser.RULE_whereClause = 12;
SparqlParser.RULE_solutionModifier = 13;
SparqlParser.RULE_groupClause = 14;
SparqlParser.RULE_groupCondition = 15;
SparqlParser.RULE_havingClause = 16;
SparqlParser.RULE_havingCondition = 17;
SparqlParser.RULE_orderClause = 18;
SparqlParser.RULE_orderCondition = 19;
SparqlParser.RULE_limitOffsetClauses = 20;
SparqlParser.RULE_limitClause = 21;
SparqlParser.RULE_offsetClause = 22;
SparqlParser.RULE_valuesClause = 23;
SparqlParser.RULE_updateCommand = 24;
SparqlParser.RULE_update = 25;
SparqlParser.RULE_load = 26;
SparqlParser.RULE_clear = 27;
SparqlParser.RULE_drop = 28;
SparqlParser.RULE_create = 29;
SparqlParser.RULE_add = 30;
SparqlParser.RULE_move = 31;
SparqlParser.RULE_copy = 32;
SparqlParser.RULE_insertData = 33;
SparqlParser.RULE_deleteData = 34;
SparqlParser.RULE_deleteWhere = 35;
SparqlParser.RULE_modify = 36;
SparqlParser.RULE_deleteClause = 37;
SparqlParser.RULE_insertClause = 38;
SparqlParser.RULE_usingClause = 39;
SparqlParser.RULE_graphOrDefault = 40;
SparqlParser.RULE_graphRef = 41;
SparqlParser.RULE_graphRefAll = 42;
SparqlParser.RULE_quadPattern = 43;
SparqlParser.RULE_quadData = 44;
SparqlParser.RULE_quads = 45;
SparqlParser.RULE_quadsDetails = 46;
SparqlParser.RULE_quadsNotTriples = 47;
SparqlParser.RULE_triplesTemplate = 48;
SparqlParser.RULE_groupGraphPattern = 49;
SparqlParser.RULE_groupGraphPatternSub = 50;
SparqlParser.RULE_groupGraphPatternSubList = 51;
SparqlParser.RULE_triplesBlock = 52;
SparqlParser.RULE_graphPatternNotTriples = 53;
SparqlParser.RULE_optionalGraphPattern = 54;
SparqlParser.RULE_graphGraphPattern = 55;
SparqlParser.RULE_serviceGraphPattern = 56;
SparqlParser.RULE_bind = 57;
SparqlParser.RULE_inlineData = 58;
SparqlParser.RULE_dataBlock = 59;
SparqlParser.RULE_inlineDataOneVar = 60;
SparqlParser.RULE_inlineDataFull = 61;
SparqlParser.RULE_dataBlockValues = 62;
SparqlParser.RULE_dataBlockValue = 63;
SparqlParser.RULE_minusGraphPattern = 64;
SparqlParser.RULE_groupOrUnionGraphPattern = 65;
SparqlParser.RULE_filter = 66;
SparqlParser.RULE_constraint = 67;
SparqlParser.RULE_functionCall = 68;
SparqlParser.RULE_argList = 69;
SparqlParser.RULE_expressionList = 70;
SparqlParser.RULE_constructTemplate = 71;
SparqlParser.RULE_constructTriples = 72;
SparqlParser.RULE_triplesSameSubject = 73;
SparqlParser.RULE_propertyList = 74;
SparqlParser.RULE_propertyListNotEmpty = 75;
SparqlParser.RULE_verb = 76;
SparqlParser.RULE_objectList = 77;
SparqlParser.RULE_object = 78;
SparqlParser.RULE_triplesSameSubjectPath = 79;
SparqlParser.RULE_propertyListPath = 80;
SparqlParser.RULE_propertyListPathNotEmpty = 81;
SparqlParser.RULE_propertyListPathNotEmptyList = 82;
SparqlParser.RULE_verbPath = 83;
SparqlParser.RULE_verbSimple = 84;
SparqlParser.RULE_objectListPath = 85;
SparqlParser.RULE_objectPath = 86;
SparqlParser.RULE_path = 87;
SparqlParser.RULE_pathAlternative = 88;
SparqlParser.RULE_pathSequence = 89;
SparqlParser.RULE_pathElt = 90;
SparqlParser.RULE_pathEltOrInverse = 91;
SparqlParser.RULE_pathMod = 92;
SparqlParser.RULE_pathPrimary = 93;
SparqlParser.RULE_pathNegatedPropertySet = 94;
SparqlParser.RULE_pathOneInPropertySet = 95;
SparqlParser.RULE_integer = 96;
SparqlParser.RULE_triplesNode = 97;
SparqlParser.RULE_blankNodePropertyList = 98;
SparqlParser.RULE_triplesNodePath = 99;
SparqlParser.RULE_blankNodePropertyListPath = 100;
SparqlParser.RULE_collection = 101;
SparqlParser.RULE_collectionPath = 102;
SparqlParser.RULE_graphNode = 103;
SparqlParser.RULE_graphNodePath = 104;
SparqlParser.RULE_varOrTerm = 105;
SparqlParser.RULE_varOrIRI = 106;
SparqlParser.RULE_var = 107;
SparqlParser.RULE_graphTerm = 108;
SparqlParser.RULE_nil = 109;
SparqlParser.RULE_expression = 110;
SparqlParser.RULE_unaryLiteralExpression = 111;
SparqlParser.RULE_unaryExpression = 112;
SparqlParser.RULE_primaryExpression = 113;
SparqlParser.RULE_builtInCall = 114;
SparqlParser.RULE_regexExpression = 115;
SparqlParser.RULE_subStringExpression = 116;
SparqlParser.RULE_strReplaceExpression = 117;
SparqlParser.RULE_existsFunction = 118;
SparqlParser.RULE_notExistsFunction = 119;
SparqlParser.RULE_aggregate = 120;
SparqlParser.RULE_iriRefOrFunction = 121;
SparqlParser.RULE_rdfLiteral = 122;
SparqlParser.RULE_numericLiteral = 123;
SparqlParser.RULE_numericLiteralUnsigned = 124;
SparqlParser.RULE_numericLiteralPositive = 125;
SparqlParser.RULE_numericLiteralNegative = 126;
SparqlParser.RULE_booleanLiteral = 127;
SparqlParser.RULE_string = 128;
SparqlParser.RULE_iri = 129;
SparqlParser.RULE_prefixedName = 130;
SparqlParser.RULE_blankNode = 131;
SparqlParser.RULE_anon = 132;

function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_query;
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.prologue = function() {
    return this.getTypedRuleContext(PrologueContext,0);
};

QueryContext.prototype.valuesClause = function() {
    return this.getTypedRuleContext(ValuesClauseContext,0);
};

QueryContext.prototype.EOF = function() {
    return this.getToken(SparqlParser.EOF, 0);
};

QueryContext.prototype.selectQuery = function() {
    return this.getTypedRuleContext(SelectQueryContext,0);
};

QueryContext.prototype.constructQuery = function() {
    return this.getTypedRuleContext(ConstructQueryContext,0);
};

QueryContext.prototype.describeQuery = function() {
    return this.getTypedRuleContext(DescribeQueryContext,0);
};

QueryContext.prototype.askQuery = function() {
    return this.getTypedRuleContext(AskQueryContext,0);
};

QueryContext.prototype.updateCommand = function() {
    return this.getTypedRuleContext(UpdateCommandContext,0);
};

QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitQuery(this);
	}
};




SparqlParser.QueryContext = QueryContext;

SparqlParser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SparqlParser.RULE_query);
    try {
        this.state = 280;
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 266;
            this.prologue();
            this.state = 271;
            switch (this._input.LA(1)) {
            case SparqlParser.SELECT:
            	this.state = 267;
            	this.selectQuery();
            	break;
            case SparqlParser.CONSTRUCT:
            	this.state = 268;
            	this.constructQuery();
            	break;
            case SparqlParser.DESCRIBE:
            	this.state = 269;
            	this.describeQuery();
            	break;
            case SparqlParser.ASK:
            	this.state = 270;
            	this.askQuery();
            	break;
            case SparqlParser.EOF:
            case SparqlParser.VALUES:
            	break;
            default:
            	throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 273;
            this.valuesClause();
            this.state = 274;
            this.match(SparqlParser.EOF);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 277;
            var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
            if(la_===1) {
                this.state = 276;
                this.updateCommand();

            }
            this.state = 279;
            this.match(SparqlParser.EOF);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrologueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_prologue;
    return this;
}

PrologueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrologueContext.prototype.constructor = PrologueContext;

PrologueContext.prototype.baseDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(BaseDeclContext);
    } else {
        return this.getTypedRuleContext(BaseDeclContext,i);
    }
};

PrologueContext.prototype.prefixDecl = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrefixDeclContext);
    } else {
        return this.getTypedRuleContext(PrefixDeclContext,i);
    }
};

PrologueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPrologue(this);
	}
};

PrologueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPrologue(this);
	}
};




SparqlParser.PrologueContext = PrologueContext;

SparqlParser.prototype.prologue = function() {

    var localctx = new PrologueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SparqlParser.RULE_prologue);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 286;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.BASE || _la===SparqlParser.PREFIX) {
            this.state = 284;
            switch(this._input.LA(1)) {
            case SparqlParser.BASE:
                this.state = 282;
                this.baseDecl();
                break;
            case SparqlParser.PREFIX:
                this.state = 283;
                this.prefixDecl();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 288;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_baseDecl;
    return this;
}

BaseDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseDeclContext.prototype.constructor = BaseDeclContext;

BaseDeclContext.prototype.BASE = function() {
    return this.getToken(SparqlParser.BASE, 0);
};

BaseDeclContext.prototype.IRIREF = function() {
    return this.getToken(SparqlParser.IRIREF, 0);
};

BaseDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterBaseDecl(this);
	}
};

BaseDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitBaseDecl(this);
	}
};




SparqlParser.BaseDeclContext = BaseDeclContext;

SparqlParser.prototype.baseDecl = function() {

    var localctx = new BaseDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SparqlParser.RULE_baseDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 289;
        this.match(SparqlParser.BASE);
        this.state = 290;
        this.match(SparqlParser.IRIREF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrefixDeclContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_prefixDecl;
    return this;
}

PrefixDeclContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixDeclContext.prototype.constructor = PrefixDeclContext;

PrefixDeclContext.prototype.PREFIX = function() {
    return this.getToken(SparqlParser.PREFIX, 0);
};

PrefixDeclContext.prototype.PNAME_NS = function() {
    return this.getToken(SparqlParser.PNAME_NS, 0);
};

PrefixDeclContext.prototype.IRIREF = function() {
    return this.getToken(SparqlParser.IRIREF, 0);
};

PrefixDeclContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPrefixDecl(this);
	}
};

PrefixDeclContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPrefixDecl(this);
	}
};




SparqlParser.PrefixDeclContext = PrefixDeclContext;

SparqlParser.prototype.prefixDecl = function() {

    var localctx = new PrefixDeclContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SparqlParser.RULE_prefixDecl);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 292;
        this.match(SparqlParser.PREFIX);
        this.state = 293;
        this.match(SparqlParser.PNAME_NS);
        this.state = 294;
        this.match(SparqlParser.IRIREF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_selectQuery;
    return this;
}

SelectQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectQueryContext.prototype.constructor = SelectQueryContext;

SelectQueryContext.prototype.selectClause = function() {
    return this.getTypedRuleContext(SelectClauseContext,0);
};

SelectQueryContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

SelectQueryContext.prototype.solutionModifier = function() {
    return this.getTypedRuleContext(SolutionModifierContext,0);
};

SelectQueryContext.prototype.datasetClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DatasetClauseContext);
    } else {
        return this.getTypedRuleContext(DatasetClauseContext,i);
    }
};

SelectQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterSelectQuery(this);
	}
};

SelectQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitSelectQuery(this);
	}
};




SparqlParser.SelectQueryContext = SelectQueryContext;

SparqlParser.prototype.selectQuery = function() {

    var localctx = new SelectQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SparqlParser.RULE_selectQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 296;
        this.selectClause();
        this.state = 300;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.FROM) {
            this.state = 297;
            this.datasetClause();
            this.state = 302;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 303;
        this.whereClause();
        this.state = 304;
        this.solutionModifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubSelectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_subSelect;
    return this;
}

SubSelectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubSelectContext.prototype.constructor = SubSelectContext;

SubSelectContext.prototype.selectClause = function() {
    return this.getTypedRuleContext(SelectClauseContext,0);
};

SubSelectContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

SubSelectContext.prototype.solutionModifier = function() {
    return this.getTypedRuleContext(SolutionModifierContext,0);
};

SubSelectContext.prototype.valuesClause = function() {
    return this.getTypedRuleContext(ValuesClauseContext,0);
};

SubSelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterSubSelect(this);
	}
};

SubSelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitSubSelect(this);
	}
};




SparqlParser.SubSelectContext = SubSelectContext;

SparqlParser.prototype.subSelect = function() {

    var localctx = new SubSelectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SparqlParser.RULE_subSelect);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 306;
        this.selectClause();
        this.state = 307;
        this.whereClause();
        this.state = 308;
        this.solutionModifier();
        this.state = 309;
        this.valuesClause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_selectClause;
    return this;
}

SelectClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectClauseContext.prototype.constructor = SelectClauseContext;

SelectClauseContext.prototype.SELECT = function() {
    return this.getToken(SparqlParser.SELECT, 0);
};

SelectClauseContext.prototype.DISTINCT = function() {
    return this.getToken(SparqlParser.DISTINCT, 0);
};

SelectClauseContext.prototype.REDUCED = function() {
    return this.getToken(SparqlParser.REDUCED, 0);
};

SelectClauseContext.prototype.selectVariables = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectVariablesContext);
    } else {
        return this.getTypedRuleContext(SelectVariablesContext,i);
    }
};

SelectClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterSelectClause(this);
	}
};

SelectClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitSelectClause(this);
	}
};




SparqlParser.SelectClauseContext = SelectClauseContext;

SparqlParser.prototype.selectClause = function() {

    var localctx = new SelectClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SparqlParser.RULE_selectClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 311;
        this.match(SparqlParser.SELECT);
        this.state = 313;
        _la = this._input.LA(1);
        if(_la===SparqlParser.DISTINCT || _la===SparqlParser.REDUCED) {
            this.state = 312;
            _la = this._input.LA(1);
            if(!(_la===SparqlParser.DISTINCT || _la===SparqlParser.REDUCED)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
        }

        this.state = 321;
        switch(this._input.LA(1)) {
        case SparqlParser.VAR1:
        case SparqlParser.VAR2:
        case SparqlParser.OPEN_BRACE:
            this.state = 316; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 315;
                this.selectVariables();
                this.state = 318; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (SparqlParser.VAR1 - 119)) | (1 << (SparqlParser.VAR2 - 119)) | (1 << (SparqlParser.OPEN_BRACE - 119)))) !== 0));
            break;
        case SparqlParser.ASTERISK:
            this.state = 320;
            this.match(SparqlParser.ASTERISK);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SelectVariablesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_selectVariables;
    return this;
}

SelectVariablesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectVariablesContext.prototype.constructor = SelectVariablesContext;

SelectVariablesContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

SelectVariablesContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

SelectVariablesContext.prototype.AS = function() {
    return this.getToken(SparqlParser.AS, 0);
};

SelectVariablesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterSelectVariables(this);
	}
};

SelectVariablesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitSelectVariables(this);
	}
};




SparqlParser.SelectVariablesContext = SelectVariablesContext;

SparqlParser.prototype.selectVariables = function() {

    var localctx = new SelectVariablesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SparqlParser.RULE_selectVariables);
    try {
        this.state = 330;
        switch(this._input.LA(1)) {
        case SparqlParser.VAR1:
        case SparqlParser.VAR2:
            this.enterOuterAlt(localctx, 1);
            this.state = 323;
            this.var();
            break;
        case SparqlParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 324;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 325;
            this.expression(0);
            this.state = 326;
            this.match(SparqlParser.AS);
            this.state = 327;
            this.var();
            this.state = 328;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_constructQuery;
    return this;
}

ConstructQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructQueryContext.prototype.constructor = ConstructQueryContext;

ConstructQueryContext.prototype.CONSTRUCT = function() {
    return this.getToken(SparqlParser.CONSTRUCT, 0);
};

ConstructQueryContext.prototype.constructTemplate = function() {
    return this.getTypedRuleContext(ConstructTemplateContext,0);
};

ConstructQueryContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

ConstructQueryContext.prototype.solutionModifier = function() {
    return this.getTypedRuleContext(SolutionModifierContext,0);
};

ConstructQueryContext.prototype.WHERE = function() {
    return this.getToken(SparqlParser.WHERE, 0);
};

ConstructQueryContext.prototype.datasetClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DatasetClauseContext);
    } else {
        return this.getTypedRuleContext(DatasetClauseContext,i);
    }
};

ConstructQueryContext.prototype.triplesTemplate = function() {
    return this.getTypedRuleContext(TriplesTemplateContext,0);
};

ConstructQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterConstructQuery(this);
	}
};

ConstructQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitConstructQuery(this);
	}
};




SparqlParser.ConstructQueryContext = ConstructQueryContext;

SparqlParser.prototype.constructQuery = function() {

    var localctx = new ConstructQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SparqlParser.RULE_constructQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 332;
        this.match(SparqlParser.CONSTRUCT);
        this.state = 356;
        switch(this._input.LA(1)) {
        case SparqlParser.OPEN_CURLY_BRACE:
            this.state = 333;
            this.constructTemplate();
            this.state = 337;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SparqlParser.FROM) {
                this.state = 334;
                this.datasetClause();
                this.state = 339;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 340;
            this.whereClause();
            this.state = 341;
            this.solutionModifier();
            break;
        case SparqlParser.FROM:
        case SparqlParser.WHERE:
            this.state = 346;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SparqlParser.FROM) {
                this.state = 343;
                this.datasetClause();
                this.state = 348;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 349;
            this.match(SparqlParser.WHERE);
            this.state = 350;
            this.match(SparqlParser.OPEN_CURLY_BRACE);
            this.state = 352;
            _la = this._input.LA(1);
            if(_la===SparqlParser.TRUE || _la===SparqlParser.FALSE || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.BLANK_NODE_LABEL - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)) | (1 << (SparqlParser.INTEGER - 115)) | (1 << (SparqlParser.DECIMAL - 115)) | (1 << (SparqlParser.DOUBLE - 115)) | (1 << (SparqlParser.INTEGER_POSITIVE - 115)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 115)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 115)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 115)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 115)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 115)) | (1 << (SparqlParser.STRING_LITERAL1 - 115)) | (1 << (SparqlParser.STRING_LITERAL2 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 115)) | (1 << (SparqlParser.OPEN_BRACE - 115)))) !== 0) || _la===SparqlParser.OPEN_SQUARE_BRACKET) {
                this.state = 351;
                this.triplesTemplate();
            }

            this.state = 354;
            this.match(SparqlParser.CLOSE_CURLY_BRACE);
            this.state = 355;
            this.solutionModifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DescribeQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_describeQuery;
    return this;
}

DescribeQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescribeQueryContext.prototype.constructor = DescribeQueryContext;

DescribeQueryContext.prototype.DESCRIBE = function() {
    return this.getToken(SparqlParser.DESCRIBE, 0);
};

DescribeQueryContext.prototype.solutionModifier = function() {
    return this.getTypedRuleContext(SolutionModifierContext,0);
};

DescribeQueryContext.prototype.datasetClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DatasetClauseContext);
    } else {
        return this.getTypedRuleContext(DatasetClauseContext,i);
    }
};

DescribeQueryContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

DescribeQueryContext.prototype.varOrIRI = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarOrIRIContext);
    } else {
        return this.getTypedRuleContext(VarOrIRIContext,i);
    }
};

DescribeQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterDescribeQuery(this);
	}
};

DescribeQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitDescribeQuery(this);
	}
};




SparqlParser.DescribeQueryContext = DescribeQueryContext;

SparqlParser.prototype.describeQuery = function() {

    var localctx = new DescribeQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SparqlParser.RULE_describeQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 358;
        this.match(SparqlParser.DESCRIBE);
        this.state = 365;
        switch(this._input.LA(1)) {
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
        case SparqlParser.VAR1:
        case SparqlParser.VAR2:
            this.state = 360; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 359;
                this.varOrIRI();
                this.state = 362; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)))) !== 0));
            break;
        case SparqlParser.ASTERISK:
            this.state = 364;
            this.match(SparqlParser.ASTERISK);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 370;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.FROM) {
            this.state = 367;
            this.datasetClause();
            this.state = 372;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 374;
        _la = this._input.LA(1);
        if(_la===SparqlParser.WHERE || _la===SparqlParser.OPEN_CURLY_BRACE) {
            this.state = 373;
            this.whereClause();
        }

        this.state = 376;
        this.solutionModifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AskQueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_askQuery;
    return this;
}

AskQueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AskQueryContext.prototype.constructor = AskQueryContext;

AskQueryContext.prototype.ASK = function() {
    return this.getToken(SparqlParser.ASK, 0);
};

AskQueryContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

AskQueryContext.prototype.solutionModifier = function() {
    return this.getTypedRuleContext(SolutionModifierContext,0);
};

AskQueryContext.prototype.datasetClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DatasetClauseContext);
    } else {
        return this.getTypedRuleContext(DatasetClauseContext,i);
    }
};

AskQueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterAskQuery(this);
	}
};

AskQueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitAskQuery(this);
	}
};




SparqlParser.AskQueryContext = AskQueryContext;

SparqlParser.prototype.askQuery = function() {

    var localctx = new AskQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SparqlParser.RULE_askQuery);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 378;
        this.match(SparqlParser.ASK);
        this.state = 382;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.FROM) {
            this.state = 379;
            this.datasetClause();
            this.state = 384;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 385;
        this.whereClause();
        this.state = 386;
        this.solutionModifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DatasetClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_datasetClause;
    return this;
}

DatasetClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatasetClauseContext.prototype.constructor = DatasetClauseContext;

DatasetClauseContext.prototype.FROM = function() {
    return this.getToken(SparqlParser.FROM, 0);
};

DatasetClauseContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

DatasetClauseContext.prototype.NAMED = function() {
    return this.getToken(SparqlParser.NAMED, 0);
};

DatasetClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterDatasetClause(this);
	}
};

DatasetClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitDatasetClause(this);
	}
};




SparqlParser.DatasetClauseContext = DatasetClauseContext;

SparqlParser.prototype.datasetClause = function() {

    var localctx = new DatasetClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SparqlParser.RULE_datasetClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 388;
        this.match(SparqlParser.FROM);
        this.state = 390;
        _la = this._input.LA(1);
        if(_la===SparqlParser.NAMED) {
            this.state = 389;
            this.match(SparqlParser.NAMED);
        }

        this.state = 392;
        this.iri();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhereClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_whereClause;
    return this;
}

WhereClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereClauseContext.prototype.constructor = WhereClauseContext;

WhereClauseContext.prototype.groupGraphPattern = function() {
    return this.getTypedRuleContext(GroupGraphPatternContext,0);
};

WhereClauseContext.prototype.WHERE = function() {
    return this.getToken(SparqlParser.WHERE, 0);
};

WhereClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterWhereClause(this);
	}
};

WhereClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitWhereClause(this);
	}
};




SparqlParser.WhereClauseContext = WhereClauseContext;

SparqlParser.prototype.whereClause = function() {

    var localctx = new WhereClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SparqlParser.RULE_whereClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 395;
        _la = this._input.LA(1);
        if(_la===SparqlParser.WHERE) {
            this.state = 394;
            this.match(SparqlParser.WHERE);
        }

        this.state = 397;
        this.groupGraphPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SolutionModifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_solutionModifier;
    return this;
}

SolutionModifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SolutionModifierContext.prototype.constructor = SolutionModifierContext;

SolutionModifierContext.prototype.groupClause = function() {
    return this.getTypedRuleContext(GroupClauseContext,0);
};

SolutionModifierContext.prototype.havingClause = function() {
    return this.getTypedRuleContext(HavingClauseContext,0);
};

SolutionModifierContext.prototype.orderClause = function() {
    return this.getTypedRuleContext(OrderClauseContext,0);
};

SolutionModifierContext.prototype.limitOffsetClauses = function() {
    return this.getTypedRuleContext(LimitOffsetClausesContext,0);
};

SolutionModifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterSolutionModifier(this);
	}
};

SolutionModifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitSolutionModifier(this);
	}
};




SparqlParser.SolutionModifierContext = SolutionModifierContext;

SparqlParser.prototype.solutionModifier = function() {

    var localctx = new SolutionModifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SparqlParser.RULE_solutionModifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 400;
        _la = this._input.LA(1);
        if(_la===SparqlParser.GROUP) {
            this.state = 399;
            this.groupClause();
        }

        this.state = 403;
        _la = this._input.LA(1);
        if(_la===SparqlParser.HAVING) {
            this.state = 402;
            this.havingClause();
        }

        this.state = 406;
        _la = this._input.LA(1);
        if(_la===SparqlParser.ORDER) {
            this.state = 405;
            this.orderClause();
        }

        this.state = 409;
        _la = this._input.LA(1);
        if(_la===SparqlParser.LIMIT || _la===SparqlParser.OFFSET) {
            this.state = 408;
            this.limitOffsetClauses();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_groupClause;
    return this;
}

GroupClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupClauseContext.prototype.constructor = GroupClauseContext;

GroupClauseContext.prototype.GROUP = function() {
    return this.getToken(SparqlParser.GROUP, 0);
};

GroupClauseContext.prototype.BY = function() {
    return this.getToken(SparqlParser.BY, 0);
};

GroupClauseContext.prototype.groupCondition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupConditionContext);
    } else {
        return this.getTypedRuleContext(GroupConditionContext,i);
    }
};

GroupClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterGroupClause(this);
	}
};

GroupClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitGroupClause(this);
	}
};




SparqlParser.GroupClauseContext = GroupClauseContext;

SparqlParser.prototype.groupClause = function() {

    var localctx = new GroupClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SparqlParser.RULE_groupClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 411;
        this.match(SparqlParser.GROUP);
        this.state = 412;
        this.match(SparqlParser.BY);
        this.state = 414; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 413;
            this.groupCondition();
            this.state = 416; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (SparqlParser.STR - 25)) | (1 << (SparqlParser.LANG - 25)) | (1 << (SparqlParser.LANGMATCHES - 25)) | (1 << (SparqlParser.DATATYPE - 25)) | (1 << (SparqlParser.BOUND - 25)) | (1 << (SparqlParser.SAMETERM - 25)) | (1 << (SparqlParser.ISIRI - 25)) | (1 << (SparqlParser.ISURI - 25)) | (1 << (SparqlParser.ISBLANK - 25)) | (1 << (SparqlParser.ISLITERAL - 25)) | (1 << (SparqlParser.REGEX - 25)) | (1 << (SparqlParser.SUBSTR - 25)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SparqlParser.IRI - 64)) | (1 << (SparqlParser.URI - 64)) | (1 << (SparqlParser.BNODE - 64)) | (1 << (SparqlParser.RAND - 64)) | (1 << (SparqlParser.ABS - 64)) | (1 << (SparqlParser.CEIL - 64)) | (1 << (SparqlParser.FLOOR - 64)) | (1 << (SparqlParser.ROUND - 64)) | (1 << (SparqlParser.CONCAT - 64)) | (1 << (SparqlParser.STRLEN - 64)) | (1 << (SparqlParser.UCASE - 64)) | (1 << (SparqlParser.LCASE - 64)) | (1 << (SparqlParser.ENCODE_FOR_URI - 64)) | (1 << (SparqlParser.CONTAINS - 64)) | (1 << (SparqlParser.STRSTARTS - 64)) | (1 << (SparqlParser.STRENDS - 64)) | (1 << (SparqlParser.STRBEFORE - 64)) | (1 << (SparqlParser.STRAFTER - 64)) | (1 << (SparqlParser.REPLACE - 64)) | (1 << (SparqlParser.YEAR - 64)) | (1 << (SparqlParser.MONTH - 64)) | (1 << (SparqlParser.DAY - 64)) | (1 << (SparqlParser.HOURS - 64)) | (1 << (SparqlParser.MINUTES - 64)) | (1 << (SparqlParser.SECONDS - 64)) | (1 << (SparqlParser.TIMEZONE - 64)) | (1 << (SparqlParser.TZ - 64)) | (1 << (SparqlParser.NOW - 64)) | (1 << (SparqlParser.UUID - 64)) | (1 << (SparqlParser.STRUUID - 64)) | (1 << (SparqlParser.MD5 - 64)) | (1 << (SparqlParser.SHA1 - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SparqlParser.SHA256 - 96)) | (1 << (SparqlParser.SHA384 - 96)) | (1 << (SparqlParser.SHA512 - 96)) | (1 << (SparqlParser.COALESCE - 96)) | (1 << (SparqlParser.IF - 96)) | (1 << (SparqlParser.STRLANG - 96)) | (1 << (SparqlParser.STRDT - 96)) | (1 << (SparqlParser.ISNUMERIC - 96)) | (1 << (SparqlParser.COUNT - 96)) | (1 << (SparqlParser.SUM - 96)) | (1 << (SparqlParser.MIN - 96)) | (1 << (SparqlParser.MAX - 96)) | (1 << (SparqlParser.AVG - 96)) | (1 << (SparqlParser.SAMPLE - 96)) | (1 << (SparqlParser.GROUP_CONCAT - 96)) | (1 << (SparqlParser.NOT - 96)) | (1 << (SparqlParser.EXISTS - 96)) | (1 << (SparqlParser.IRIREF - 96)) | (1 << (SparqlParser.PNAME_NS - 96)) | (1 << (SparqlParser.PNAME_LN - 96)) | (1 << (SparqlParser.VAR1 - 96)) | (1 << (SparqlParser.VAR2 - 96)))) !== 0) || _la===SparqlParser.OPEN_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_groupCondition;
    return this;
}

GroupConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupConditionContext.prototype.constructor = GroupConditionContext;

GroupConditionContext.prototype.builtInCall = function() {
    return this.getTypedRuleContext(BuiltInCallContext,0);
};

GroupConditionContext.prototype.functionCall = function() {
    return this.getTypedRuleContext(FunctionCallContext,0);
};

GroupConditionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

GroupConditionContext.prototype.AS = function() {
    return this.getToken(SparqlParser.AS, 0);
};

GroupConditionContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

GroupConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterGroupCondition(this);
	}
};

GroupConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitGroupCondition(this);
	}
};




SparqlParser.GroupConditionContext = GroupConditionContext;

SparqlParser.prototype.groupCondition = function() {

    var localctx = new GroupConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SparqlParser.RULE_groupCondition);
    var _la = 0; // Token type
    try {
        this.state = 429;
        switch(this._input.LA(1)) {
        case SparqlParser.STR:
        case SparqlParser.LANG:
        case SparqlParser.LANGMATCHES:
        case SparqlParser.DATATYPE:
        case SparqlParser.BOUND:
        case SparqlParser.SAMETERM:
        case SparqlParser.ISIRI:
        case SparqlParser.ISURI:
        case SparqlParser.ISBLANK:
        case SparqlParser.ISLITERAL:
        case SparqlParser.REGEX:
        case SparqlParser.SUBSTR:
        case SparqlParser.IRI:
        case SparqlParser.URI:
        case SparqlParser.BNODE:
        case SparqlParser.RAND:
        case SparqlParser.ABS:
        case SparqlParser.CEIL:
        case SparqlParser.FLOOR:
        case SparqlParser.ROUND:
        case SparqlParser.CONCAT:
        case SparqlParser.STRLEN:
        case SparqlParser.UCASE:
        case SparqlParser.LCASE:
        case SparqlParser.ENCODE_FOR_URI:
        case SparqlParser.CONTAINS:
        case SparqlParser.STRSTARTS:
        case SparqlParser.STRENDS:
        case SparqlParser.STRBEFORE:
        case SparqlParser.STRAFTER:
        case SparqlParser.REPLACE:
        case SparqlParser.YEAR:
        case SparqlParser.MONTH:
        case SparqlParser.DAY:
        case SparqlParser.HOURS:
        case SparqlParser.MINUTES:
        case SparqlParser.SECONDS:
        case SparqlParser.TIMEZONE:
        case SparqlParser.TZ:
        case SparqlParser.NOW:
        case SparqlParser.UUID:
        case SparqlParser.STRUUID:
        case SparqlParser.MD5:
        case SparqlParser.SHA1:
        case SparqlParser.SHA256:
        case SparqlParser.SHA384:
        case SparqlParser.SHA512:
        case SparqlParser.COALESCE:
        case SparqlParser.IF:
        case SparqlParser.STRLANG:
        case SparqlParser.STRDT:
        case SparqlParser.ISNUMERIC:
        case SparqlParser.COUNT:
        case SparqlParser.SUM:
        case SparqlParser.MIN:
        case SparqlParser.MAX:
        case SparqlParser.AVG:
        case SparqlParser.SAMPLE:
        case SparqlParser.GROUP_CONCAT:
        case SparqlParser.NOT:
        case SparqlParser.EXISTS:
            this.enterOuterAlt(localctx, 1);
            this.state = 418;
            this.builtInCall();
            break;
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
            this.enterOuterAlt(localctx, 2);
            this.state = 419;
            this.functionCall();
            break;
        case SparqlParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 3);
            this.state = 420;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 421;
            this.expression(0);
            this.state = 424;
            _la = this._input.LA(1);
            if(_la===SparqlParser.AS) {
                this.state = 422;
                this.match(SparqlParser.AS);
                this.state = 423;
                this.var();
            }

            this.state = 426;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.VAR1:
        case SparqlParser.VAR2:
            this.enterOuterAlt(localctx, 4);
            this.state = 428;
            this.var();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HavingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_havingClause;
    return this;
}

HavingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HavingClauseContext.prototype.constructor = HavingClauseContext;

HavingClauseContext.prototype.HAVING = function() {
    return this.getToken(SparqlParser.HAVING, 0);
};

HavingClauseContext.prototype.havingCondition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(HavingConditionContext);
    } else {
        return this.getTypedRuleContext(HavingConditionContext,i);
    }
};

HavingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterHavingClause(this);
	}
};

HavingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitHavingClause(this);
	}
};




SparqlParser.HavingClauseContext = HavingClauseContext;

SparqlParser.prototype.havingClause = function() {

    var localctx = new HavingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SparqlParser.RULE_havingClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 431;
        this.match(SparqlParser.HAVING);
        this.state = 433; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 432;
            this.havingCondition();
            this.state = 435; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (SparqlParser.STR - 25)) | (1 << (SparqlParser.LANG - 25)) | (1 << (SparqlParser.LANGMATCHES - 25)) | (1 << (SparqlParser.DATATYPE - 25)) | (1 << (SparqlParser.BOUND - 25)) | (1 << (SparqlParser.SAMETERM - 25)) | (1 << (SparqlParser.ISIRI - 25)) | (1 << (SparqlParser.ISURI - 25)) | (1 << (SparqlParser.ISBLANK - 25)) | (1 << (SparqlParser.ISLITERAL - 25)) | (1 << (SparqlParser.REGEX - 25)) | (1 << (SparqlParser.SUBSTR - 25)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SparqlParser.IRI - 64)) | (1 << (SparqlParser.URI - 64)) | (1 << (SparqlParser.BNODE - 64)) | (1 << (SparqlParser.RAND - 64)) | (1 << (SparqlParser.ABS - 64)) | (1 << (SparqlParser.CEIL - 64)) | (1 << (SparqlParser.FLOOR - 64)) | (1 << (SparqlParser.ROUND - 64)) | (1 << (SparqlParser.CONCAT - 64)) | (1 << (SparqlParser.STRLEN - 64)) | (1 << (SparqlParser.UCASE - 64)) | (1 << (SparqlParser.LCASE - 64)) | (1 << (SparqlParser.ENCODE_FOR_URI - 64)) | (1 << (SparqlParser.CONTAINS - 64)) | (1 << (SparqlParser.STRSTARTS - 64)) | (1 << (SparqlParser.STRENDS - 64)) | (1 << (SparqlParser.STRBEFORE - 64)) | (1 << (SparqlParser.STRAFTER - 64)) | (1 << (SparqlParser.REPLACE - 64)) | (1 << (SparqlParser.YEAR - 64)) | (1 << (SparqlParser.MONTH - 64)) | (1 << (SparqlParser.DAY - 64)) | (1 << (SparqlParser.HOURS - 64)) | (1 << (SparqlParser.MINUTES - 64)) | (1 << (SparqlParser.SECONDS - 64)) | (1 << (SparqlParser.TIMEZONE - 64)) | (1 << (SparqlParser.TZ - 64)) | (1 << (SparqlParser.NOW - 64)) | (1 << (SparqlParser.UUID - 64)) | (1 << (SparqlParser.STRUUID - 64)) | (1 << (SparqlParser.MD5 - 64)) | (1 << (SparqlParser.SHA1 - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SparqlParser.SHA256 - 96)) | (1 << (SparqlParser.SHA384 - 96)) | (1 << (SparqlParser.SHA512 - 96)) | (1 << (SparqlParser.COALESCE - 96)) | (1 << (SparqlParser.IF - 96)) | (1 << (SparqlParser.STRLANG - 96)) | (1 << (SparqlParser.STRDT - 96)) | (1 << (SparqlParser.ISNUMERIC - 96)) | (1 << (SparqlParser.COUNT - 96)) | (1 << (SparqlParser.SUM - 96)) | (1 << (SparqlParser.MIN - 96)) | (1 << (SparqlParser.MAX - 96)) | (1 << (SparqlParser.AVG - 96)) | (1 << (SparqlParser.SAMPLE - 96)) | (1 << (SparqlParser.GROUP_CONCAT - 96)) | (1 << (SparqlParser.NOT - 96)) | (1 << (SparqlParser.EXISTS - 96)) | (1 << (SparqlParser.IRIREF - 96)) | (1 << (SparqlParser.PNAME_NS - 96)) | (1 << (SparqlParser.PNAME_LN - 96)))) !== 0) || _la===SparqlParser.OPEN_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function HavingConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_havingCondition;
    return this;
}

HavingConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HavingConditionContext.prototype.constructor = HavingConditionContext;

HavingConditionContext.prototype.constraint = function() {
    return this.getTypedRuleContext(ConstraintContext,0);
};

HavingConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterHavingCondition(this);
	}
};

HavingConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitHavingCondition(this);
	}
};




SparqlParser.HavingConditionContext = HavingConditionContext;

SparqlParser.prototype.havingCondition = function() {

    var localctx = new HavingConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SparqlParser.RULE_havingCondition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 437;
        this.constraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_orderClause;
    return this;
}

OrderClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderClauseContext.prototype.constructor = OrderClauseContext;

OrderClauseContext.prototype.ORDER = function() {
    return this.getToken(SparqlParser.ORDER, 0);
};

OrderClauseContext.prototype.BY = function() {
    return this.getToken(SparqlParser.BY, 0);
};

OrderClauseContext.prototype.orderCondition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderConditionContext);
    } else {
        return this.getTypedRuleContext(OrderConditionContext,i);
    }
};

OrderClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterOrderClause(this);
	}
};

OrderClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitOrderClause(this);
	}
};




SparqlParser.OrderClauseContext = OrderClauseContext;

SparqlParser.prototype.orderClause = function() {

    var localctx = new OrderClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SparqlParser.RULE_orderClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 439;
        this.match(SparqlParser.ORDER);
        this.state = 440;
        this.match(SparqlParser.BY);
        this.state = 442; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 441;
            this.orderCondition();
            this.state = 444; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 15)) & ~0x1f) == 0 && ((1 << (_la - 15)) & ((1 << (SparqlParser.ASC - 15)) | (1 << (SparqlParser.DESC - 15)) | (1 << (SparqlParser.STR - 15)) | (1 << (SparqlParser.LANG - 15)) | (1 << (SparqlParser.LANGMATCHES - 15)) | (1 << (SparqlParser.DATATYPE - 15)) | (1 << (SparqlParser.BOUND - 15)) | (1 << (SparqlParser.SAMETERM - 15)) | (1 << (SparqlParser.ISIRI - 15)) | (1 << (SparqlParser.ISURI - 15)) | (1 << (SparqlParser.ISBLANK - 15)) | (1 << (SparqlParser.ISLITERAL - 15)) | (1 << (SparqlParser.REGEX - 15)) | (1 << (SparqlParser.SUBSTR - 15)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SparqlParser.IRI - 64)) | (1 << (SparqlParser.URI - 64)) | (1 << (SparqlParser.BNODE - 64)) | (1 << (SparqlParser.RAND - 64)) | (1 << (SparqlParser.ABS - 64)) | (1 << (SparqlParser.CEIL - 64)) | (1 << (SparqlParser.FLOOR - 64)) | (1 << (SparqlParser.ROUND - 64)) | (1 << (SparqlParser.CONCAT - 64)) | (1 << (SparqlParser.STRLEN - 64)) | (1 << (SparqlParser.UCASE - 64)) | (1 << (SparqlParser.LCASE - 64)) | (1 << (SparqlParser.ENCODE_FOR_URI - 64)) | (1 << (SparqlParser.CONTAINS - 64)) | (1 << (SparqlParser.STRSTARTS - 64)) | (1 << (SparqlParser.STRENDS - 64)) | (1 << (SparqlParser.STRBEFORE - 64)) | (1 << (SparqlParser.STRAFTER - 64)) | (1 << (SparqlParser.REPLACE - 64)) | (1 << (SparqlParser.YEAR - 64)) | (1 << (SparqlParser.MONTH - 64)) | (1 << (SparqlParser.DAY - 64)) | (1 << (SparqlParser.HOURS - 64)) | (1 << (SparqlParser.MINUTES - 64)) | (1 << (SparqlParser.SECONDS - 64)) | (1 << (SparqlParser.TIMEZONE - 64)) | (1 << (SparqlParser.TZ - 64)) | (1 << (SparqlParser.NOW - 64)) | (1 << (SparqlParser.UUID - 64)) | (1 << (SparqlParser.STRUUID - 64)) | (1 << (SparqlParser.MD5 - 64)) | (1 << (SparqlParser.SHA1 - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SparqlParser.SHA256 - 96)) | (1 << (SparqlParser.SHA384 - 96)) | (1 << (SparqlParser.SHA512 - 96)) | (1 << (SparqlParser.COALESCE - 96)) | (1 << (SparqlParser.IF - 96)) | (1 << (SparqlParser.STRLANG - 96)) | (1 << (SparqlParser.STRDT - 96)) | (1 << (SparqlParser.ISNUMERIC - 96)) | (1 << (SparqlParser.COUNT - 96)) | (1 << (SparqlParser.SUM - 96)) | (1 << (SparqlParser.MIN - 96)) | (1 << (SparqlParser.MAX - 96)) | (1 << (SparqlParser.AVG - 96)) | (1 << (SparqlParser.SAMPLE - 96)) | (1 << (SparqlParser.GROUP_CONCAT - 96)) | (1 << (SparqlParser.NOT - 96)) | (1 << (SparqlParser.EXISTS - 96)) | (1 << (SparqlParser.IRIREF - 96)) | (1 << (SparqlParser.PNAME_NS - 96)) | (1 << (SparqlParser.PNAME_LN - 96)) | (1 << (SparqlParser.VAR1 - 96)) | (1 << (SparqlParser.VAR2 - 96)))) !== 0) || _la===SparqlParser.OPEN_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OrderConditionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_orderCondition;
    return this;
}

OrderConditionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderConditionContext.prototype.constructor = OrderConditionContext;

OrderConditionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

OrderConditionContext.prototype.ASC = function() {
    return this.getToken(SparqlParser.ASC, 0);
};

OrderConditionContext.prototype.DESC = function() {
    return this.getToken(SparqlParser.DESC, 0);
};

OrderConditionContext.prototype.constraint = function() {
    return this.getTypedRuleContext(ConstraintContext,0);
};

OrderConditionContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

OrderConditionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterOrderCondition(this);
	}
};

OrderConditionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitOrderCondition(this);
	}
};




SparqlParser.OrderConditionContext = OrderConditionContext;

SparqlParser.prototype.orderCondition = function() {

    var localctx = new OrderConditionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SparqlParser.RULE_orderCondition);
    var _la = 0; // Token type
    try {
        this.state = 453;
        switch(this._input.LA(1)) {
        case SparqlParser.ASC:
        case SparqlParser.DESC:
            this.enterOuterAlt(localctx, 1);
            this.state = 446;
            _la = this._input.LA(1);
            if(!(_la===SparqlParser.ASC || _la===SparqlParser.DESC)) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 447;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 448;
            this.expression(0);
            this.state = 449;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.STR:
        case SparqlParser.LANG:
        case SparqlParser.LANGMATCHES:
        case SparqlParser.DATATYPE:
        case SparqlParser.BOUND:
        case SparqlParser.SAMETERM:
        case SparqlParser.ISIRI:
        case SparqlParser.ISURI:
        case SparqlParser.ISBLANK:
        case SparqlParser.ISLITERAL:
        case SparqlParser.REGEX:
        case SparqlParser.SUBSTR:
        case SparqlParser.IRI:
        case SparqlParser.URI:
        case SparqlParser.BNODE:
        case SparqlParser.RAND:
        case SparqlParser.ABS:
        case SparqlParser.CEIL:
        case SparqlParser.FLOOR:
        case SparqlParser.ROUND:
        case SparqlParser.CONCAT:
        case SparqlParser.STRLEN:
        case SparqlParser.UCASE:
        case SparqlParser.LCASE:
        case SparqlParser.ENCODE_FOR_URI:
        case SparqlParser.CONTAINS:
        case SparqlParser.STRSTARTS:
        case SparqlParser.STRENDS:
        case SparqlParser.STRBEFORE:
        case SparqlParser.STRAFTER:
        case SparqlParser.REPLACE:
        case SparqlParser.YEAR:
        case SparqlParser.MONTH:
        case SparqlParser.DAY:
        case SparqlParser.HOURS:
        case SparqlParser.MINUTES:
        case SparqlParser.SECONDS:
        case SparqlParser.TIMEZONE:
        case SparqlParser.TZ:
        case SparqlParser.NOW:
        case SparqlParser.UUID:
        case SparqlParser.STRUUID:
        case SparqlParser.MD5:
        case SparqlParser.SHA1:
        case SparqlParser.SHA256:
        case SparqlParser.SHA384:
        case SparqlParser.SHA512:
        case SparqlParser.COALESCE:
        case SparqlParser.IF:
        case SparqlParser.STRLANG:
        case SparqlParser.STRDT:
        case SparqlParser.ISNUMERIC:
        case SparqlParser.COUNT:
        case SparqlParser.SUM:
        case SparqlParser.MIN:
        case SparqlParser.MAX:
        case SparqlParser.AVG:
        case SparqlParser.SAMPLE:
        case SparqlParser.GROUP_CONCAT:
        case SparqlParser.NOT:
        case SparqlParser.EXISTS:
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
        case SparqlParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 451;
            this.constraint();
            break;
        case SparqlParser.VAR1:
        case SparqlParser.VAR2:
            this.enterOuterAlt(localctx, 3);
            this.state = 452;
            this.var();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LimitOffsetClausesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_limitOffsetClauses;
    return this;
}

LimitOffsetClausesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitOffsetClausesContext.prototype.constructor = LimitOffsetClausesContext;

LimitOffsetClausesContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

LimitOffsetClausesContext.prototype.offsetClause = function() {
    return this.getTypedRuleContext(OffsetClauseContext,0);
};

LimitOffsetClausesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterLimitOffsetClauses(this);
	}
};

LimitOffsetClausesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitLimitOffsetClauses(this);
	}
};




SparqlParser.LimitOffsetClausesContext = LimitOffsetClausesContext;

SparqlParser.prototype.limitOffsetClauses = function() {

    var localctx = new LimitOffsetClausesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SparqlParser.RULE_limitOffsetClauses);
    var _la = 0; // Token type
    try {
        this.state = 463;
        switch(this._input.LA(1)) {
        case SparqlParser.LIMIT:
            this.enterOuterAlt(localctx, 1);
            this.state = 455;
            this.limitClause();
            this.state = 457;
            _la = this._input.LA(1);
            if(_la===SparqlParser.OFFSET) {
                this.state = 456;
                this.offsetClause();
            }

            break;
        case SparqlParser.OFFSET:
            this.enterOuterAlt(localctx, 2);
            this.state = 459;
            this.offsetClause();
            this.state = 461;
            _la = this._input.LA(1);
            if(_la===SparqlParser.LIMIT) {
                this.state = 460;
                this.limitClause();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LimitClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_limitClause;
    return this;
}

LimitClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitClauseContext.prototype.constructor = LimitClauseContext;

LimitClauseContext.prototype.LIMIT = function() {
    return this.getToken(SparqlParser.LIMIT, 0);
};

LimitClauseContext.prototype.INTEGER = function() {
    return this.getToken(SparqlParser.INTEGER, 0);
};

LimitClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterLimitClause(this);
	}
};

LimitClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitLimitClause(this);
	}
};




SparqlParser.LimitClauseContext = LimitClauseContext;

SparqlParser.prototype.limitClause = function() {

    var localctx = new LimitClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SparqlParser.RULE_limitClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 465;
        this.match(SparqlParser.LIMIT);
        this.state = 466;
        this.match(SparqlParser.INTEGER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OffsetClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_offsetClause;
    return this;
}

OffsetClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OffsetClauseContext.prototype.constructor = OffsetClauseContext;

OffsetClauseContext.prototype.OFFSET = function() {
    return this.getToken(SparqlParser.OFFSET, 0);
};

OffsetClauseContext.prototype.INTEGER = function() {
    return this.getToken(SparqlParser.INTEGER, 0);
};

OffsetClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterOffsetClause(this);
	}
};

OffsetClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitOffsetClause(this);
	}
};




SparqlParser.OffsetClauseContext = OffsetClauseContext;

SparqlParser.prototype.offsetClause = function() {

    var localctx = new OffsetClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SparqlParser.RULE_offsetClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 468;
        this.match(SparqlParser.OFFSET);
        this.state = 469;
        this.match(SparqlParser.INTEGER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ValuesClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_valuesClause;
    return this;
}

ValuesClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ValuesClauseContext.prototype.constructor = ValuesClauseContext;

ValuesClauseContext.prototype.VALUES = function() {
    return this.getToken(SparqlParser.VALUES, 0);
};

ValuesClauseContext.prototype.dataBlock = function() {
    return this.getTypedRuleContext(DataBlockContext,0);
};

ValuesClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterValuesClause(this);
	}
};

ValuesClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitValuesClause(this);
	}
};




SparqlParser.ValuesClauseContext = ValuesClauseContext;

SparqlParser.prototype.valuesClause = function() {

    var localctx = new ValuesClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SparqlParser.RULE_valuesClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 473;
        _la = this._input.LA(1);
        if(_la===SparqlParser.VALUES) {
            this.state = 471;
            this.match(SparqlParser.VALUES);
            this.state = 472;
            this.dataBlock();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UpdateCommandContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_updateCommand;
    return this;
}

UpdateCommandContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpdateCommandContext.prototype.constructor = UpdateCommandContext;

UpdateCommandContext.prototype.prologue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrologueContext);
    } else {
        return this.getTypedRuleContext(PrologueContext,i);
    }
};

UpdateCommandContext.prototype.update = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UpdateContext);
    } else {
        return this.getTypedRuleContext(UpdateContext,i);
    }
};

UpdateCommandContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterUpdateCommand(this);
	}
};

UpdateCommandContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitUpdateCommand(this);
	}
};




SparqlParser.UpdateCommandContext = UpdateCommandContext;

SparqlParser.prototype.updateCommand = function() {

    var localctx = new UpdateCommandContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SparqlParser.RULE_updateCommand);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 475;
        this.prologue();
        this.state = 490;
        _la = this._input.LA(1);
        if(((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (SparqlParser.LOAD - 39)) | (1 << (SparqlParser.CLEAR - 39)) | (1 << (SparqlParser.DROP - 39)) | (1 << (SparqlParser.ADD - 39)) | (1 << (SparqlParser.MOVE - 39)) | (1 << (SparqlParser.COPY - 39)) | (1 << (SparqlParser.CREATE - 39)) | (1 << (SparqlParser.DELETE - 39)) | (1 << (SparqlParser.INSERT - 39)) | (1 << (SparqlParser.WITH - 39)))) !== 0)) {
            this.state = 476;
            this.update();
            this.state = 483;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if(_alt===1) {
                    this.state = 477;
                    this.match(SparqlParser.SEMICOLON);
                    this.state = 478;
                    this.prologue();
                    this.state = 479;
                    this.update(); 
                }
                this.state = 485;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
            }

            this.state = 488;
            _la = this._input.LA(1);
            if(_la===SparqlParser.SEMICOLON) {
                this.state = 486;
                this.match(SparqlParser.SEMICOLON);
                this.state = 487;
                this.prologue();
            }

        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UpdateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_update;
    return this;
}

UpdateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UpdateContext.prototype.constructor = UpdateContext;

UpdateContext.prototype.load = function() {
    return this.getTypedRuleContext(LoadContext,0);
};

UpdateContext.prototype.clear = function() {
    return this.getTypedRuleContext(ClearContext,0);
};

UpdateContext.prototype.drop = function() {
    return this.getTypedRuleContext(DropContext,0);
};

UpdateContext.prototype.add = function() {
    return this.getTypedRuleContext(AddContext,0);
};

UpdateContext.prototype.move = function() {
    return this.getTypedRuleContext(MoveContext,0);
};

UpdateContext.prototype.copy = function() {
    return this.getTypedRuleContext(CopyContext,0);
};

UpdateContext.prototype.create = function() {
    return this.getTypedRuleContext(CreateContext,0);
};

UpdateContext.prototype.insertData = function() {
    return this.getTypedRuleContext(InsertDataContext,0);
};

UpdateContext.prototype.deleteData = function() {
    return this.getTypedRuleContext(DeleteDataContext,0);
};

UpdateContext.prototype.deleteWhere = function() {
    return this.getTypedRuleContext(DeleteWhereContext,0);
};

UpdateContext.prototype.modify = function() {
    return this.getTypedRuleContext(ModifyContext,0);
};

UpdateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterUpdate(this);
	}
};

UpdateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitUpdate(this);
	}
};




SparqlParser.UpdateContext = UpdateContext;

SparqlParser.prototype.update = function() {

    var localctx = new UpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SparqlParser.RULE_update);
    try {
        this.state = 503;
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 492;
            this.load();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 493;
            this.clear();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 494;
            this.drop();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 495;
            this.add();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 496;
            this.move();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 497;
            this.copy();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 498;
            this.create();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 499;
            this.insertData();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 500;
            this.deleteData();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 501;
            this.deleteWhere();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 502;
            this.modify();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LoadContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_load;
    return this;
}

LoadContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LoadContext.prototype.constructor = LoadContext;

LoadContext.prototype.LOAD = function() {
    return this.getToken(SparqlParser.LOAD, 0);
};

LoadContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

LoadContext.prototype.SILENT = function() {
    return this.getToken(SparqlParser.SILENT, 0);
};

LoadContext.prototype.INTO = function() {
    return this.getToken(SparqlParser.INTO, 0);
};

LoadContext.prototype.graphRef = function() {
    return this.getTypedRuleContext(GraphRefContext,0);
};

LoadContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterLoad(this);
	}
};

LoadContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitLoad(this);
	}
};




SparqlParser.LoadContext = LoadContext;

SparqlParser.prototype.load = function() {

    var localctx = new LoadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SparqlParser.RULE_load);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 505;
        this.match(SparqlParser.LOAD);
        this.state = 507;
        _la = this._input.LA(1);
        if(_la===SparqlParser.SILENT) {
            this.state = 506;
            this.match(SparqlParser.SILENT);
        }

        this.state = 509;
        this.iri();
        this.state = 512;
        _la = this._input.LA(1);
        if(_la===SparqlParser.INTO) {
            this.state = 510;
            this.match(SparqlParser.INTO);
            this.state = 511;
            this.graphRef();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ClearContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_clear;
    return this;
}

ClearContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClearContext.prototype.constructor = ClearContext;

ClearContext.prototype.CLEAR = function() {
    return this.getToken(SparqlParser.CLEAR, 0);
};

ClearContext.prototype.graphRefAll = function() {
    return this.getTypedRuleContext(GraphRefAllContext,0);
};

ClearContext.prototype.SILENT = function() {
    return this.getToken(SparqlParser.SILENT, 0);
};

ClearContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterClear(this);
	}
};

ClearContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitClear(this);
	}
};




SparqlParser.ClearContext = ClearContext;

SparqlParser.prototype.clear = function() {

    var localctx = new ClearContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SparqlParser.RULE_clear);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 514;
        this.match(SparqlParser.CLEAR);
        this.state = 516;
        _la = this._input.LA(1);
        if(_la===SparqlParser.SILENT) {
            this.state = 515;
            this.match(SparqlParser.SILENT);
        }

        this.state = 518;
        this.graphRefAll();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DropContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_drop;
    return this;
}

DropContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropContext.prototype.constructor = DropContext;

DropContext.prototype.DROP = function() {
    return this.getToken(SparqlParser.DROP, 0);
};

DropContext.prototype.graphRefAll = function() {
    return this.getTypedRuleContext(GraphRefAllContext,0);
};

DropContext.prototype.SILENT = function() {
    return this.getToken(SparqlParser.SILENT, 0);
};

DropContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterDrop(this);
	}
};

DropContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitDrop(this);
	}
};




SparqlParser.DropContext = DropContext;

SparqlParser.prototype.drop = function() {

    var localctx = new DropContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SparqlParser.RULE_drop);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 520;
        this.match(SparqlParser.DROP);
        this.state = 522;
        _la = this._input.LA(1);
        if(_la===SparqlParser.SILENT) {
            this.state = 521;
            this.match(SparqlParser.SILENT);
        }

        this.state = 524;
        this.graphRefAll();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CreateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_create;
    return this;
}

CreateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateContext.prototype.constructor = CreateContext;

CreateContext.prototype.CREATE = function() {
    return this.getToken(SparqlParser.CREATE, 0);
};

CreateContext.prototype.graphRef = function() {
    return this.getTypedRuleContext(GraphRefContext,0);
};

CreateContext.prototype.SILENT = function() {
    return this.getToken(SparqlParser.SILENT, 0);
};

CreateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterCreate(this);
	}
};

CreateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitCreate(this);
	}
};




SparqlParser.CreateContext = CreateContext;

SparqlParser.prototype.create = function() {

    var localctx = new CreateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SparqlParser.RULE_create);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 526;
        this.match(SparqlParser.CREATE);
        this.state = 528;
        _la = this._input.LA(1);
        if(_la===SparqlParser.SILENT) {
            this.state = 527;
            this.match(SparqlParser.SILENT);
        }

        this.state = 530;
        this.graphRef();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AddContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_add;
    return this;
}

AddContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AddContext.prototype.constructor = AddContext;

AddContext.prototype.ADD = function() {
    return this.getToken(SparqlParser.ADD, 0);
};

AddContext.prototype.graphOrDefault = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GraphOrDefaultContext);
    } else {
        return this.getTypedRuleContext(GraphOrDefaultContext,i);
    }
};

AddContext.prototype.TO = function() {
    return this.getToken(SparqlParser.TO, 0);
};

AddContext.prototype.SILENT = function() {
    return this.getToken(SparqlParser.SILENT, 0);
};

AddContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterAdd(this);
	}
};

AddContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitAdd(this);
	}
};




SparqlParser.AddContext = AddContext;

SparqlParser.prototype.add = function() {

    var localctx = new AddContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, SparqlParser.RULE_add);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 532;
        this.match(SparqlParser.ADD);
        this.state = 534;
        _la = this._input.LA(1);
        if(_la===SparqlParser.SILENT) {
            this.state = 533;
            this.match(SparqlParser.SILENT);
        }

        this.state = 536;
        this.graphOrDefault();
        this.state = 537;
        this.match(SparqlParser.TO);
        this.state = 538;
        this.graphOrDefault();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MoveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_move;
    return this;
}

MoveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MoveContext.prototype.constructor = MoveContext;

MoveContext.prototype.MOVE = function() {
    return this.getToken(SparqlParser.MOVE, 0);
};

MoveContext.prototype.graphOrDefault = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GraphOrDefaultContext);
    } else {
        return this.getTypedRuleContext(GraphOrDefaultContext,i);
    }
};

MoveContext.prototype.TO = function() {
    return this.getToken(SparqlParser.TO, 0);
};

MoveContext.prototype.SILENT = function() {
    return this.getToken(SparqlParser.SILENT, 0);
};

MoveContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterMove(this);
	}
};

MoveContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitMove(this);
	}
};




SparqlParser.MoveContext = MoveContext;

SparqlParser.prototype.move = function() {

    var localctx = new MoveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SparqlParser.RULE_move);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 540;
        this.match(SparqlParser.MOVE);
        this.state = 542;
        _la = this._input.LA(1);
        if(_la===SparqlParser.SILENT) {
            this.state = 541;
            this.match(SparqlParser.SILENT);
        }

        this.state = 544;
        this.graphOrDefault();
        this.state = 545;
        this.match(SparqlParser.TO);
        this.state = 546;
        this.graphOrDefault();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CopyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_copy;
    return this;
}

CopyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CopyContext.prototype.constructor = CopyContext;

CopyContext.prototype.COPY = function() {
    return this.getToken(SparqlParser.COPY, 0);
};

CopyContext.prototype.graphOrDefault = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GraphOrDefaultContext);
    } else {
        return this.getTypedRuleContext(GraphOrDefaultContext,i);
    }
};

CopyContext.prototype.TO = function() {
    return this.getToken(SparqlParser.TO, 0);
};

CopyContext.prototype.SILENT = function() {
    return this.getToken(SparqlParser.SILENT, 0);
};

CopyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterCopy(this);
	}
};

CopyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitCopy(this);
	}
};




SparqlParser.CopyContext = CopyContext;

SparqlParser.prototype.copy = function() {

    var localctx = new CopyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SparqlParser.RULE_copy);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 548;
        this.match(SparqlParser.COPY);
        this.state = 550;
        _la = this._input.LA(1);
        if(_la===SparqlParser.SILENT) {
            this.state = 549;
            this.match(SparqlParser.SILENT);
        }

        this.state = 552;
        this.graphOrDefault();
        this.state = 553;
        this.match(SparqlParser.TO);
        this.state = 554;
        this.graphOrDefault();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InsertDataContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_insertData;
    return this;
}

InsertDataContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertDataContext.prototype.constructor = InsertDataContext;

InsertDataContext.prototype.INSERT = function() {
    return this.getToken(SparqlParser.INSERT, 0);
};

InsertDataContext.prototype.DATA = function() {
    return this.getToken(SparqlParser.DATA, 0);
};

InsertDataContext.prototype.quadData = function() {
    return this.getTypedRuleContext(QuadDataContext,0);
};

InsertDataContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterInsertData(this);
	}
};

InsertDataContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitInsertData(this);
	}
};




SparqlParser.InsertDataContext = InsertDataContext;

SparqlParser.prototype.insertData = function() {

    var localctx = new InsertDataContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SparqlParser.RULE_insertData);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 556;
        this.match(SparqlParser.INSERT);
        this.state = 557;
        this.match(SparqlParser.DATA);
        this.state = 558;
        this.quadData();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeleteDataContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_deleteData;
    return this;
}

DeleteDataContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteDataContext.prototype.constructor = DeleteDataContext;

DeleteDataContext.prototype.DELETE = function() {
    return this.getToken(SparqlParser.DELETE, 0);
};

DeleteDataContext.prototype.DATA = function() {
    return this.getToken(SparqlParser.DATA, 0);
};

DeleteDataContext.prototype.quadData = function() {
    return this.getTypedRuleContext(QuadDataContext,0);
};

DeleteDataContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterDeleteData(this);
	}
};

DeleteDataContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitDeleteData(this);
	}
};




SparqlParser.DeleteDataContext = DeleteDataContext;

SparqlParser.prototype.deleteData = function() {

    var localctx = new DeleteDataContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SparqlParser.RULE_deleteData);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 560;
        this.match(SparqlParser.DELETE);
        this.state = 561;
        this.match(SparqlParser.DATA);
        this.state = 562;
        this.quadData();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeleteWhereContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_deleteWhere;
    return this;
}

DeleteWhereContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteWhereContext.prototype.constructor = DeleteWhereContext;

DeleteWhereContext.prototype.DELETE = function() {
    return this.getToken(SparqlParser.DELETE, 0);
};

DeleteWhereContext.prototype.WHERE = function() {
    return this.getToken(SparqlParser.WHERE, 0);
};

DeleteWhereContext.prototype.quadPattern = function() {
    return this.getTypedRuleContext(QuadPatternContext,0);
};

DeleteWhereContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterDeleteWhere(this);
	}
};

DeleteWhereContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitDeleteWhere(this);
	}
};




SparqlParser.DeleteWhereContext = DeleteWhereContext;

SparqlParser.prototype.deleteWhere = function() {

    var localctx = new DeleteWhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SparqlParser.RULE_deleteWhere);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 564;
        this.match(SparqlParser.DELETE);
        this.state = 565;
        this.match(SparqlParser.WHERE);
        this.state = 566;
        this.quadPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_modify;
    return this;
}

ModifyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifyContext.prototype.constructor = ModifyContext;

ModifyContext.prototype.WHERE = function() {
    return this.getToken(SparqlParser.WHERE, 0);
};

ModifyContext.prototype.groupGraphPattern = function() {
    return this.getTypedRuleContext(GroupGraphPatternContext,0);
};

ModifyContext.prototype.deleteClause = function() {
    return this.getTypedRuleContext(DeleteClauseContext,0);
};

ModifyContext.prototype.insertClause = function() {
    return this.getTypedRuleContext(InsertClauseContext,0);
};

ModifyContext.prototype.WITH = function() {
    return this.getToken(SparqlParser.WITH, 0);
};

ModifyContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

ModifyContext.prototype.usingClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UsingClauseContext);
    } else {
        return this.getTypedRuleContext(UsingClauseContext,i);
    }
};

ModifyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterModify(this);
	}
};

ModifyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitModify(this);
	}
};




SparqlParser.ModifyContext = ModifyContext;

SparqlParser.prototype.modify = function() {

    var localctx = new ModifyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SparqlParser.RULE_modify);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        _la = this._input.LA(1);
        if(_la===SparqlParser.WITH) {
            this.state = 568;
            this.match(SparqlParser.WITH);
            this.state = 569;
            this.iri();
        }

        this.state = 577;
        switch(this._input.LA(1)) {
        case SparqlParser.DELETE:
            this.state = 572;
            this.deleteClause();
            this.state = 574;
            _la = this._input.LA(1);
            if(_la===SparqlParser.INSERT) {
                this.state = 573;
                this.insertClause();
            }

            break;
        case SparqlParser.INSERT:
            this.state = 576;
            this.insertClause();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 582;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.USING) {
            this.state = 579;
            this.usingClause();
            this.state = 584;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 585;
        this.match(SparqlParser.WHERE);
        this.state = 586;
        this.groupGraphPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeleteClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_deleteClause;
    return this;
}

DeleteClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeleteClauseContext.prototype.constructor = DeleteClauseContext;

DeleteClauseContext.prototype.DELETE = function() {
    return this.getToken(SparqlParser.DELETE, 0);
};

DeleteClauseContext.prototype.quadPattern = function() {
    return this.getTypedRuleContext(QuadPatternContext,0);
};

DeleteClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterDeleteClause(this);
	}
};

DeleteClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitDeleteClause(this);
	}
};




SparqlParser.DeleteClauseContext = DeleteClauseContext;

SparqlParser.prototype.deleteClause = function() {

    var localctx = new DeleteClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SparqlParser.RULE_deleteClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 588;
        this.match(SparqlParser.DELETE);
        this.state = 589;
        this.quadPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InsertClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_insertClause;
    return this;
}

InsertClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertClauseContext.prototype.constructor = InsertClauseContext;

InsertClauseContext.prototype.INSERT = function() {
    return this.getToken(SparqlParser.INSERT, 0);
};

InsertClauseContext.prototype.quadPattern = function() {
    return this.getTypedRuleContext(QuadPatternContext,0);
};

InsertClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterInsertClause(this);
	}
};

InsertClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitInsertClause(this);
	}
};




SparqlParser.InsertClauseContext = InsertClauseContext;

SparqlParser.prototype.insertClause = function() {

    var localctx = new InsertClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SparqlParser.RULE_insertClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 591;
        this.match(SparqlParser.INSERT);
        this.state = 592;
        this.quadPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UsingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_usingClause;
    return this;
}

UsingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingClauseContext.prototype.constructor = UsingClauseContext;

UsingClauseContext.prototype.USING = function() {
    return this.getToken(SparqlParser.USING, 0);
};

UsingClauseContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

UsingClauseContext.prototype.NAMED = function() {
    return this.getToken(SparqlParser.NAMED, 0);
};

UsingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterUsingClause(this);
	}
};

UsingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitUsingClause(this);
	}
};




SparqlParser.UsingClauseContext = UsingClauseContext;

SparqlParser.prototype.usingClause = function() {

    var localctx = new UsingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SparqlParser.RULE_usingClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 594;
        this.match(SparqlParser.USING);
        this.state = 596;
        _la = this._input.LA(1);
        if(_la===SparqlParser.NAMED) {
            this.state = 595;
            this.match(SparqlParser.NAMED);
        }

        this.state = 598;
        this.iri();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphOrDefaultContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_graphOrDefault;
    return this;
}

GraphOrDefaultContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphOrDefaultContext.prototype.constructor = GraphOrDefaultContext;

GraphOrDefaultContext.prototype.DEFAULT = function() {
    return this.getToken(SparqlParser.DEFAULT, 0);
};

GraphOrDefaultContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

GraphOrDefaultContext.prototype.GRAPH = function() {
    return this.getToken(SparqlParser.GRAPH, 0);
};

GraphOrDefaultContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterGraphOrDefault(this);
	}
};

GraphOrDefaultContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitGraphOrDefault(this);
	}
};




SparqlParser.GraphOrDefaultContext = GraphOrDefaultContext;

SparqlParser.prototype.graphOrDefault = function() {

    var localctx = new GraphOrDefaultContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SparqlParser.RULE_graphOrDefault);
    var _la = 0; // Token type
    try {
        this.state = 605;
        switch(this._input.LA(1)) {
        case SparqlParser.DEFAULT:
            this.enterOuterAlt(localctx, 1);
            this.state = 600;
            this.match(SparqlParser.DEFAULT);
            break;
        case SparqlParser.GRAPH:
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
            this.enterOuterAlt(localctx, 2);
            this.state = 602;
            _la = this._input.LA(1);
            if(_la===SparqlParser.GRAPH) {
                this.state = 601;
                this.match(SparqlParser.GRAPH);
            }

            this.state = 604;
            this.iri();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphRefContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_graphRef;
    return this;
}

GraphRefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphRefContext.prototype.constructor = GraphRefContext;

GraphRefContext.prototype.GRAPH = function() {
    return this.getToken(SparqlParser.GRAPH, 0);
};

GraphRefContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

GraphRefContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterGraphRef(this);
	}
};

GraphRefContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitGraphRef(this);
	}
};




SparqlParser.GraphRefContext = GraphRefContext;

SparqlParser.prototype.graphRef = function() {

    var localctx = new GraphRefContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SparqlParser.RULE_graphRef);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 607;
        this.match(SparqlParser.GRAPH);
        this.state = 608;
        this.iri();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphRefAllContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_graphRefAll;
    return this;
}

GraphRefAllContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphRefAllContext.prototype.constructor = GraphRefAllContext;

GraphRefAllContext.prototype.graphRef = function() {
    return this.getTypedRuleContext(GraphRefContext,0);
};

GraphRefAllContext.prototype.DEFAULT = function() {
    return this.getToken(SparqlParser.DEFAULT, 0);
};

GraphRefAllContext.prototype.NAMED = function() {
    return this.getToken(SparqlParser.NAMED, 0);
};

GraphRefAllContext.prototype.ALL = function() {
    return this.getToken(SparqlParser.ALL, 0);
};

GraphRefAllContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterGraphRefAll(this);
	}
};

GraphRefAllContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitGraphRefAll(this);
	}
};




SparqlParser.GraphRefAllContext = GraphRefAllContext;

SparqlParser.prototype.graphRefAll = function() {

    var localctx = new GraphRefAllContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SparqlParser.RULE_graphRefAll);
    try {
        this.state = 614;
        switch(this._input.LA(1)) {
        case SparqlParser.GRAPH:
            this.enterOuterAlt(localctx, 1);
            this.state = 610;
            this.graphRef();
            break;
        case SparqlParser.DEFAULT:
            this.enterOuterAlt(localctx, 2);
            this.state = 611;
            this.match(SparqlParser.DEFAULT);
            break;
        case SparqlParser.NAMED:
            this.enterOuterAlt(localctx, 3);
            this.state = 612;
            this.match(SparqlParser.NAMED);
            break;
        case SparqlParser.ALL:
            this.enterOuterAlt(localctx, 4);
            this.state = 613;
            this.match(SparqlParser.ALL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuadPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_quadPattern;
    return this;
}

QuadPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuadPatternContext.prototype.constructor = QuadPatternContext;

QuadPatternContext.prototype.quads = function() {
    return this.getTypedRuleContext(QuadsContext,0);
};

QuadPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterQuadPattern(this);
	}
};

QuadPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitQuadPattern(this);
	}
};




SparqlParser.QuadPatternContext = QuadPatternContext;

SparqlParser.prototype.quadPattern = function() {

    var localctx = new QuadPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SparqlParser.RULE_quadPattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 616;
        this.match(SparqlParser.OPEN_CURLY_BRACE);
        this.state = 617;
        this.quads();
        this.state = 618;
        this.match(SparqlParser.CLOSE_CURLY_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuadDataContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_quadData;
    return this;
}

QuadDataContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuadDataContext.prototype.constructor = QuadDataContext;

QuadDataContext.prototype.quads = function() {
    return this.getTypedRuleContext(QuadsContext,0);
};

QuadDataContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterQuadData(this);
	}
};

QuadDataContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitQuadData(this);
	}
};




SparqlParser.QuadDataContext = QuadDataContext;

SparqlParser.prototype.quadData = function() {

    var localctx = new QuadDataContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SparqlParser.RULE_quadData);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 620;
        this.match(SparqlParser.OPEN_CURLY_BRACE);
        this.state = 621;
        this.quads();
        this.state = 622;
        this.match(SparqlParser.CLOSE_CURLY_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuadsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_quads;
    return this;
}

QuadsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuadsContext.prototype.constructor = QuadsContext;

QuadsContext.prototype.triplesTemplate = function() {
    return this.getTypedRuleContext(TriplesTemplateContext,0);
};

QuadsContext.prototype.quadsDetails = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QuadsDetailsContext);
    } else {
        return this.getTypedRuleContext(QuadsDetailsContext,i);
    }
};

QuadsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterQuads(this);
	}
};

QuadsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitQuads(this);
	}
};




SparqlParser.QuadsContext = QuadsContext;

SparqlParser.prototype.quads = function() {

    var localctx = new QuadsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SparqlParser.RULE_quads);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 625;
        _la = this._input.LA(1);
        if(_la===SparqlParser.TRUE || _la===SparqlParser.FALSE || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.BLANK_NODE_LABEL - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)) | (1 << (SparqlParser.INTEGER - 115)) | (1 << (SparqlParser.DECIMAL - 115)) | (1 << (SparqlParser.DOUBLE - 115)) | (1 << (SparqlParser.INTEGER_POSITIVE - 115)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 115)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 115)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 115)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 115)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 115)) | (1 << (SparqlParser.STRING_LITERAL1 - 115)) | (1 << (SparqlParser.STRING_LITERAL2 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 115)) | (1 << (SparqlParser.OPEN_BRACE - 115)))) !== 0) || _la===SparqlParser.OPEN_SQUARE_BRACKET) {
            this.state = 624;
            this.triplesTemplate();
        }

        this.state = 630;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.GRAPH) {
            this.state = 627;
            this.quadsDetails();
            this.state = 632;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuadsDetailsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_quadsDetails;
    return this;
}

QuadsDetailsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuadsDetailsContext.prototype.constructor = QuadsDetailsContext;

QuadsDetailsContext.prototype.quadsNotTriples = function() {
    return this.getTypedRuleContext(QuadsNotTriplesContext,0);
};

QuadsDetailsContext.prototype.triplesTemplate = function() {
    return this.getTypedRuleContext(TriplesTemplateContext,0);
};

QuadsDetailsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterQuadsDetails(this);
	}
};

QuadsDetailsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitQuadsDetails(this);
	}
};




SparqlParser.QuadsDetailsContext = QuadsDetailsContext;

SparqlParser.prototype.quadsDetails = function() {

    var localctx = new QuadsDetailsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SparqlParser.RULE_quadsDetails);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 633;
        this.quadsNotTriples();
        this.state = 635;
        _la = this._input.LA(1);
        if(_la===SparqlParser.DOT) {
            this.state = 634;
            this.match(SparqlParser.DOT);
        }

        this.state = 638;
        _la = this._input.LA(1);
        if(_la===SparqlParser.TRUE || _la===SparqlParser.FALSE || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.BLANK_NODE_LABEL - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)) | (1 << (SparqlParser.INTEGER - 115)) | (1 << (SparqlParser.DECIMAL - 115)) | (1 << (SparqlParser.DOUBLE - 115)) | (1 << (SparqlParser.INTEGER_POSITIVE - 115)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 115)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 115)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 115)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 115)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 115)) | (1 << (SparqlParser.STRING_LITERAL1 - 115)) | (1 << (SparqlParser.STRING_LITERAL2 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 115)) | (1 << (SparqlParser.OPEN_BRACE - 115)))) !== 0) || _la===SparqlParser.OPEN_SQUARE_BRACKET) {
            this.state = 637;
            this.triplesTemplate();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuadsNotTriplesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_quadsNotTriples;
    return this;
}

QuadsNotTriplesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuadsNotTriplesContext.prototype.constructor = QuadsNotTriplesContext;

QuadsNotTriplesContext.prototype.GRAPH = function() {
    return this.getToken(SparqlParser.GRAPH, 0);
};

QuadsNotTriplesContext.prototype.varOrIRI = function() {
    return this.getTypedRuleContext(VarOrIRIContext,0);
};

QuadsNotTriplesContext.prototype.triplesTemplate = function() {
    return this.getTypedRuleContext(TriplesTemplateContext,0);
};

QuadsNotTriplesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterQuadsNotTriples(this);
	}
};

QuadsNotTriplesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitQuadsNotTriples(this);
	}
};




SparqlParser.QuadsNotTriplesContext = QuadsNotTriplesContext;

SparqlParser.prototype.quadsNotTriples = function() {

    var localctx = new QuadsNotTriplesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SparqlParser.RULE_quadsNotTriples);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 640;
        this.match(SparqlParser.GRAPH);
        this.state = 641;
        this.varOrIRI();
        this.state = 642;
        this.match(SparqlParser.OPEN_CURLY_BRACE);
        this.state = 644;
        _la = this._input.LA(1);
        if(_la===SparqlParser.TRUE || _la===SparqlParser.FALSE || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.BLANK_NODE_LABEL - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)) | (1 << (SparqlParser.INTEGER - 115)) | (1 << (SparqlParser.DECIMAL - 115)) | (1 << (SparqlParser.DOUBLE - 115)) | (1 << (SparqlParser.INTEGER_POSITIVE - 115)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 115)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 115)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 115)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 115)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 115)) | (1 << (SparqlParser.STRING_LITERAL1 - 115)) | (1 << (SparqlParser.STRING_LITERAL2 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 115)) | (1 << (SparqlParser.OPEN_BRACE - 115)))) !== 0) || _la===SparqlParser.OPEN_SQUARE_BRACKET) {
            this.state = 643;
            this.triplesTemplate();
        }

        this.state = 646;
        this.match(SparqlParser.CLOSE_CURLY_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriplesTemplateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_triplesTemplate;
    return this;
}

TriplesTemplateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriplesTemplateContext.prototype.constructor = TriplesTemplateContext;

TriplesTemplateContext.prototype.triplesSameSubject = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TriplesSameSubjectContext);
    } else {
        return this.getTypedRuleContext(TriplesSameSubjectContext,i);
    }
};

TriplesTemplateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterTriplesTemplate(this);
	}
};

TriplesTemplateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitTriplesTemplate(this);
	}
};




SparqlParser.TriplesTemplateContext = TriplesTemplateContext;

SparqlParser.prototype.triplesTemplate = function() {

    var localctx = new TriplesTemplateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SparqlParser.RULE_triplesTemplate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 648;
        this.triplesSameSubject();
        this.state = 655;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.DOT) {
            this.state = 649;
            this.match(SparqlParser.DOT);
            this.state = 651;
            _la = this._input.LA(1);
            if(_la===SparqlParser.TRUE || _la===SparqlParser.FALSE || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.BLANK_NODE_LABEL - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)) | (1 << (SparqlParser.INTEGER - 115)) | (1 << (SparqlParser.DECIMAL - 115)) | (1 << (SparqlParser.DOUBLE - 115)) | (1 << (SparqlParser.INTEGER_POSITIVE - 115)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 115)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 115)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 115)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 115)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 115)) | (1 << (SparqlParser.STRING_LITERAL1 - 115)) | (1 << (SparqlParser.STRING_LITERAL2 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 115)) | (1 << (SparqlParser.OPEN_BRACE - 115)))) !== 0) || _la===SparqlParser.OPEN_SQUARE_BRACKET) {
                this.state = 650;
                this.triplesSameSubject();
            }

            this.state = 657;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupGraphPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_groupGraphPattern;
    return this;
}

GroupGraphPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupGraphPatternContext.prototype.constructor = GroupGraphPatternContext;

GroupGraphPatternContext.prototype.subSelect = function() {
    return this.getTypedRuleContext(SubSelectContext,0);
};

GroupGraphPatternContext.prototype.groupGraphPatternSub = function() {
    return this.getTypedRuleContext(GroupGraphPatternSubContext,0);
};

GroupGraphPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterGroupGraphPattern(this);
	}
};

GroupGraphPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitGroupGraphPattern(this);
	}
};




SparqlParser.GroupGraphPatternContext = GroupGraphPatternContext;

SparqlParser.prototype.groupGraphPattern = function() {

    var localctx = new GroupGraphPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SparqlParser.RULE_groupGraphPattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 658;
        this.match(SparqlParser.OPEN_CURLY_BRACE);
        this.state = 661;
        switch(this._input.LA(1)) {
        case SparqlParser.SELECT:
            this.state = 659;
            this.subSelect();
            break;
        case SparqlParser.VALUES:
        case SparqlParser.OPTIONAL:
        case SparqlParser.GRAPH:
        case SparqlParser.FILTER:
        case SparqlParser.TRUE:
        case SparqlParser.FALSE:
        case SparqlParser.SERVICE:
        case SparqlParser.BIND:
        case SparqlParser.MINUS:
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
        case SparqlParser.BLANK_NODE_LABEL:
        case SparqlParser.VAR1:
        case SparqlParser.VAR2:
        case SparqlParser.INTEGER:
        case SparqlParser.DECIMAL:
        case SparqlParser.DOUBLE:
        case SparqlParser.INTEGER_POSITIVE:
        case SparqlParser.DECIMAL_POSITIVE:
        case SparqlParser.DOUBLE_POSITIVE:
        case SparqlParser.INTEGER_NEGATIVE:
        case SparqlParser.DECIMAL_NEGATIVE:
        case SparqlParser.DOUBLE_NEGATIVE:
        case SparqlParser.STRING_LITERAL1:
        case SparqlParser.STRING_LITERAL2:
        case SparqlParser.STRING_LITERAL_LONG1:
        case SparqlParser.STRING_LITERAL_LONG2:
        case SparqlParser.OPEN_BRACE:
        case SparqlParser.OPEN_CURLY_BRACE:
        case SparqlParser.CLOSE_CURLY_BRACE:
        case SparqlParser.OPEN_SQUARE_BRACKET:
            this.state = 660;
            this.groupGraphPatternSub();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 663;
        this.match(SparqlParser.CLOSE_CURLY_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupGraphPatternSubContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_groupGraphPatternSub;
    return this;
}

GroupGraphPatternSubContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupGraphPatternSubContext.prototype.constructor = GroupGraphPatternSubContext;

GroupGraphPatternSubContext.prototype.triplesBlock = function() {
    return this.getTypedRuleContext(TriplesBlockContext,0);
};

GroupGraphPatternSubContext.prototype.groupGraphPatternSubList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupGraphPatternSubListContext);
    } else {
        return this.getTypedRuleContext(GroupGraphPatternSubListContext,i);
    }
};

GroupGraphPatternSubContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterGroupGraphPatternSub(this);
	}
};

GroupGraphPatternSubContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitGroupGraphPatternSub(this);
	}
};




SparqlParser.GroupGraphPatternSubContext = GroupGraphPatternSubContext;

SparqlParser.prototype.groupGraphPatternSub = function() {

    var localctx = new GroupGraphPatternSubContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SparqlParser.RULE_groupGraphPatternSub);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 666;
        _la = this._input.LA(1);
        if(_la===SparqlParser.TRUE || _la===SparqlParser.FALSE || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.BLANK_NODE_LABEL - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)) | (1 << (SparqlParser.INTEGER - 115)) | (1 << (SparqlParser.DECIMAL - 115)) | (1 << (SparqlParser.DOUBLE - 115)) | (1 << (SparqlParser.INTEGER_POSITIVE - 115)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 115)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 115)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 115)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 115)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 115)) | (1 << (SparqlParser.STRING_LITERAL1 - 115)) | (1 << (SparqlParser.STRING_LITERAL2 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 115)) | (1 << (SparqlParser.OPEN_BRACE - 115)))) !== 0) || _la===SparqlParser.OPEN_SQUARE_BRACKET) {
            this.state = 665;
            this.triplesBlock();
        }

        this.state = 671;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SparqlParser.VALUES) | (1 << SparqlParser.OPTIONAL) | (1 << SparqlParser.GRAPH) | (1 << SparqlParser.FILTER))) !== 0) || ((((_la - 61)) & ~0x1f) == 0 && ((1 << (_la - 61)) & ((1 << (SparqlParser.SERVICE - 61)) | (1 << (SparqlParser.BIND - 61)) | (1 << (SparqlParser.MINUS - 61)))) !== 0) || _la===SparqlParser.OPEN_CURLY_BRACE) {
            this.state = 668;
            this.groupGraphPatternSubList();
            this.state = 673;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupGraphPatternSubListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_groupGraphPatternSubList;
    return this;
}

GroupGraphPatternSubListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupGraphPatternSubListContext.prototype.constructor = GroupGraphPatternSubListContext;

GroupGraphPatternSubListContext.prototype.graphPatternNotTriples = function() {
    return this.getTypedRuleContext(GraphPatternNotTriplesContext,0);
};

GroupGraphPatternSubListContext.prototype.triplesBlock = function() {
    return this.getTypedRuleContext(TriplesBlockContext,0);
};

GroupGraphPatternSubListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterGroupGraphPatternSubList(this);
	}
};

GroupGraphPatternSubListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitGroupGraphPatternSubList(this);
	}
};




SparqlParser.GroupGraphPatternSubListContext = GroupGraphPatternSubListContext;

SparqlParser.prototype.groupGraphPatternSubList = function() {

    var localctx = new GroupGraphPatternSubListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SparqlParser.RULE_groupGraphPatternSubList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 674;
        this.graphPatternNotTriples();
        this.state = 676;
        _la = this._input.LA(1);
        if(_la===SparqlParser.DOT) {
            this.state = 675;
            this.match(SparqlParser.DOT);
        }

        this.state = 679;
        _la = this._input.LA(1);
        if(_la===SparqlParser.TRUE || _la===SparqlParser.FALSE || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.BLANK_NODE_LABEL - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)) | (1 << (SparqlParser.INTEGER - 115)) | (1 << (SparqlParser.DECIMAL - 115)) | (1 << (SparqlParser.DOUBLE - 115)) | (1 << (SparqlParser.INTEGER_POSITIVE - 115)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 115)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 115)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 115)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 115)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 115)) | (1 << (SparqlParser.STRING_LITERAL1 - 115)) | (1 << (SparqlParser.STRING_LITERAL2 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 115)) | (1 << (SparqlParser.OPEN_BRACE - 115)))) !== 0) || _la===SparqlParser.OPEN_SQUARE_BRACKET) {
            this.state = 678;
            this.triplesBlock();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriplesBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_triplesBlock;
    return this;
}

TriplesBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriplesBlockContext.prototype.constructor = TriplesBlockContext;

TriplesBlockContext.prototype.triplesSameSubjectPath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TriplesSameSubjectPathContext);
    } else {
        return this.getTypedRuleContext(TriplesSameSubjectPathContext,i);
    }
};

TriplesBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterTriplesBlock(this);
	}
};

TriplesBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitTriplesBlock(this);
	}
};




SparqlParser.TriplesBlockContext = TriplesBlockContext;

SparqlParser.prototype.triplesBlock = function() {

    var localctx = new TriplesBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, SparqlParser.RULE_triplesBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 681;
        this.triplesSameSubjectPath();
        this.state = 688;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.DOT) {
            this.state = 682;
            this.match(SparqlParser.DOT);
            this.state = 684;
            _la = this._input.LA(1);
            if(_la===SparqlParser.TRUE || _la===SparqlParser.FALSE || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.BLANK_NODE_LABEL - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)) | (1 << (SparqlParser.INTEGER - 115)) | (1 << (SparqlParser.DECIMAL - 115)) | (1 << (SparqlParser.DOUBLE - 115)) | (1 << (SparqlParser.INTEGER_POSITIVE - 115)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 115)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 115)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 115)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 115)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 115)) | (1 << (SparqlParser.STRING_LITERAL1 - 115)) | (1 << (SparqlParser.STRING_LITERAL2 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 115)) | (1 << (SparqlParser.OPEN_BRACE - 115)))) !== 0) || _la===SparqlParser.OPEN_SQUARE_BRACKET) {
                this.state = 683;
                this.triplesSameSubjectPath();
            }

            this.state = 690;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphPatternNotTriplesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_graphPatternNotTriples;
    return this;
}

GraphPatternNotTriplesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphPatternNotTriplesContext.prototype.constructor = GraphPatternNotTriplesContext;

GraphPatternNotTriplesContext.prototype.groupOrUnionGraphPattern = function() {
    return this.getTypedRuleContext(GroupOrUnionGraphPatternContext,0);
};

GraphPatternNotTriplesContext.prototype.optionalGraphPattern = function() {
    return this.getTypedRuleContext(OptionalGraphPatternContext,0);
};

GraphPatternNotTriplesContext.prototype.minusGraphPattern = function() {
    return this.getTypedRuleContext(MinusGraphPatternContext,0);
};

GraphPatternNotTriplesContext.prototype.graphGraphPattern = function() {
    return this.getTypedRuleContext(GraphGraphPatternContext,0);
};

GraphPatternNotTriplesContext.prototype.serviceGraphPattern = function() {
    return this.getTypedRuleContext(ServiceGraphPatternContext,0);
};

GraphPatternNotTriplesContext.prototype.filter = function() {
    return this.getTypedRuleContext(FilterContext,0);
};

GraphPatternNotTriplesContext.prototype.bind = function() {
    return this.getTypedRuleContext(BindContext,0);
};

GraphPatternNotTriplesContext.prototype.inlineData = function() {
    return this.getTypedRuleContext(InlineDataContext,0);
};

GraphPatternNotTriplesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterGraphPatternNotTriples(this);
	}
};

GraphPatternNotTriplesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitGraphPatternNotTriples(this);
	}
};




SparqlParser.GraphPatternNotTriplesContext = GraphPatternNotTriplesContext;

SparqlParser.prototype.graphPatternNotTriples = function() {

    var localctx = new GraphPatternNotTriplesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SparqlParser.RULE_graphPatternNotTriples);
    try {
        this.state = 699;
        switch(this._input.LA(1)) {
        case SparqlParser.OPEN_CURLY_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 691;
            this.groupOrUnionGraphPattern();
            break;
        case SparqlParser.OPTIONAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 692;
            this.optionalGraphPattern();
            break;
        case SparqlParser.MINUS:
            this.enterOuterAlt(localctx, 3);
            this.state = 693;
            this.minusGraphPattern();
            break;
        case SparqlParser.GRAPH:
            this.enterOuterAlt(localctx, 4);
            this.state = 694;
            this.graphGraphPattern();
            break;
        case SparqlParser.SERVICE:
            this.enterOuterAlt(localctx, 5);
            this.state = 695;
            this.serviceGraphPattern();
            break;
        case SparqlParser.FILTER:
            this.enterOuterAlt(localctx, 6);
            this.state = 696;
            this.filter();
            break;
        case SparqlParser.BIND:
            this.enterOuterAlt(localctx, 7);
            this.state = 697;
            this.bind();
            break;
        case SparqlParser.VALUES:
            this.enterOuterAlt(localctx, 8);
            this.state = 698;
            this.inlineData();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptionalGraphPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_optionalGraphPattern;
    return this;
}

OptionalGraphPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalGraphPatternContext.prototype.constructor = OptionalGraphPatternContext;

OptionalGraphPatternContext.prototype.OPTIONAL = function() {
    return this.getToken(SparqlParser.OPTIONAL, 0);
};

OptionalGraphPatternContext.prototype.groupGraphPattern = function() {
    return this.getTypedRuleContext(GroupGraphPatternContext,0);
};

OptionalGraphPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterOptionalGraphPattern(this);
	}
};

OptionalGraphPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitOptionalGraphPattern(this);
	}
};




SparqlParser.OptionalGraphPatternContext = OptionalGraphPatternContext;

SparqlParser.prototype.optionalGraphPattern = function() {

    var localctx = new OptionalGraphPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SparqlParser.RULE_optionalGraphPattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 701;
        this.match(SparqlParser.OPTIONAL);
        this.state = 702;
        this.groupGraphPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphGraphPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_graphGraphPattern;
    return this;
}

GraphGraphPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphGraphPatternContext.prototype.constructor = GraphGraphPatternContext;

GraphGraphPatternContext.prototype.GRAPH = function() {
    return this.getToken(SparqlParser.GRAPH, 0);
};

GraphGraphPatternContext.prototype.varOrIRI = function() {
    return this.getTypedRuleContext(VarOrIRIContext,0);
};

GraphGraphPatternContext.prototype.groupGraphPattern = function() {
    return this.getTypedRuleContext(GroupGraphPatternContext,0);
};

GraphGraphPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterGraphGraphPattern(this);
	}
};

GraphGraphPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitGraphGraphPattern(this);
	}
};




SparqlParser.GraphGraphPatternContext = GraphGraphPatternContext;

SparqlParser.prototype.graphGraphPattern = function() {

    var localctx = new GraphGraphPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SparqlParser.RULE_graphGraphPattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 704;
        this.match(SparqlParser.GRAPH);
        this.state = 705;
        this.varOrIRI();
        this.state = 706;
        this.groupGraphPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ServiceGraphPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_serviceGraphPattern;
    return this;
}

ServiceGraphPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ServiceGraphPatternContext.prototype.constructor = ServiceGraphPatternContext;

ServiceGraphPatternContext.prototype.SERVICE = function() {
    return this.getToken(SparqlParser.SERVICE, 0);
};

ServiceGraphPatternContext.prototype.varOrIRI = function() {
    return this.getTypedRuleContext(VarOrIRIContext,0);
};

ServiceGraphPatternContext.prototype.groupGraphPattern = function() {
    return this.getTypedRuleContext(GroupGraphPatternContext,0);
};

ServiceGraphPatternContext.prototype.SILENT = function() {
    return this.getToken(SparqlParser.SILENT, 0);
};

ServiceGraphPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterServiceGraphPattern(this);
	}
};

ServiceGraphPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitServiceGraphPattern(this);
	}
};




SparqlParser.ServiceGraphPatternContext = ServiceGraphPatternContext;

SparqlParser.prototype.serviceGraphPattern = function() {

    var localctx = new ServiceGraphPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SparqlParser.RULE_serviceGraphPattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 708;
        this.match(SparqlParser.SERVICE);
        this.state = 710;
        _la = this._input.LA(1);
        if(_la===SparqlParser.SILENT) {
            this.state = 709;
            this.match(SparqlParser.SILENT);
        }

        this.state = 712;
        this.varOrIRI();
        this.state = 713;
        this.groupGraphPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BindContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_bind;
    return this;
}

BindContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BindContext.prototype.constructor = BindContext;

BindContext.prototype.BIND = function() {
    return this.getToken(SparqlParser.BIND, 0);
};

BindContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

BindContext.prototype.AS = function() {
    return this.getToken(SparqlParser.AS, 0);
};

BindContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

BindContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterBind(this);
	}
};

BindContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitBind(this);
	}
};




SparqlParser.BindContext = BindContext;

SparqlParser.prototype.bind = function() {

    var localctx = new BindContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SparqlParser.RULE_bind);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 715;
        this.match(SparqlParser.BIND);
        this.state = 716;
        this.match(SparqlParser.OPEN_BRACE);
        this.state = 717;
        this.expression(0);
        this.state = 718;
        this.match(SparqlParser.AS);
        this.state = 719;
        this.var();
        this.state = 720;
        this.match(SparqlParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineDataContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_inlineData;
    return this;
}

InlineDataContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineDataContext.prototype.constructor = InlineDataContext;

InlineDataContext.prototype.VALUES = function() {
    return this.getToken(SparqlParser.VALUES, 0);
};

InlineDataContext.prototype.dataBlock = function() {
    return this.getTypedRuleContext(DataBlockContext,0);
};

InlineDataContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterInlineData(this);
	}
};

InlineDataContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitInlineData(this);
	}
};




SparqlParser.InlineDataContext = InlineDataContext;

SparqlParser.prototype.inlineData = function() {

    var localctx = new InlineDataContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SparqlParser.RULE_inlineData);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 722;
        this.match(SparqlParser.VALUES);
        this.state = 723;
        this.dataBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_dataBlock;
    return this;
}

DataBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataBlockContext.prototype.constructor = DataBlockContext;

DataBlockContext.prototype.inlineDataOneVar = function() {
    return this.getTypedRuleContext(InlineDataOneVarContext,0);
};

DataBlockContext.prototype.inlineDataFull = function() {
    return this.getTypedRuleContext(InlineDataFullContext,0);
};

DataBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterDataBlock(this);
	}
};

DataBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitDataBlock(this);
	}
};




SparqlParser.DataBlockContext = DataBlockContext;

SparqlParser.prototype.dataBlock = function() {

    var localctx = new DataBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SparqlParser.RULE_dataBlock);
    try {
        this.state = 727;
        switch(this._input.LA(1)) {
        case SparqlParser.VAR1:
        case SparqlParser.VAR2:
            this.enterOuterAlt(localctx, 1);
            this.state = 725;
            this.inlineDataOneVar();
            break;
        case SparqlParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 726;
            this.inlineDataFull();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineDataOneVarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_inlineDataOneVar;
    return this;
}

InlineDataOneVarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineDataOneVarContext.prototype.constructor = InlineDataOneVarContext;

InlineDataOneVarContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

InlineDataOneVarContext.prototype.dataBlockValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataBlockValueContext);
    } else {
        return this.getTypedRuleContext(DataBlockValueContext,i);
    }
};

InlineDataOneVarContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterInlineDataOneVar(this);
	}
};

InlineDataOneVarContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitInlineDataOneVar(this);
	}
};




SparqlParser.InlineDataOneVarContext = InlineDataOneVarContext;

SparqlParser.prototype.inlineDataOneVar = function() {

    var localctx = new InlineDataOneVarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SparqlParser.RULE_inlineDataOneVar);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 729;
        this.var();
        this.state = 730;
        this.match(SparqlParser.OPEN_CURLY_BRACE);
        this.state = 734;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (SparqlParser.TRUE - 37)) | (1 << (SparqlParser.FALSE - 37)) | (1 << (SparqlParser.UNDEF - 37)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.INTEGER - 115)) | (1 << (SparqlParser.DECIMAL - 115)) | (1 << (SparqlParser.DOUBLE - 115)) | (1 << (SparqlParser.INTEGER_POSITIVE - 115)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 115)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 115)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 115)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 115)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 115)) | (1 << (SparqlParser.STRING_LITERAL1 - 115)) | (1 << (SparqlParser.STRING_LITERAL2 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 115)))) !== 0)) {
            this.state = 731;
            this.dataBlockValue();
            this.state = 736;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 737;
        this.match(SparqlParser.CLOSE_CURLY_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineDataFullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_inlineDataFull;
    return this;
}

InlineDataFullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineDataFullContext.prototype.constructor = InlineDataFullContext;

InlineDataFullContext.prototype.var = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VarContext);
    } else {
        return this.getTypedRuleContext(VarContext,i);
    }
};

InlineDataFullContext.prototype.dataBlockValues = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataBlockValuesContext);
    } else {
        return this.getTypedRuleContext(DataBlockValuesContext,i);
    }
};

InlineDataFullContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterInlineDataFull(this);
	}
};

InlineDataFullContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitInlineDataFull(this);
	}
};




SparqlParser.InlineDataFullContext = InlineDataFullContext;

SparqlParser.prototype.inlineDataFull = function() {

    var localctx = new InlineDataFullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SparqlParser.RULE_inlineDataFull);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 739;
        this.match(SparqlParser.OPEN_BRACE);
        this.state = 743;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.VAR1 || _la===SparqlParser.VAR2) {
            this.state = 740;
            this.var();
            this.state = 745;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 746;
        this.match(SparqlParser.CLOSE_BRACE);
        this.state = 747;
        this.match(SparqlParser.OPEN_CURLY_BRACE);
        this.state = 751;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.OPEN_BRACE) {
            this.state = 748;
            this.dataBlockValues();
            this.state = 753;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 754;
        this.match(SparqlParser.CLOSE_CURLY_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataBlockValuesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_dataBlockValues;
    return this;
}

DataBlockValuesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataBlockValuesContext.prototype.constructor = DataBlockValuesContext;

DataBlockValuesContext.prototype.dataBlockValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DataBlockValueContext);
    } else {
        return this.getTypedRuleContext(DataBlockValueContext,i);
    }
};

DataBlockValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterDataBlockValues(this);
	}
};

DataBlockValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitDataBlockValues(this);
	}
};




SparqlParser.DataBlockValuesContext = DataBlockValuesContext;

SparqlParser.prototype.dataBlockValues = function() {

    var localctx = new DataBlockValuesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SparqlParser.RULE_dataBlockValues);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 756;
        this.match(SparqlParser.OPEN_BRACE);
        this.state = 760;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (SparqlParser.TRUE - 37)) | (1 << (SparqlParser.FALSE - 37)) | (1 << (SparqlParser.UNDEF - 37)))) !== 0) || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.INTEGER - 115)) | (1 << (SparqlParser.DECIMAL - 115)) | (1 << (SparqlParser.DOUBLE - 115)) | (1 << (SparqlParser.INTEGER_POSITIVE - 115)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 115)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 115)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 115)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 115)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 115)) | (1 << (SparqlParser.STRING_LITERAL1 - 115)) | (1 << (SparqlParser.STRING_LITERAL2 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 115)))) !== 0)) {
            this.state = 757;
            this.dataBlockValue();
            this.state = 762;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 763;
        this.match(SparqlParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataBlockValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_dataBlockValue;
    return this;
}

DataBlockValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataBlockValueContext.prototype.constructor = DataBlockValueContext;

DataBlockValueContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

DataBlockValueContext.prototype.rdfLiteral = function() {
    return this.getTypedRuleContext(RdfLiteralContext,0);
};

DataBlockValueContext.prototype.numericLiteral = function() {
    return this.getTypedRuleContext(NumericLiteralContext,0);
};

DataBlockValueContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

DataBlockValueContext.prototype.UNDEF = function() {
    return this.getToken(SparqlParser.UNDEF, 0);
};

DataBlockValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterDataBlockValue(this);
	}
};

DataBlockValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitDataBlockValue(this);
	}
};




SparqlParser.DataBlockValueContext = DataBlockValueContext;

SparqlParser.prototype.dataBlockValue = function() {

    var localctx = new DataBlockValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SparqlParser.RULE_dataBlockValue);
    try {
        this.state = 770;
        switch(this._input.LA(1)) {
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
            this.enterOuterAlt(localctx, 1);
            this.state = 765;
            this.iri();
            break;
        case SparqlParser.STRING_LITERAL1:
        case SparqlParser.STRING_LITERAL2:
        case SparqlParser.STRING_LITERAL_LONG1:
        case SparqlParser.STRING_LITERAL_LONG2:
            this.enterOuterAlt(localctx, 2);
            this.state = 766;
            this.rdfLiteral();
            break;
        case SparqlParser.INTEGER:
        case SparqlParser.DECIMAL:
        case SparqlParser.DOUBLE:
        case SparqlParser.INTEGER_POSITIVE:
        case SparqlParser.DECIMAL_POSITIVE:
        case SparqlParser.DOUBLE_POSITIVE:
        case SparqlParser.INTEGER_NEGATIVE:
        case SparqlParser.DECIMAL_NEGATIVE:
        case SparqlParser.DOUBLE_NEGATIVE:
            this.enterOuterAlt(localctx, 3);
            this.state = 767;
            this.numericLiteral();
            break;
        case SparqlParser.TRUE:
        case SparqlParser.FALSE:
            this.enterOuterAlt(localctx, 4);
            this.state = 768;
            this.booleanLiteral();
            break;
        case SparqlParser.UNDEF:
            this.enterOuterAlt(localctx, 5);
            this.state = 769;
            this.match(SparqlParser.UNDEF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MinusGraphPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_minusGraphPattern;
    return this;
}

MinusGraphPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MinusGraphPatternContext.prototype.constructor = MinusGraphPatternContext;

MinusGraphPatternContext.prototype.MINUS = function() {
    return this.getToken(SparqlParser.MINUS, 0);
};

MinusGraphPatternContext.prototype.groupGraphPattern = function() {
    return this.getTypedRuleContext(GroupGraphPatternContext,0);
};

MinusGraphPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterMinusGraphPattern(this);
	}
};

MinusGraphPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitMinusGraphPattern(this);
	}
};




SparqlParser.MinusGraphPatternContext = MinusGraphPatternContext;

SparqlParser.prototype.minusGraphPattern = function() {

    var localctx = new MinusGraphPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SparqlParser.RULE_minusGraphPattern);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 772;
        this.match(SparqlParser.MINUS);
        this.state = 773;
        this.groupGraphPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GroupOrUnionGraphPatternContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_groupOrUnionGraphPattern;
    return this;
}

GroupOrUnionGraphPatternContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupOrUnionGraphPatternContext.prototype.constructor = GroupOrUnionGraphPatternContext;

GroupOrUnionGraphPatternContext.prototype.groupGraphPattern = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GroupGraphPatternContext);
    } else {
        return this.getTypedRuleContext(GroupGraphPatternContext,i);
    }
};

GroupOrUnionGraphPatternContext.prototype.UNION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SparqlParser.UNION);
    } else {
        return this.getToken(SparqlParser.UNION, i);
    }
};


GroupOrUnionGraphPatternContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterGroupOrUnionGraphPattern(this);
	}
};

GroupOrUnionGraphPatternContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitGroupOrUnionGraphPattern(this);
	}
};




SparqlParser.GroupOrUnionGraphPatternContext = GroupOrUnionGraphPatternContext;

SparqlParser.prototype.groupOrUnionGraphPattern = function() {

    var localctx = new GroupOrUnionGraphPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, SparqlParser.RULE_groupOrUnionGraphPattern);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 775;
        this.groupGraphPattern();
        this.state = 780;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.UNION) {
            this.state = 776;
            this.match(SparqlParser.UNION);
            this.state = 777;
            this.groupGraphPattern();
            this.state = 782;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FilterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_filter;
    return this;
}

FilterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FilterContext.prototype.constructor = FilterContext;

FilterContext.prototype.FILTER = function() {
    return this.getToken(SparqlParser.FILTER, 0);
};

FilterContext.prototype.constraint = function() {
    return this.getTypedRuleContext(ConstraintContext,0);
};

FilterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterFilter(this);
	}
};

FilterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitFilter(this);
	}
};




SparqlParser.FilterContext = FilterContext;

SparqlParser.prototype.filter = function() {

    var localctx = new FilterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, SparqlParser.RULE_filter);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 783;
        this.match(SparqlParser.FILTER);
        this.state = 784;
        this.constraint();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_constraint;
    return this;
}

ConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstraintContext.prototype.constructor = ConstraintContext;

ConstraintContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ConstraintContext.prototype.builtInCall = function() {
    return this.getTypedRuleContext(BuiltInCallContext,0);
};

ConstraintContext.prototype.functionCall = function() {
    return this.getTypedRuleContext(FunctionCallContext,0);
};

ConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterConstraint(this);
	}
};

ConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitConstraint(this);
	}
};




SparqlParser.ConstraintContext = ConstraintContext;

SparqlParser.prototype.constraint = function() {

    var localctx = new ConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, SparqlParser.RULE_constraint);
    try {
        this.state = 792;
        switch(this._input.LA(1)) {
        case SparqlParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 786;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 787;
            this.expression(0);
            this.state = 788;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.STR:
        case SparqlParser.LANG:
        case SparqlParser.LANGMATCHES:
        case SparqlParser.DATATYPE:
        case SparqlParser.BOUND:
        case SparqlParser.SAMETERM:
        case SparqlParser.ISIRI:
        case SparqlParser.ISURI:
        case SparqlParser.ISBLANK:
        case SparqlParser.ISLITERAL:
        case SparqlParser.REGEX:
        case SparqlParser.SUBSTR:
        case SparqlParser.IRI:
        case SparqlParser.URI:
        case SparqlParser.BNODE:
        case SparqlParser.RAND:
        case SparqlParser.ABS:
        case SparqlParser.CEIL:
        case SparqlParser.FLOOR:
        case SparqlParser.ROUND:
        case SparqlParser.CONCAT:
        case SparqlParser.STRLEN:
        case SparqlParser.UCASE:
        case SparqlParser.LCASE:
        case SparqlParser.ENCODE_FOR_URI:
        case SparqlParser.CONTAINS:
        case SparqlParser.STRSTARTS:
        case SparqlParser.STRENDS:
        case SparqlParser.STRBEFORE:
        case SparqlParser.STRAFTER:
        case SparqlParser.REPLACE:
        case SparqlParser.YEAR:
        case SparqlParser.MONTH:
        case SparqlParser.DAY:
        case SparqlParser.HOURS:
        case SparqlParser.MINUTES:
        case SparqlParser.SECONDS:
        case SparqlParser.TIMEZONE:
        case SparqlParser.TZ:
        case SparqlParser.NOW:
        case SparqlParser.UUID:
        case SparqlParser.STRUUID:
        case SparqlParser.MD5:
        case SparqlParser.SHA1:
        case SparqlParser.SHA256:
        case SparqlParser.SHA384:
        case SparqlParser.SHA512:
        case SparqlParser.COALESCE:
        case SparqlParser.IF:
        case SparqlParser.STRLANG:
        case SparqlParser.STRDT:
        case SparqlParser.ISNUMERIC:
        case SparqlParser.COUNT:
        case SparqlParser.SUM:
        case SparqlParser.MIN:
        case SparqlParser.MAX:
        case SparqlParser.AVG:
        case SparqlParser.SAMPLE:
        case SparqlParser.GROUP_CONCAT:
        case SparqlParser.NOT:
        case SparqlParser.EXISTS:
            this.enterOuterAlt(localctx, 2);
            this.state = 790;
            this.builtInCall();
            break;
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
            this.enterOuterAlt(localctx, 3);
            this.state = 791;
            this.functionCall();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_functionCall;
    return this;
}

FunctionCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionCallContext.prototype.constructor = FunctionCallContext;

FunctionCallContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

FunctionCallContext.prototype.argList = function() {
    return this.getTypedRuleContext(ArgListContext,0);
};

FunctionCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterFunctionCall(this);
	}
};

FunctionCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitFunctionCall(this);
	}
};




SparqlParser.FunctionCallContext = FunctionCallContext;

SparqlParser.prototype.functionCall = function() {

    var localctx = new FunctionCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, SparqlParser.RULE_functionCall);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 794;
        this.iri();
        this.state = 795;
        this.argList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ArgListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_argList;
    return this;
}

ArgListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgListContext.prototype.constructor = ArgListContext;

ArgListContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ArgListContext.prototype.DISTINCT = function() {
    return this.getToken(SparqlParser.DISTINCT, 0);
};

ArgListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterArgList(this);
	}
};

ArgListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitArgList(this);
	}
};




SparqlParser.ArgListContext = ArgListContext;

SparqlParser.prototype.argList = function() {

    var localctx = new ArgListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, SparqlParser.RULE_argList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 797;
        this.match(SparqlParser.OPEN_BRACE);
        this.state = 803;
        switch(this._input.LA(1)) {
        case SparqlParser.DISTINCT:
        case SparqlParser.STR:
        case SparqlParser.LANG:
        case SparqlParser.LANGMATCHES:
        case SparqlParser.DATATYPE:
        case SparqlParser.BOUND:
        case SparqlParser.SAMETERM:
        case SparqlParser.ISIRI:
        case SparqlParser.ISURI:
        case SparqlParser.ISBLANK:
        case SparqlParser.ISLITERAL:
        case SparqlParser.REGEX:
        case SparqlParser.SUBSTR:
        case SparqlParser.TRUE:
        case SparqlParser.FALSE:
        case SparqlParser.IRI:
        case SparqlParser.URI:
        case SparqlParser.BNODE:
        case SparqlParser.RAND:
        case SparqlParser.ABS:
        case SparqlParser.CEIL:
        case SparqlParser.FLOOR:
        case SparqlParser.ROUND:
        case SparqlParser.CONCAT:
        case SparqlParser.STRLEN:
        case SparqlParser.UCASE:
        case SparqlParser.LCASE:
        case SparqlParser.ENCODE_FOR_URI:
        case SparqlParser.CONTAINS:
        case SparqlParser.STRSTARTS:
        case SparqlParser.STRENDS:
        case SparqlParser.STRBEFORE:
        case SparqlParser.STRAFTER:
        case SparqlParser.REPLACE:
        case SparqlParser.YEAR:
        case SparqlParser.MONTH:
        case SparqlParser.DAY:
        case SparqlParser.HOURS:
        case SparqlParser.MINUTES:
        case SparqlParser.SECONDS:
        case SparqlParser.TIMEZONE:
        case SparqlParser.TZ:
        case SparqlParser.NOW:
        case SparqlParser.UUID:
        case SparqlParser.STRUUID:
        case SparqlParser.MD5:
        case SparqlParser.SHA1:
        case SparqlParser.SHA256:
        case SparqlParser.SHA384:
        case SparqlParser.SHA512:
        case SparqlParser.COALESCE:
        case SparqlParser.IF:
        case SparqlParser.STRLANG:
        case SparqlParser.STRDT:
        case SparqlParser.ISNUMERIC:
        case SparqlParser.COUNT:
        case SparqlParser.SUM:
        case SparqlParser.MIN:
        case SparqlParser.MAX:
        case SparqlParser.AVG:
        case SparqlParser.SAMPLE:
        case SparqlParser.GROUP_CONCAT:
        case SparqlParser.NOT:
        case SparqlParser.EXISTS:
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
        case SparqlParser.VAR1:
        case SparqlParser.VAR2:
        case SparqlParser.INTEGER:
        case SparqlParser.DECIMAL:
        case SparqlParser.DOUBLE:
        case SparqlParser.INTEGER_POSITIVE:
        case SparqlParser.DECIMAL_POSITIVE:
        case SparqlParser.DOUBLE_POSITIVE:
        case SparqlParser.INTEGER_NEGATIVE:
        case SparqlParser.DECIMAL_NEGATIVE:
        case SparqlParser.DOUBLE_NEGATIVE:
        case SparqlParser.STRING_LITERAL1:
        case SparqlParser.STRING_LITERAL2:
        case SparqlParser.STRING_LITERAL_LONG1:
        case SparqlParser.STRING_LITERAL_LONG2:
        case SparqlParser.OPEN_BRACE:
        case SparqlParser.PLUS_SIGN:
        case SparqlParser.MINUS_SIGN:
        case SparqlParser.ASTERISK:
        case SparqlParser.NEGATION:
        case SparqlParser.DIVIDE:
            this.state = 799;
            _la = this._input.LA(1);
            if(_la===SparqlParser.DISTINCT) {
                this.state = 798;
                this.match(SparqlParser.DISTINCT);
            }

            this.state = 801;
            this.expressionList();
            break;
        case SparqlParser.CLOSE_BRACE:
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 805;
        this.match(SparqlParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitExpressionList(this);
	}
};




SparqlParser.ExpressionListContext = ExpressionListContext;

SparqlParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, SparqlParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 807;
        this.expression(0);
        this.state = 812;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.COMMA) {
            this.state = 808;
            this.match(SparqlParser.COMMA);
            this.state = 809;
            this.expression(0);
            this.state = 814;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructTemplateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_constructTemplate;
    return this;
}

ConstructTemplateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructTemplateContext.prototype.constructor = ConstructTemplateContext;

ConstructTemplateContext.prototype.constructTriples = function() {
    return this.getTypedRuleContext(ConstructTriplesContext,0);
};

ConstructTemplateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterConstructTemplate(this);
	}
};

ConstructTemplateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitConstructTemplate(this);
	}
};




SparqlParser.ConstructTemplateContext = ConstructTemplateContext;

SparqlParser.prototype.constructTemplate = function() {

    var localctx = new ConstructTemplateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, SparqlParser.RULE_constructTemplate);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 815;
        this.match(SparqlParser.OPEN_CURLY_BRACE);
        this.state = 817;
        _la = this._input.LA(1);
        if(_la===SparqlParser.TRUE || _la===SparqlParser.FALSE || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.BLANK_NODE_LABEL - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)) | (1 << (SparqlParser.INTEGER - 115)) | (1 << (SparqlParser.DECIMAL - 115)) | (1 << (SparqlParser.DOUBLE - 115)) | (1 << (SparqlParser.INTEGER_POSITIVE - 115)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 115)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 115)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 115)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 115)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 115)) | (1 << (SparqlParser.STRING_LITERAL1 - 115)) | (1 << (SparqlParser.STRING_LITERAL2 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 115)) | (1 << (SparqlParser.OPEN_BRACE - 115)))) !== 0) || _la===SparqlParser.OPEN_SQUARE_BRACKET) {
            this.state = 816;
            this.constructTriples();
        }

        this.state = 819;
        this.match(SparqlParser.CLOSE_CURLY_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConstructTriplesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_constructTriples;
    return this;
}

ConstructTriplesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConstructTriplesContext.prototype.constructor = ConstructTriplesContext;

ConstructTriplesContext.prototype.triplesSameSubject = function() {
    return this.getTypedRuleContext(TriplesSameSubjectContext,0);
};

ConstructTriplesContext.prototype.constructTriples = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ConstructTriplesContext);
    } else {
        return this.getTypedRuleContext(ConstructTriplesContext,i);
    }
};

ConstructTriplesContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterConstructTriples(this);
	}
};

ConstructTriplesContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitConstructTriples(this);
	}
};




SparqlParser.ConstructTriplesContext = ConstructTriplesContext;

SparqlParser.prototype.constructTriples = function() {

    var localctx = new ConstructTriplesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, SparqlParser.RULE_constructTriples);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 821;
        this.triplesSameSubject();
        this.state = 828;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 822;
                this.match(SparqlParser.DOT);
                this.state = 824;
                _la = this._input.LA(1);
                if(_la===SparqlParser.TRUE || _la===SparqlParser.FALSE || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.BLANK_NODE_LABEL - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)) | (1 << (SparqlParser.INTEGER - 115)) | (1 << (SparqlParser.DECIMAL - 115)) | (1 << (SparqlParser.DOUBLE - 115)) | (1 << (SparqlParser.INTEGER_POSITIVE - 115)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 115)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 115)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 115)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 115)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 115)) | (1 << (SparqlParser.STRING_LITERAL1 - 115)) | (1 << (SparqlParser.STRING_LITERAL2 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 115)) | (1 << (SparqlParser.OPEN_BRACE - 115)))) !== 0) || _la===SparqlParser.OPEN_SQUARE_BRACKET) {
                    this.state = 823;
                    this.constructTriples();
                }
         
            }
            this.state = 830;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriplesSameSubjectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_triplesSameSubject;
    return this;
}

TriplesSameSubjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriplesSameSubjectContext.prototype.constructor = TriplesSameSubjectContext;

TriplesSameSubjectContext.prototype.varOrTerm = function() {
    return this.getTypedRuleContext(VarOrTermContext,0);
};

TriplesSameSubjectContext.prototype.propertyListNotEmpty = function() {
    return this.getTypedRuleContext(PropertyListNotEmptyContext,0);
};

TriplesSameSubjectContext.prototype.triplesNode = function() {
    return this.getTypedRuleContext(TriplesNodeContext,0);
};

TriplesSameSubjectContext.prototype.propertyList = function() {
    return this.getTypedRuleContext(PropertyListContext,0);
};

TriplesSameSubjectContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterTriplesSameSubject(this);
	}
};

TriplesSameSubjectContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitTriplesSameSubject(this);
	}
};




SparqlParser.TriplesSameSubjectContext = TriplesSameSubjectContext;

SparqlParser.prototype.triplesSameSubject = function() {

    var localctx = new TriplesSameSubjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, SparqlParser.RULE_triplesSameSubject);
    try {
        this.state = 837;
        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 831;
            this.varOrTerm();
            this.state = 832;
            this.propertyListNotEmpty();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 834;
            this.triplesNode();
            this.state = 835;
            this.propertyList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_propertyList;
    return this;
}

PropertyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyListContext.prototype.constructor = PropertyListContext;

PropertyListContext.prototype.propertyListNotEmpty = function() {
    return this.getTypedRuleContext(PropertyListNotEmptyContext,0);
};

PropertyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPropertyList(this);
	}
};

PropertyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPropertyList(this);
	}
};




SparqlParser.PropertyListContext = PropertyListContext;

SparqlParser.prototype.propertyList = function() {

    var localctx = new PropertyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, SparqlParser.RULE_propertyList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 840;
        _la = this._input.LA(1);
        if(_la===SparqlParser.A || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)))) !== 0)) {
            this.state = 839;
            this.propertyListNotEmpty();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyListNotEmptyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_propertyListNotEmpty;
    return this;
}

PropertyListNotEmptyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyListNotEmptyContext.prototype.constructor = PropertyListNotEmptyContext;

PropertyListNotEmptyContext.prototype.verb = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VerbContext);
    } else {
        return this.getTypedRuleContext(VerbContext,i);
    }
};

PropertyListNotEmptyContext.prototype.objectList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ObjectListContext);
    } else {
        return this.getTypedRuleContext(ObjectListContext,i);
    }
};

PropertyListNotEmptyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPropertyListNotEmpty(this);
	}
};

PropertyListNotEmptyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPropertyListNotEmpty(this);
	}
};




SparqlParser.PropertyListNotEmptyContext = PropertyListNotEmptyContext;

SparqlParser.prototype.propertyListNotEmpty = function() {

    var localctx = new PropertyListNotEmptyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, SparqlParser.RULE_propertyListNotEmpty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 842;
        this.verb();
        this.state = 843;
        this.objectList();
        this.state = 852;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.SEMICOLON) {
            this.state = 844;
            this.match(SparqlParser.SEMICOLON);
            this.state = 848;
            _la = this._input.LA(1);
            if(_la===SparqlParser.A || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)))) !== 0)) {
                this.state = 845;
                this.verb();
                this.state = 846;
                this.objectList();
            }

            this.state = 854;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VerbContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_verb;
    return this;
}

VerbContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VerbContext.prototype.constructor = VerbContext;

VerbContext.prototype.varOrIRI = function() {
    return this.getTypedRuleContext(VarOrIRIContext,0);
};

VerbContext.prototype.A = function() {
    return this.getToken(SparqlParser.A, 0);
};

VerbContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterVerb(this);
	}
};

VerbContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitVerb(this);
	}
};




SparqlParser.VerbContext = VerbContext;

SparqlParser.prototype.verb = function() {

    var localctx = new VerbContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, SparqlParser.RULE_verb);
    try {
        this.state = 857;
        switch(this._input.LA(1)) {
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
        case SparqlParser.VAR1:
        case SparqlParser.VAR2:
            this.enterOuterAlt(localctx, 1);
            this.state = 855;
            this.varOrIRI();
            break;
        case SparqlParser.A:
            this.enterOuterAlt(localctx, 2);
            this.state = 856;
            this.match(SparqlParser.A);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_objectList;
    return this;
}

ObjectListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectListContext.prototype.constructor = ObjectListContext;

ObjectListContext.prototype.object = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ObjectContext);
    } else {
        return this.getTypedRuleContext(ObjectContext,i);
    }
};

ObjectListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterObjectList(this);
	}
};

ObjectListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitObjectList(this);
	}
};




SparqlParser.ObjectListContext = ObjectListContext;

SparqlParser.prototype.objectList = function() {

    var localctx = new ObjectListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, SparqlParser.RULE_objectList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 859;
        this.object();
        this.state = 864;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.COMMA) {
            this.state = 860;
            this.match(SparqlParser.COMMA);
            this.state = 861;
            this.object();
            this.state = 866;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_object;
    return this;
}

ObjectContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectContext.prototype.constructor = ObjectContext;

ObjectContext.prototype.graphNode = function() {
    return this.getTypedRuleContext(GraphNodeContext,0);
};

ObjectContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterObject(this);
	}
};

ObjectContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitObject(this);
	}
};




SparqlParser.ObjectContext = ObjectContext;

SparqlParser.prototype.object = function() {

    var localctx = new ObjectContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, SparqlParser.RULE_object);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 867;
        this.graphNode();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriplesSameSubjectPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_triplesSameSubjectPath;
    return this;
}

TriplesSameSubjectPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriplesSameSubjectPathContext.prototype.constructor = TriplesSameSubjectPathContext;

TriplesSameSubjectPathContext.prototype.varOrTerm = function() {
    return this.getTypedRuleContext(VarOrTermContext,0);
};

TriplesSameSubjectPathContext.prototype.propertyListPathNotEmpty = function() {
    return this.getTypedRuleContext(PropertyListPathNotEmptyContext,0);
};

TriplesSameSubjectPathContext.prototype.triplesNodePath = function() {
    return this.getTypedRuleContext(TriplesNodePathContext,0);
};

TriplesSameSubjectPathContext.prototype.propertyListPath = function() {
    return this.getTypedRuleContext(PropertyListPathContext,0);
};

TriplesSameSubjectPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterTriplesSameSubjectPath(this);
	}
};

TriplesSameSubjectPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitTriplesSameSubjectPath(this);
	}
};




SparqlParser.TriplesSameSubjectPathContext = TriplesSameSubjectPathContext;

SparqlParser.prototype.triplesSameSubjectPath = function() {

    var localctx = new TriplesSameSubjectPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, SparqlParser.RULE_triplesSameSubjectPath);
    try {
        this.state = 875;
        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 869;
            this.varOrTerm();
            this.state = 870;
            this.propertyListPathNotEmpty();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 872;
            this.triplesNodePath();
            this.state = 873;
            this.propertyListPath();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyListPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_propertyListPath;
    return this;
}

PropertyListPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyListPathContext.prototype.constructor = PropertyListPathContext;

PropertyListPathContext.prototype.propertyListPathNotEmpty = function() {
    return this.getTypedRuleContext(PropertyListPathNotEmptyContext,0);
};

PropertyListPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPropertyListPath(this);
	}
};

PropertyListPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPropertyListPath(this);
	}
};




SparqlParser.PropertyListPathContext = PropertyListPathContext;

SparqlParser.prototype.propertyListPath = function() {

    var localctx = new PropertyListPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, SparqlParser.RULE_propertyListPath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 878;
        _la = this._input.LA(1);
        if(_la===SparqlParser.A || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)) | (1 << (SparqlParser.INVERSE - 115)) | (1 << (SparqlParser.OPEN_BRACE - 115)))) !== 0) || _la===SparqlParser.NEGATION) {
            this.state = 877;
            this.propertyListPathNotEmpty();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyListPathNotEmptyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_propertyListPathNotEmpty;
    return this;
}

PropertyListPathNotEmptyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyListPathNotEmptyContext.prototype.constructor = PropertyListPathNotEmptyContext;

PropertyListPathNotEmptyContext.prototype.objectListPath = function() {
    return this.getTypedRuleContext(ObjectListPathContext,0);
};

PropertyListPathNotEmptyContext.prototype.verbPath = function() {
    return this.getTypedRuleContext(VerbPathContext,0);
};

PropertyListPathNotEmptyContext.prototype.verbSimple = function() {
    return this.getTypedRuleContext(VerbSimpleContext,0);
};

PropertyListPathNotEmptyContext.prototype.propertyListPathNotEmptyList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyListPathNotEmptyListContext);
    } else {
        return this.getTypedRuleContext(PropertyListPathNotEmptyListContext,i);
    }
};

PropertyListPathNotEmptyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPropertyListPathNotEmpty(this);
	}
};

PropertyListPathNotEmptyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPropertyListPathNotEmpty(this);
	}
};




SparqlParser.PropertyListPathNotEmptyContext = PropertyListPathNotEmptyContext;

SparqlParser.prototype.propertyListPathNotEmpty = function() {

    var localctx = new PropertyListPathNotEmptyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, SparqlParser.RULE_propertyListPathNotEmpty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 882;
        switch(this._input.LA(1)) {
        case SparqlParser.A:
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
        case SparqlParser.INVERSE:
        case SparqlParser.OPEN_BRACE:
        case SparqlParser.NEGATION:
            this.state = 880;
            this.verbPath();
            break;
        case SparqlParser.VAR1:
        case SparqlParser.VAR2:
            this.state = 881;
            this.verbSimple();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 884;
        this.objectListPath();
        this.state = 891;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.SEMICOLON) {
            this.state = 885;
            this.match(SparqlParser.SEMICOLON);
            this.state = 887;
            _la = this._input.LA(1);
            if(_la===SparqlParser.A || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)) | (1 << (SparqlParser.INVERSE - 115)) | (1 << (SparqlParser.OPEN_BRACE - 115)))) !== 0) || _la===SparqlParser.NEGATION) {
                this.state = 886;
                this.propertyListPathNotEmptyList();
            }

            this.state = 893;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyListPathNotEmptyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_propertyListPathNotEmptyList;
    return this;
}

PropertyListPathNotEmptyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyListPathNotEmptyListContext.prototype.constructor = PropertyListPathNotEmptyListContext;

PropertyListPathNotEmptyListContext.prototype.objectList = function() {
    return this.getTypedRuleContext(ObjectListContext,0);
};

PropertyListPathNotEmptyListContext.prototype.verbPath = function() {
    return this.getTypedRuleContext(VerbPathContext,0);
};

PropertyListPathNotEmptyListContext.prototype.verbSimple = function() {
    return this.getTypedRuleContext(VerbSimpleContext,0);
};

PropertyListPathNotEmptyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPropertyListPathNotEmptyList(this);
	}
};

PropertyListPathNotEmptyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPropertyListPathNotEmptyList(this);
	}
};




SparqlParser.PropertyListPathNotEmptyListContext = PropertyListPathNotEmptyListContext;

SparqlParser.prototype.propertyListPathNotEmptyList = function() {

    var localctx = new PropertyListPathNotEmptyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, SparqlParser.RULE_propertyListPathNotEmptyList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 896;
        switch(this._input.LA(1)) {
        case SparqlParser.A:
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
        case SparqlParser.INVERSE:
        case SparqlParser.OPEN_BRACE:
        case SparqlParser.NEGATION:
            this.state = 894;
            this.verbPath();
            break;
        case SparqlParser.VAR1:
        case SparqlParser.VAR2:
            this.state = 895;
            this.verbSimple();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 898;
        this.objectList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VerbPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_verbPath;
    return this;
}

VerbPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VerbPathContext.prototype.constructor = VerbPathContext;

VerbPathContext.prototype.path = function() {
    return this.getTypedRuleContext(PathContext,0);
};

VerbPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterVerbPath(this);
	}
};

VerbPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitVerbPath(this);
	}
};




SparqlParser.VerbPathContext = VerbPathContext;

SparqlParser.prototype.verbPath = function() {

    var localctx = new VerbPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, SparqlParser.RULE_verbPath);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 900;
        this.path();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VerbSimpleContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_verbSimple;
    return this;
}

VerbSimpleContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VerbSimpleContext.prototype.constructor = VerbSimpleContext;

VerbSimpleContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

VerbSimpleContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterVerbSimple(this);
	}
};

VerbSimpleContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitVerbSimple(this);
	}
};




SparqlParser.VerbSimpleContext = VerbSimpleContext;

SparqlParser.prototype.verbSimple = function() {

    var localctx = new VerbSimpleContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, SparqlParser.RULE_verbSimple);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 902;
        this.var();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectListPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_objectListPath;
    return this;
}

ObjectListPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectListPathContext.prototype.constructor = ObjectListPathContext;

ObjectListPathContext.prototype.objectPath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ObjectPathContext);
    } else {
        return this.getTypedRuleContext(ObjectPathContext,i);
    }
};

ObjectListPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterObjectListPath(this);
	}
};

ObjectListPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitObjectListPath(this);
	}
};




SparqlParser.ObjectListPathContext = ObjectListPathContext;

SparqlParser.prototype.objectListPath = function() {

    var localctx = new ObjectListPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, SparqlParser.RULE_objectListPath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 904;
        this.objectPath();
        this.state = 909;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.COMMA) {
            this.state = 905;
            this.match(SparqlParser.COMMA);
            this.state = 906;
            this.objectPath();
            this.state = 911;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ObjectPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_objectPath;
    return this;
}

ObjectPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ObjectPathContext.prototype.constructor = ObjectPathContext;

ObjectPathContext.prototype.graphNodePath = function() {
    return this.getTypedRuleContext(GraphNodePathContext,0);
};

ObjectPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterObjectPath(this);
	}
};

ObjectPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitObjectPath(this);
	}
};




SparqlParser.ObjectPathContext = ObjectPathContext;

SparqlParser.prototype.objectPath = function() {

    var localctx = new ObjectPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, SparqlParser.RULE_objectPath);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 912;
        this.graphNodePath();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_path;
    return this;
}

PathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathContext.prototype.constructor = PathContext;

PathContext.prototype.pathAlternative = function() {
    return this.getTypedRuleContext(PathAlternativeContext,0);
};

PathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPath(this);
	}
};

PathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPath(this);
	}
};




SparqlParser.PathContext = PathContext;

SparqlParser.prototype.path = function() {

    var localctx = new PathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, SparqlParser.RULE_path);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 914;
        this.pathAlternative();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathAlternativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_pathAlternative;
    return this;
}

PathAlternativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathAlternativeContext.prototype.constructor = PathAlternativeContext;

PathAlternativeContext.prototype.pathSequence = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PathSequenceContext);
    } else {
        return this.getTypedRuleContext(PathSequenceContext,i);
    }
};

PathAlternativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPathAlternative(this);
	}
};

PathAlternativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPathAlternative(this);
	}
};




SparqlParser.PathAlternativeContext = PathAlternativeContext;

SparqlParser.prototype.pathAlternative = function() {

    var localctx = new PathAlternativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, SparqlParser.RULE_pathAlternative);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 916;
        this.pathSequence();
        this.state = 921;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.PIPE) {
            this.state = 917;
            this.match(SparqlParser.PIPE);
            this.state = 918;
            this.pathSequence();
            this.state = 923;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathSequenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_pathSequence;
    return this;
}

PathSequenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathSequenceContext.prototype.constructor = PathSequenceContext;

PathSequenceContext.prototype.pathEltOrInverse = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PathEltOrInverseContext);
    } else {
        return this.getTypedRuleContext(PathEltOrInverseContext,i);
    }
};

PathSequenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPathSequence(this);
	}
};

PathSequenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPathSequence(this);
	}
};




SparqlParser.PathSequenceContext = PathSequenceContext;

SparqlParser.prototype.pathSequence = function() {

    var localctx = new PathSequenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, SparqlParser.RULE_pathSequence);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 924;
        this.pathEltOrInverse();
        this.state = 929;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SparqlParser.DIVIDE) {
            this.state = 925;
            this.match(SparqlParser.DIVIDE);
            this.state = 926;
            this.pathEltOrInverse();
            this.state = 931;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathEltContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_pathElt;
    return this;
}

PathEltContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathEltContext.prototype.constructor = PathEltContext;

PathEltContext.prototype.pathPrimary = function() {
    return this.getTypedRuleContext(PathPrimaryContext,0);
};

PathEltContext.prototype.pathMod = function() {
    return this.getTypedRuleContext(PathModContext,0);
};

PathEltContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPathElt(this);
	}
};

PathEltContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPathElt(this);
	}
};




SparqlParser.PathEltContext = PathEltContext;

SparqlParser.prototype.pathElt = function() {

    var localctx = new PathEltContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, SparqlParser.RULE_pathElt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 932;
        this.pathPrimary();
        this.state = 934;
        _la = this._input.LA(1);
        if(((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (SparqlParser.PLUS_SIGN - 151)) | (1 << (SparqlParser.ASTERISK - 151)) | (1 << (SparqlParser.QUESTION_MARK - 151)))) !== 0)) {
            this.state = 933;
            this.pathMod();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathEltOrInverseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_pathEltOrInverse;
    return this;
}

PathEltOrInverseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathEltOrInverseContext.prototype.constructor = PathEltOrInverseContext;

PathEltOrInverseContext.prototype.pathElt = function() {
    return this.getTypedRuleContext(PathEltContext,0);
};

PathEltOrInverseContext.prototype.INVERSE = function() {
    return this.getToken(SparqlParser.INVERSE, 0);
};

PathEltOrInverseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPathEltOrInverse(this);
	}
};

PathEltOrInverseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPathEltOrInverse(this);
	}
};




SparqlParser.PathEltOrInverseContext = PathEltOrInverseContext;

SparqlParser.prototype.pathEltOrInverse = function() {

    var localctx = new PathEltOrInverseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, SparqlParser.RULE_pathEltOrInverse);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 937;
        _la = this._input.LA(1);
        if(_la===SparqlParser.INVERSE) {
            this.state = 936;
            this.match(SparqlParser.INVERSE);
        }

        this.state = 939;
        this.pathElt();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathModContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_pathMod;
    this.op = null; // Token
    return this;
}

PathModContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathModContext.prototype.constructor = PathModContext;


PathModContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPathMod(this);
	}
};

PathModContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPathMod(this);
	}
};




SparqlParser.PathModContext = PathModContext;

SparqlParser.prototype.pathMod = function() {

    var localctx = new PathModContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, SparqlParser.RULE_pathMod);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 941;
        localctx.op = this._input.LT(1);
        _la = this._input.LA(1);
        if(!(((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (SparqlParser.PLUS_SIGN - 151)) | (1 << (SparqlParser.ASTERISK - 151)) | (1 << (SparqlParser.QUESTION_MARK - 151)))) !== 0))) {
            localctx.op = this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathPrimaryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_pathPrimary;
    return this;
}

PathPrimaryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathPrimaryContext.prototype.constructor = PathPrimaryContext;

PathPrimaryContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

PathPrimaryContext.prototype.A = function() {
    return this.getToken(SparqlParser.A, 0);
};

PathPrimaryContext.prototype.pathNegatedPropertySet = function() {
    return this.getTypedRuleContext(PathNegatedPropertySetContext,0);
};

PathPrimaryContext.prototype.path = function() {
    return this.getTypedRuleContext(PathContext,0);
};

PathPrimaryContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPathPrimary(this);
	}
};

PathPrimaryContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPathPrimary(this);
	}
};




SparqlParser.PathPrimaryContext = PathPrimaryContext;

SparqlParser.prototype.pathPrimary = function() {

    var localctx = new PathPrimaryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, SparqlParser.RULE_pathPrimary);
    try {
        this.state = 951;
        switch(this._input.LA(1)) {
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
            this.enterOuterAlt(localctx, 1);
            this.state = 943;
            this.iri();
            break;
        case SparqlParser.A:
            this.enterOuterAlt(localctx, 2);
            this.state = 944;
            this.match(SparqlParser.A);
            break;
        case SparqlParser.NEGATION:
            this.enterOuterAlt(localctx, 3);
            this.state = 945;
            this.match(SparqlParser.NEGATION);
            this.state = 946;
            this.pathNegatedPropertySet();
            break;
        case SparqlParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 4);
            this.state = 947;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 948;
            this.path();
            this.state = 949;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathNegatedPropertySetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_pathNegatedPropertySet;
    return this;
}

PathNegatedPropertySetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathNegatedPropertySetContext.prototype.constructor = PathNegatedPropertySetContext;

PathNegatedPropertySetContext.prototype.pathOneInPropertySet = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PathOneInPropertySetContext);
    } else {
        return this.getTypedRuleContext(PathOneInPropertySetContext,i);
    }
};

PathNegatedPropertySetContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPathNegatedPropertySet(this);
	}
};

PathNegatedPropertySetContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPathNegatedPropertySet(this);
	}
};




SparqlParser.PathNegatedPropertySetContext = PathNegatedPropertySetContext;

SparqlParser.prototype.pathNegatedPropertySet = function() {

    var localctx = new PathNegatedPropertySetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, SparqlParser.RULE_pathNegatedPropertySet);
    var _la = 0; // Token type
    try {
        this.state = 966;
        switch(this._input.LA(1)) {
        case SparqlParser.A:
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
        case SparqlParser.INVERSE:
            this.enterOuterAlt(localctx, 1);
            this.state = 953;
            this.pathOneInPropertySet();
            break;
        case SparqlParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 2);
            this.state = 954;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 963;
            _la = this._input.LA(1);
            if(_la===SparqlParser.A || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.INVERSE - 115)))) !== 0)) {
                this.state = 955;
                this.pathOneInPropertySet();
                this.state = 960;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SparqlParser.PIPE) {
                    this.state = 956;
                    this.match(SparqlParser.PIPE);
                    this.state = 957;
                    this.pathOneInPropertySet();
                    this.state = 962;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 965;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PathOneInPropertySetContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_pathOneInPropertySet;
    return this;
}

PathOneInPropertySetContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PathOneInPropertySetContext.prototype.constructor = PathOneInPropertySetContext;

PathOneInPropertySetContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

PathOneInPropertySetContext.prototype.A = function() {
    return this.getToken(SparqlParser.A, 0);
};

PathOneInPropertySetContext.prototype.INVERSE = function() {
    return this.getToken(SparqlParser.INVERSE, 0);
};

PathOneInPropertySetContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPathOneInPropertySet(this);
	}
};

PathOneInPropertySetContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPathOneInPropertySet(this);
	}
};




SparqlParser.PathOneInPropertySetContext = PathOneInPropertySetContext;

SparqlParser.prototype.pathOneInPropertySet = function() {

    var localctx = new PathOneInPropertySetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, SparqlParser.RULE_pathOneInPropertySet);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 969;
        _la = this._input.LA(1);
        if(_la===SparqlParser.INVERSE) {
            this.state = 968;
            this.match(SparqlParser.INVERSE);
        }

        this.state = 973;
        switch(this._input.LA(1)) {
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
            this.state = 971;
            this.iri();
            break;
        case SparqlParser.A:
            this.state = 972;
            this.match(SparqlParser.A);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntegerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_integer;
    return this;
}

IntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerContext.prototype.constructor = IntegerContext;

IntegerContext.prototype.INTEGER = function() {
    return this.getToken(SparqlParser.INTEGER, 0);
};

IntegerContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterInteger(this);
	}
};

IntegerContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitInteger(this);
	}
};




SparqlParser.IntegerContext = IntegerContext;

SparqlParser.prototype.integer = function() {

    var localctx = new IntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, SparqlParser.RULE_integer);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 975;
        this.match(SparqlParser.INTEGER);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriplesNodeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_triplesNode;
    return this;
}

TriplesNodeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriplesNodeContext.prototype.constructor = TriplesNodeContext;

TriplesNodeContext.prototype.collection = function() {
    return this.getTypedRuleContext(CollectionContext,0);
};

TriplesNodeContext.prototype.blankNodePropertyList = function() {
    return this.getTypedRuleContext(BlankNodePropertyListContext,0);
};

TriplesNodeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterTriplesNode(this);
	}
};

TriplesNodeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitTriplesNode(this);
	}
};




SparqlParser.TriplesNodeContext = TriplesNodeContext;

SparqlParser.prototype.triplesNode = function() {

    var localctx = new TriplesNodeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, SparqlParser.RULE_triplesNode);
    try {
        this.state = 979;
        switch(this._input.LA(1)) {
        case SparqlParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 977;
            this.collection();
            break;
        case SparqlParser.OPEN_SQUARE_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 978;
            this.blankNodePropertyList();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlankNodePropertyListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_blankNodePropertyList;
    return this;
}

BlankNodePropertyListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlankNodePropertyListContext.prototype.constructor = BlankNodePropertyListContext;

BlankNodePropertyListContext.prototype.propertyListNotEmpty = function() {
    return this.getTypedRuleContext(PropertyListNotEmptyContext,0);
};

BlankNodePropertyListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterBlankNodePropertyList(this);
	}
};

BlankNodePropertyListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitBlankNodePropertyList(this);
	}
};




SparqlParser.BlankNodePropertyListContext = BlankNodePropertyListContext;

SparqlParser.prototype.blankNodePropertyList = function() {

    var localctx = new BlankNodePropertyListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, SparqlParser.RULE_blankNodePropertyList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 981;
        this.match(SparqlParser.OPEN_SQUARE_BRACKET);
        this.state = 982;
        this.propertyListNotEmpty();
        this.state = 983;
        this.match(SparqlParser.CLOSE_SQUARE_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TriplesNodePathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_triplesNodePath;
    return this;
}

TriplesNodePathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TriplesNodePathContext.prototype.constructor = TriplesNodePathContext;

TriplesNodePathContext.prototype.collectionPath = function() {
    return this.getTypedRuleContext(CollectionPathContext,0);
};

TriplesNodePathContext.prototype.blankNodePropertyListPath = function() {
    return this.getTypedRuleContext(BlankNodePropertyListPathContext,0);
};

TriplesNodePathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterTriplesNodePath(this);
	}
};

TriplesNodePathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitTriplesNodePath(this);
	}
};




SparqlParser.TriplesNodePathContext = TriplesNodePathContext;

SparqlParser.prototype.triplesNodePath = function() {

    var localctx = new TriplesNodePathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, SparqlParser.RULE_triplesNodePath);
    try {
        this.state = 987;
        switch(this._input.LA(1)) {
        case SparqlParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 985;
            this.collectionPath();
            break;
        case SparqlParser.OPEN_SQUARE_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 986;
            this.blankNodePropertyListPath();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlankNodePropertyListPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_blankNodePropertyListPath;
    return this;
}

BlankNodePropertyListPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlankNodePropertyListPathContext.prototype.constructor = BlankNodePropertyListPathContext;

BlankNodePropertyListPathContext.prototype.propertyListPathNotEmpty = function() {
    return this.getTypedRuleContext(PropertyListPathNotEmptyContext,0);
};

BlankNodePropertyListPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterBlankNodePropertyListPath(this);
	}
};

BlankNodePropertyListPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitBlankNodePropertyListPath(this);
	}
};




SparqlParser.BlankNodePropertyListPathContext = BlankNodePropertyListPathContext;

SparqlParser.prototype.blankNodePropertyListPath = function() {

    var localctx = new BlankNodePropertyListPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, SparqlParser.RULE_blankNodePropertyListPath);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 989;
        this.match(SparqlParser.OPEN_SQUARE_BRACKET);
        this.state = 990;
        this.propertyListPathNotEmpty();
        this.state = 991;
        this.match(SparqlParser.CLOSE_SQUARE_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CollectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_collection;
    return this;
}

CollectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollectionContext.prototype.constructor = CollectionContext;

CollectionContext.prototype.graphNode = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GraphNodeContext);
    } else {
        return this.getTypedRuleContext(GraphNodeContext,i);
    }
};

CollectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterCollection(this);
	}
};

CollectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitCollection(this);
	}
};




SparqlParser.CollectionContext = CollectionContext;

SparqlParser.prototype.collection = function() {

    var localctx = new CollectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, SparqlParser.RULE_collection);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 993;
        this.match(SparqlParser.OPEN_BRACE);
        this.state = 995; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 994;
            this.graphNode();
            this.state = 997; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SparqlParser.TRUE || _la===SparqlParser.FALSE || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.BLANK_NODE_LABEL - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)) | (1 << (SparqlParser.INTEGER - 115)) | (1 << (SparqlParser.DECIMAL - 115)) | (1 << (SparqlParser.DOUBLE - 115)) | (1 << (SparqlParser.INTEGER_POSITIVE - 115)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 115)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 115)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 115)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 115)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 115)) | (1 << (SparqlParser.STRING_LITERAL1 - 115)) | (1 << (SparqlParser.STRING_LITERAL2 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 115)) | (1 << (SparqlParser.OPEN_BRACE - 115)))) !== 0) || _la===SparqlParser.OPEN_SQUARE_BRACKET);
        this.state = 999;
        this.match(SparqlParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CollectionPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_collectionPath;
    return this;
}

CollectionPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollectionPathContext.prototype.constructor = CollectionPathContext;

CollectionPathContext.prototype.graphNodePath = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(GraphNodePathContext);
    } else {
        return this.getTypedRuleContext(GraphNodePathContext,i);
    }
};

CollectionPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterCollectionPath(this);
	}
};

CollectionPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitCollectionPath(this);
	}
};




SparqlParser.CollectionPathContext = CollectionPathContext;

SparqlParser.prototype.collectionPath = function() {

    var localctx = new CollectionPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, SparqlParser.RULE_collectionPath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1001;
        this.match(SparqlParser.OPEN_BRACE);
        this.state = 1003; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 1002;
            this.graphNodePath();
            this.state = 1005; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===SparqlParser.TRUE || _la===SparqlParser.FALSE || ((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (SparqlParser.IRIREF - 115)) | (1 << (SparqlParser.PNAME_NS - 115)) | (1 << (SparqlParser.PNAME_LN - 115)) | (1 << (SparqlParser.BLANK_NODE_LABEL - 115)) | (1 << (SparqlParser.VAR1 - 115)) | (1 << (SparqlParser.VAR2 - 115)) | (1 << (SparqlParser.INTEGER - 115)) | (1 << (SparqlParser.DECIMAL - 115)) | (1 << (SparqlParser.DOUBLE - 115)) | (1 << (SparqlParser.INTEGER_POSITIVE - 115)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 115)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 115)) | (1 << (SparqlParser.INTEGER_NEGATIVE - 115)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 115)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 115)) | (1 << (SparqlParser.STRING_LITERAL1 - 115)) | (1 << (SparqlParser.STRING_LITERAL2 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 115)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 115)) | (1 << (SparqlParser.OPEN_BRACE - 115)))) !== 0) || _la===SparqlParser.OPEN_SQUARE_BRACKET);
        this.state = 1007;
        this.match(SparqlParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphNodeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_graphNode;
    return this;
}

GraphNodeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphNodeContext.prototype.constructor = GraphNodeContext;

GraphNodeContext.prototype.varOrTerm = function() {
    return this.getTypedRuleContext(VarOrTermContext,0);
};

GraphNodeContext.prototype.triplesNode = function() {
    return this.getTypedRuleContext(TriplesNodeContext,0);
};

GraphNodeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterGraphNode(this);
	}
};

GraphNodeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitGraphNode(this);
	}
};




SparqlParser.GraphNodeContext = GraphNodeContext;

SparqlParser.prototype.graphNode = function() {

    var localctx = new GraphNodeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, SparqlParser.RULE_graphNode);
    try {
        this.state = 1011;
        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1009;
            this.varOrTerm();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1010;
            this.triplesNode();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphNodePathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_graphNodePath;
    return this;
}

GraphNodePathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphNodePathContext.prototype.constructor = GraphNodePathContext;

GraphNodePathContext.prototype.varOrTerm = function() {
    return this.getTypedRuleContext(VarOrTermContext,0);
};

GraphNodePathContext.prototype.triplesNodePath = function() {
    return this.getTypedRuleContext(TriplesNodePathContext,0);
};

GraphNodePathContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterGraphNodePath(this);
	}
};

GraphNodePathContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitGraphNodePath(this);
	}
};




SparqlParser.GraphNodePathContext = GraphNodePathContext;

SparqlParser.prototype.graphNodePath = function() {

    var localctx = new GraphNodePathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, SparqlParser.RULE_graphNodePath);
    try {
        this.state = 1015;
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1013;
            this.varOrTerm();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1014;
            this.triplesNodePath();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarOrTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_varOrTerm;
    return this;
}

VarOrTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarOrTermContext.prototype.constructor = VarOrTermContext;

VarOrTermContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

VarOrTermContext.prototype.graphTerm = function() {
    return this.getTypedRuleContext(GraphTermContext,0);
};

VarOrTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterVarOrTerm(this);
	}
};

VarOrTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitVarOrTerm(this);
	}
};




SparqlParser.VarOrTermContext = VarOrTermContext;

SparqlParser.prototype.varOrTerm = function() {

    var localctx = new VarOrTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, SparqlParser.RULE_varOrTerm);
    try {
        this.state = 1019;
        switch(this._input.LA(1)) {
        case SparqlParser.VAR1:
        case SparqlParser.VAR2:
            this.enterOuterAlt(localctx, 1);
            this.state = 1017;
            this.var();
            break;
        case SparqlParser.TRUE:
        case SparqlParser.FALSE:
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
        case SparqlParser.BLANK_NODE_LABEL:
        case SparqlParser.INTEGER:
        case SparqlParser.DECIMAL:
        case SparqlParser.DOUBLE:
        case SparqlParser.INTEGER_POSITIVE:
        case SparqlParser.DECIMAL_POSITIVE:
        case SparqlParser.DOUBLE_POSITIVE:
        case SparqlParser.INTEGER_NEGATIVE:
        case SparqlParser.DECIMAL_NEGATIVE:
        case SparqlParser.DOUBLE_NEGATIVE:
        case SparqlParser.STRING_LITERAL1:
        case SparqlParser.STRING_LITERAL2:
        case SparqlParser.STRING_LITERAL_LONG1:
        case SparqlParser.STRING_LITERAL_LONG2:
        case SparqlParser.OPEN_BRACE:
        case SparqlParser.OPEN_SQUARE_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 1018;
            this.graphTerm();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarOrIRIContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_varOrIRI;
    return this;
}

VarOrIRIContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarOrIRIContext.prototype.constructor = VarOrIRIContext;

VarOrIRIContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

VarOrIRIContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

VarOrIRIContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterVarOrIRI(this);
	}
};

VarOrIRIContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitVarOrIRI(this);
	}
};




SparqlParser.VarOrIRIContext = VarOrIRIContext;

SparqlParser.prototype.varOrIRI = function() {

    var localctx = new VarOrIRIContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, SparqlParser.RULE_varOrIRI);
    try {
        this.state = 1023;
        switch(this._input.LA(1)) {
        case SparqlParser.VAR1:
        case SparqlParser.VAR2:
            this.enterOuterAlt(localctx, 1);
            this.state = 1021;
            this.var();
            break;
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1022;
            this.iri();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VarContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_var;
    return this;
}

VarContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarContext.prototype.constructor = VarContext;

VarContext.prototype.VAR1 = function() {
    return this.getToken(SparqlParser.VAR1, 0);
};

VarContext.prototype.VAR2 = function() {
    return this.getToken(SparqlParser.VAR2, 0);
};

VarContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterVar(this);
	}
};

VarContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitVar(this);
	}
};




SparqlParser.VarContext = VarContext;

SparqlParser.prototype.var = function() {

    var localctx = new VarContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, SparqlParser.RULE_var);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1025;
        _la = this._input.LA(1);
        if(!(_la===SparqlParser.VAR1 || _la===SparqlParser.VAR2)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function GraphTermContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_graphTerm;
    return this;
}

GraphTermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GraphTermContext.prototype.constructor = GraphTermContext;

GraphTermContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

GraphTermContext.prototype.rdfLiteral = function() {
    return this.getTypedRuleContext(RdfLiteralContext,0);
};

GraphTermContext.prototype.numericLiteral = function() {
    return this.getTypedRuleContext(NumericLiteralContext,0);
};

GraphTermContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

GraphTermContext.prototype.blankNode = function() {
    return this.getTypedRuleContext(BlankNodeContext,0);
};

GraphTermContext.prototype.nil = function() {
    return this.getTypedRuleContext(NilContext,0);
};

GraphTermContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterGraphTerm(this);
	}
};

GraphTermContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitGraphTerm(this);
	}
};




SparqlParser.GraphTermContext = GraphTermContext;

SparqlParser.prototype.graphTerm = function() {

    var localctx = new GraphTermContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, SparqlParser.RULE_graphTerm);
    try {
        this.state = 1033;
        switch(this._input.LA(1)) {
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
            this.enterOuterAlt(localctx, 1);
            this.state = 1027;
            this.iri();
            break;
        case SparqlParser.STRING_LITERAL1:
        case SparqlParser.STRING_LITERAL2:
        case SparqlParser.STRING_LITERAL_LONG1:
        case SparqlParser.STRING_LITERAL_LONG2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1028;
            this.rdfLiteral();
            break;
        case SparqlParser.INTEGER:
        case SparqlParser.DECIMAL:
        case SparqlParser.DOUBLE:
        case SparqlParser.INTEGER_POSITIVE:
        case SparqlParser.DECIMAL_POSITIVE:
        case SparqlParser.DOUBLE_POSITIVE:
        case SparqlParser.INTEGER_NEGATIVE:
        case SparqlParser.DECIMAL_NEGATIVE:
        case SparqlParser.DOUBLE_NEGATIVE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1029;
            this.numericLiteral();
            break;
        case SparqlParser.TRUE:
        case SparqlParser.FALSE:
            this.enterOuterAlt(localctx, 4);
            this.state = 1030;
            this.booleanLiteral();
            break;
        case SparqlParser.BLANK_NODE_LABEL:
        case SparqlParser.OPEN_SQUARE_BRACKET:
            this.enterOuterAlt(localctx, 5);
            this.state = 1031;
            this.blankNode();
            break;
        case SparqlParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 6);
            this.state = 1032;
            this.nil();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NilContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_nil;
    return this;
}

NilContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NilContext.prototype.constructor = NilContext;


NilContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterNil(this);
	}
};

NilContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitNil(this);
	}
};




SparqlParser.NilContext = NilContext;

SparqlParser.prototype.nil = function() {

    var localctx = new NilContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, SparqlParser.RULE_nil);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1035;
        this.match(SparqlParser.OPEN_BRACE);
        this.state = 1036;
        this.match(SparqlParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;


 
ExpressionContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function UnaryMultiplicativeExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryMultiplicativeExpressionContext.prototype = Object.create(ExpressionContext.prototype);
UnaryMultiplicativeExpressionContext.prototype.constructor = UnaryMultiplicativeExpressionContext;

SparqlParser.UnaryMultiplicativeExpressionContext = UnaryMultiplicativeExpressionContext;

UnaryMultiplicativeExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
UnaryMultiplicativeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterUnaryMultiplicativeExpression(this);
	}
};

UnaryMultiplicativeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitUnaryMultiplicativeExpression(this);
	}
};


function RelationalSetExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationalSetExpressionContext.prototype = Object.create(ExpressionContext.prototype);
RelationalSetExpressionContext.prototype.constructor = RelationalSetExpressionContext;

SparqlParser.RelationalSetExpressionContext = RelationalSetExpressionContext;

RelationalSetExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

RelationalSetExpressionContext.prototype.IN = function() {
    return this.getToken(SparqlParser.IN, 0);
};

RelationalSetExpressionContext.prototype.NOT = function() {
    return this.getToken(SparqlParser.NOT, 0);
};

RelationalSetExpressionContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};
RelationalSetExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterRelationalSetExpression(this);
	}
};

RelationalSetExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitRelationalSetExpression(this);
	}
};


function UnaryAdditiveExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryAdditiveExpressionContext.prototype = Object.create(ExpressionContext.prototype);
UnaryAdditiveExpressionContext.prototype.constructor = UnaryAdditiveExpressionContext;

SparqlParser.UnaryAdditiveExpressionContext = UnaryAdditiveExpressionContext;

UnaryAdditiveExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
UnaryAdditiveExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterUnaryAdditiveExpression(this);
	}
};

UnaryAdditiveExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitUnaryAdditiveExpression(this);
	}
};


function BaseExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

BaseExpressionContext.prototype = Object.create(ExpressionContext.prototype);
BaseExpressionContext.prototype.constructor = BaseExpressionContext;

SparqlParser.BaseExpressionContext = BaseExpressionContext;

BaseExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};
BaseExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterBaseExpression(this);
	}
};

BaseExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitBaseExpression(this);
	}
};


function RelationalExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

RelationalExpressionContext.prototype = Object.create(ExpressionContext.prototype);
RelationalExpressionContext.prototype.constructor = RelationalExpressionContext;

SparqlParser.RelationalExpressionContext = RelationalExpressionContext;

RelationalExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
RelationalExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterRelationalExpression(this);
	}
};

RelationalExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitRelationalExpression(this);
	}
};


function ConditionalAndExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConditionalAndExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ConditionalAndExpressionContext.prototype.constructor = ConditionalAndExpressionContext;

SparqlParser.ConditionalAndExpressionContext = ConditionalAndExpressionContext;

ConditionalAndExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ConditionalAndExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterConditionalAndExpression(this);
	}
};

ConditionalAndExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitConditionalAndExpression(this);
	}
};


function ConditionalOrExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ConditionalOrExpressionContext.prototype = Object.create(ExpressionContext.prototype);
ConditionalOrExpressionContext.prototype.constructor = ConditionalOrExpressionContext;

SparqlParser.ConditionalOrExpressionContext = ConditionalOrExpressionContext;

ConditionalOrExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
ConditionalOrExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterConditionalOrExpression(this);
	}
};

ConditionalOrExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitConditionalOrExpression(this);
	}
};


function AdditiveExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AdditiveExpressionContext.prototype = Object.create(ExpressionContext.prototype);
AdditiveExpressionContext.prototype.constructor = AdditiveExpressionContext;

SparqlParser.AdditiveExpressionContext = AdditiveExpressionContext;

AdditiveExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
AdditiveExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterAdditiveExpression(this);
	}
};

AdditiveExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitAdditiveExpression(this);
	}
};


function UnaryNegationExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnaryNegationExpressionContext.prototype = Object.create(ExpressionContext.prototype);
UnaryNegationExpressionContext.prototype.constructor = UnaryNegationExpressionContext;

SparqlParser.UnaryNegationExpressionContext = UnaryNegationExpressionContext;

UnaryNegationExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};
UnaryNegationExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterUnaryNegationExpression(this);
	}
};

UnaryNegationExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitUnaryNegationExpression(this);
	}
};


function UnarySignedLiteralExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

UnarySignedLiteralExpressionContext.prototype = Object.create(ExpressionContext.prototype);
UnarySignedLiteralExpressionContext.prototype.constructor = UnarySignedLiteralExpressionContext;

SparqlParser.UnarySignedLiteralExpressionContext = UnarySignedLiteralExpressionContext;

UnarySignedLiteralExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

UnarySignedLiteralExpressionContext.prototype.unaryLiteralExpression = function() {
    return this.getTypedRuleContext(UnaryLiteralExpressionContext,0);
};
UnarySignedLiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterUnarySignedLiteralExpression(this);
	}
};

UnarySignedLiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitUnarySignedLiteralExpression(this);
	}
};


function MultiplicativeExpressionContext(parser, ctx) {
	ExpressionContext.call(this, parser);
    this.op = null; // Token;
    ExpressionContext.prototype.copyFrom.call(this, ctx);
    return this;
}

MultiplicativeExpressionContext.prototype = Object.create(ExpressionContext.prototype);
MultiplicativeExpressionContext.prototype.constructor = MultiplicativeExpressionContext;

SparqlParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;

MultiplicativeExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};
MultiplicativeExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterMultiplicativeExpression(this);
	}
};

MultiplicativeExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitMultiplicativeExpression(this);
	}
};



SparqlParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 220;
    this.enterRecursionRule(localctx, 220, SparqlParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1046;
        switch(this._input.LA(1)) {
        case SparqlParser.ASTERISK:
        case SparqlParser.DIVIDE:
            localctx = new UnaryMultiplicativeExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1039;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SparqlParser.ASTERISK || _la===SparqlParser.DIVIDE)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1040;
            this.expression(10);
            break;
        case SparqlParser.PLUS_SIGN:
        case SparqlParser.MINUS_SIGN:
            localctx = new UnaryAdditiveExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1041;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SparqlParser.PLUS_SIGN || _la===SparqlParser.MINUS_SIGN)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1042;
            this.expression(9);
            break;
        case SparqlParser.NEGATION:
            localctx = new UnaryNegationExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1043;
            this.match(SparqlParser.NEGATION);
            this.state = 1044;
            this.expression(8);
            break;
        case SparqlParser.STR:
        case SparqlParser.LANG:
        case SparqlParser.LANGMATCHES:
        case SparqlParser.DATATYPE:
        case SparqlParser.BOUND:
        case SparqlParser.SAMETERM:
        case SparqlParser.ISIRI:
        case SparqlParser.ISURI:
        case SparqlParser.ISBLANK:
        case SparqlParser.ISLITERAL:
        case SparqlParser.REGEX:
        case SparqlParser.SUBSTR:
        case SparqlParser.TRUE:
        case SparqlParser.FALSE:
        case SparqlParser.IRI:
        case SparqlParser.URI:
        case SparqlParser.BNODE:
        case SparqlParser.RAND:
        case SparqlParser.ABS:
        case SparqlParser.CEIL:
        case SparqlParser.FLOOR:
        case SparqlParser.ROUND:
        case SparqlParser.CONCAT:
        case SparqlParser.STRLEN:
        case SparqlParser.UCASE:
        case SparqlParser.LCASE:
        case SparqlParser.ENCODE_FOR_URI:
        case SparqlParser.CONTAINS:
        case SparqlParser.STRSTARTS:
        case SparqlParser.STRENDS:
        case SparqlParser.STRBEFORE:
        case SparqlParser.STRAFTER:
        case SparqlParser.REPLACE:
        case SparqlParser.YEAR:
        case SparqlParser.MONTH:
        case SparqlParser.DAY:
        case SparqlParser.HOURS:
        case SparqlParser.MINUTES:
        case SparqlParser.SECONDS:
        case SparqlParser.TIMEZONE:
        case SparqlParser.TZ:
        case SparqlParser.NOW:
        case SparqlParser.UUID:
        case SparqlParser.STRUUID:
        case SparqlParser.MD5:
        case SparqlParser.SHA1:
        case SparqlParser.SHA256:
        case SparqlParser.SHA384:
        case SparqlParser.SHA512:
        case SparqlParser.COALESCE:
        case SparqlParser.IF:
        case SparqlParser.STRLANG:
        case SparqlParser.STRDT:
        case SparqlParser.ISNUMERIC:
        case SparqlParser.COUNT:
        case SparqlParser.SUM:
        case SparqlParser.MIN:
        case SparqlParser.MAX:
        case SparqlParser.AVG:
        case SparqlParser.SAMPLE:
        case SparqlParser.GROUP_CONCAT:
        case SparqlParser.NOT:
        case SparqlParser.EXISTS:
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
        case SparqlParser.VAR1:
        case SparqlParser.VAR2:
        case SparqlParser.INTEGER:
        case SparqlParser.DECIMAL:
        case SparqlParser.DOUBLE:
        case SparqlParser.INTEGER_POSITIVE:
        case SparqlParser.DECIMAL_POSITIVE:
        case SparqlParser.DOUBLE_POSITIVE:
        case SparqlParser.INTEGER_NEGATIVE:
        case SparqlParser.DECIMAL_NEGATIVE:
        case SparqlParser.DOUBLE_NEGATIVE:
        case SparqlParser.STRING_LITERAL1:
        case SparqlParser.STRING_LITERAL2:
        case SparqlParser.STRING_LITERAL_LONG1:
        case SparqlParser.STRING_LITERAL_LONG2:
        case SparqlParser.OPEN_BRACE:
            localctx = new BaseExpressionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1045;
            this.primaryExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1077;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,121,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1075;
                var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new MultiplicativeExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SparqlParser.RULE_expression);
                    this.state = 1048;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 1049;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===SparqlParser.ASTERISK || _la===SparqlParser.DIVIDE)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1050;
                    this.expression(8);
                    break;

                case 2:
                    localctx = new AdditiveExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SparqlParser.RULE_expression);
                    this.state = 1051;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 1052;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(_la===SparqlParser.PLUS_SIGN || _la===SparqlParser.MINUS_SIGN)) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1053;
                    this.expression(7);
                    break;

                case 3:
                    localctx = new RelationalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SparqlParser.RULE_expression);
                    this.state = 1054;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1055;
                    localctx.op = this._input.LT(1);
                    _la = this._input.LA(1);
                    if(!(((((_la - 137)) & ~0x1f) == 0 && ((1 << (_la - 137)) & ((1 << (SparqlParser.LESS_EQUAL - 137)) | (1 << (SparqlParser.GREATER_EQUAL - 137)) | (1 << (SparqlParser.NOT_EQUAL - 137)) | (1 << (SparqlParser.EQUAL - 137)) | (1 << (SparqlParser.LESS - 137)) | (1 << (SparqlParser.GREATER - 137)))) !== 0))) {
                        localctx.op = this._errHandler.recoverInline(this);
                    }
                    else {
                        this.consume();
                    }
                    this.state = 1056;
                    this.expression(4);
                    break;

                case 4:
                    localctx = new UnarySignedLiteralExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SparqlParser.RULE_expression);
                    this.state = 1057;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 1058;
                    this.unaryLiteralExpression();
                    break;

                case 5:
                    localctx = new RelationalSetExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SparqlParser.RULE_expression);
                    this.state = 1059;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1061;
                    _la = this._input.LA(1);
                    if(_la===SparqlParser.NOT) {
                        this.state = 1060;
                        this.match(SparqlParser.NOT);
                    }

                    this.state = 1063;
                    this.match(SparqlParser.IN);
                    this.state = 1064;
                    this.match(SparqlParser.OPEN_BRACE);
                    this.state = 1066;
                    _la = this._input.LA(1);
                    if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (SparqlParser.STR - 25)) | (1 << (SparqlParser.LANG - 25)) | (1 << (SparqlParser.LANGMATCHES - 25)) | (1 << (SparqlParser.DATATYPE - 25)) | (1 << (SparqlParser.BOUND - 25)) | (1 << (SparqlParser.SAMETERM - 25)) | (1 << (SparqlParser.ISIRI - 25)) | (1 << (SparqlParser.ISURI - 25)) | (1 << (SparqlParser.ISBLANK - 25)) | (1 << (SparqlParser.ISLITERAL - 25)) | (1 << (SparqlParser.REGEX - 25)) | (1 << (SparqlParser.SUBSTR - 25)) | (1 << (SparqlParser.TRUE - 25)) | (1 << (SparqlParser.FALSE - 25)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SparqlParser.IRI - 64)) | (1 << (SparqlParser.URI - 64)) | (1 << (SparqlParser.BNODE - 64)) | (1 << (SparqlParser.RAND - 64)) | (1 << (SparqlParser.ABS - 64)) | (1 << (SparqlParser.CEIL - 64)) | (1 << (SparqlParser.FLOOR - 64)) | (1 << (SparqlParser.ROUND - 64)) | (1 << (SparqlParser.CONCAT - 64)) | (1 << (SparqlParser.STRLEN - 64)) | (1 << (SparqlParser.UCASE - 64)) | (1 << (SparqlParser.LCASE - 64)) | (1 << (SparqlParser.ENCODE_FOR_URI - 64)) | (1 << (SparqlParser.CONTAINS - 64)) | (1 << (SparqlParser.STRSTARTS - 64)) | (1 << (SparqlParser.STRENDS - 64)) | (1 << (SparqlParser.STRBEFORE - 64)) | (1 << (SparqlParser.STRAFTER - 64)) | (1 << (SparqlParser.REPLACE - 64)) | (1 << (SparqlParser.YEAR - 64)) | (1 << (SparqlParser.MONTH - 64)) | (1 << (SparqlParser.DAY - 64)) | (1 << (SparqlParser.HOURS - 64)) | (1 << (SparqlParser.MINUTES - 64)) | (1 << (SparqlParser.SECONDS - 64)) | (1 << (SparqlParser.TIMEZONE - 64)) | (1 << (SparqlParser.TZ - 64)) | (1 << (SparqlParser.NOW - 64)) | (1 << (SparqlParser.UUID - 64)) | (1 << (SparqlParser.STRUUID - 64)) | (1 << (SparqlParser.MD5 - 64)) | (1 << (SparqlParser.SHA1 - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SparqlParser.SHA256 - 96)) | (1 << (SparqlParser.SHA384 - 96)) | (1 << (SparqlParser.SHA512 - 96)) | (1 << (SparqlParser.COALESCE - 96)) | (1 << (SparqlParser.IF - 96)) | (1 << (SparqlParser.STRLANG - 96)) | (1 << (SparqlParser.STRDT - 96)) | (1 << (SparqlParser.ISNUMERIC - 96)) | (1 << (SparqlParser.COUNT - 96)) | (1 << (SparqlParser.SUM - 96)) | (1 << (SparqlParser.MIN - 96)) | (1 << (SparqlParser.MAX - 96)) | (1 << (SparqlParser.AVG - 96)) | (1 << (SparqlParser.SAMPLE - 96)) | (1 << (SparqlParser.GROUP_CONCAT - 96)) | (1 << (SparqlParser.NOT - 96)) | (1 << (SparqlParser.EXISTS - 96)) | (1 << (SparqlParser.IRIREF - 96)) | (1 << (SparqlParser.PNAME_NS - 96)) | (1 << (SparqlParser.PNAME_LN - 96)) | (1 << (SparqlParser.VAR1 - 96)) | (1 << (SparqlParser.VAR2 - 96)) | (1 << (SparqlParser.INTEGER - 96)) | (1 << (SparqlParser.DECIMAL - 96)) | (1 << (SparqlParser.DOUBLE - 96)) | (1 << (SparqlParser.INTEGER_POSITIVE - 96)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 96)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SparqlParser.INTEGER_NEGATIVE - 128)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 128)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 128)) | (1 << (SparqlParser.STRING_LITERAL1 - 128)) | (1 << (SparqlParser.STRING_LITERAL2 - 128)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 128)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 128)) | (1 << (SparqlParser.OPEN_BRACE - 128)) | (1 << (SparqlParser.PLUS_SIGN - 128)) | (1 << (SparqlParser.MINUS_SIGN - 128)) | (1 << (SparqlParser.ASTERISK - 128)) | (1 << (SparqlParser.NEGATION - 128)) | (1 << (SparqlParser.DIVIDE - 128)))) !== 0)) {
                        this.state = 1065;
                        this.expressionList();
                    }

                    this.state = 1068;
                    this.match(SparqlParser.CLOSE_BRACE);
                    break;

                case 6:
                    localctx = new ConditionalAndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SparqlParser.RULE_expression);
                    this.state = 1069;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }

                    this.state = 1070;
                    this.match(SparqlParser.AND);
                    this.state = 1071;
                    this.expression(0);
                    break;

                case 7:
                    localctx = new ConditionalOrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, SparqlParser.RULE_expression);
                    this.state = 1072;
                    if (!( this.precpred(this._ctx, 1))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                    }

                    this.state = 1073;
                    this.match(SparqlParser.OR);
                    this.state = 1074;
                    this.expression(0);
                    break;

                } 
            }
            this.state = 1079;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,121,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function UnaryLiteralExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_unaryLiteralExpression;
    this.op = null; // Token
    return this;
}

UnaryLiteralExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryLiteralExpressionContext.prototype.constructor = UnaryLiteralExpressionContext;

UnaryLiteralExpressionContext.prototype.numericLiteralPositive = function() {
    return this.getTypedRuleContext(NumericLiteralPositiveContext,0);
};

UnaryLiteralExpressionContext.prototype.numericLiteralNegative = function() {
    return this.getTypedRuleContext(NumericLiteralNegativeContext,0);
};

UnaryLiteralExpressionContext.prototype.unaryExpression = function() {
    return this.getTypedRuleContext(UnaryExpressionContext,0);
};

UnaryLiteralExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterUnaryLiteralExpression(this);
	}
};

UnaryLiteralExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitUnaryLiteralExpression(this);
	}
};




SparqlParser.UnaryLiteralExpressionContext = UnaryLiteralExpressionContext;

SparqlParser.prototype.unaryLiteralExpression = function() {

    var localctx = new UnaryLiteralExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, SparqlParser.RULE_unaryLiteralExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1082;
        switch(this._input.LA(1)) {
        case SparqlParser.INTEGER_POSITIVE:
        case SparqlParser.DECIMAL_POSITIVE:
        case SparqlParser.DOUBLE_POSITIVE:
            this.state = 1080;
            this.numericLiteralPositive();
            break;
        case SparqlParser.INTEGER_NEGATIVE:
        case SparqlParser.DECIMAL_NEGATIVE:
        case SparqlParser.DOUBLE_NEGATIVE:
            this.state = 1081;
            this.numericLiteralNegative();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1086;
        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
        if(la_===1) {
            this.state = 1084;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(_la===SparqlParser.ASTERISK || _la===SparqlParser.DIVIDE)) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 1085;
            this.unaryExpression();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_unaryExpression;
    this.op = null; // Token
    return this;
}

UnaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryExpressionContext.prototype.constructor = UnaryExpressionContext;

UnaryExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

UnaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterUnaryExpression(this);
	}
};

UnaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitUnaryExpression(this);
	}
};




SparqlParser.UnaryExpressionContext = UnaryExpressionContext;

SparqlParser.prototype.unaryExpression = function() {

    var localctx = new UnaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, SparqlParser.RULE_unaryExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1089;
        _la = this._input.LA(1);
        if(((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (SparqlParser.PLUS_SIGN - 151)) | (1 << (SparqlParser.MINUS_SIGN - 151)) | (1 << (SparqlParser.NEGATION - 151)))) !== 0)) {
            this.state = 1088;
            localctx.op = this._input.LT(1);
            _la = this._input.LA(1);
            if(!(((((_la - 151)) & ~0x1f) == 0 && ((1 << (_la - 151)) & ((1 << (SparqlParser.PLUS_SIGN - 151)) | (1 << (SparqlParser.MINUS_SIGN - 151)) | (1 << (SparqlParser.NEGATION - 151)))) !== 0))) {
                localctx.op = this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
        }

        this.state = 1091;
        this.primaryExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PrimaryExpressionContext.prototype.builtInCall = function() {
    return this.getTypedRuleContext(BuiltInCallContext,0);
};

PrimaryExpressionContext.prototype.iriRefOrFunction = function() {
    return this.getTypedRuleContext(IriRefOrFunctionContext,0);
};

PrimaryExpressionContext.prototype.rdfLiteral = function() {
    return this.getTypedRuleContext(RdfLiteralContext,0);
};

PrimaryExpressionContext.prototype.numericLiteral = function() {
    return this.getTypedRuleContext(NumericLiteralContext,0);
};

PrimaryExpressionContext.prototype.booleanLiteral = function() {
    return this.getTypedRuleContext(BooleanLiteralContext,0);
};

PrimaryExpressionContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPrimaryExpression(this);
	}
};




SparqlParser.PrimaryExpressionContext = PrimaryExpressionContext;

SparqlParser.prototype.primaryExpression = function() {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, SparqlParser.RULE_primaryExpression);
    try {
        this.state = 1103;
        switch(this._input.LA(1)) {
        case SparqlParser.OPEN_BRACE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1093;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1094;
            this.expression(0);
            this.state = 1095;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.STR:
        case SparqlParser.LANG:
        case SparqlParser.LANGMATCHES:
        case SparqlParser.DATATYPE:
        case SparqlParser.BOUND:
        case SparqlParser.SAMETERM:
        case SparqlParser.ISIRI:
        case SparqlParser.ISURI:
        case SparqlParser.ISBLANK:
        case SparqlParser.ISLITERAL:
        case SparqlParser.REGEX:
        case SparqlParser.SUBSTR:
        case SparqlParser.IRI:
        case SparqlParser.URI:
        case SparqlParser.BNODE:
        case SparqlParser.RAND:
        case SparqlParser.ABS:
        case SparqlParser.CEIL:
        case SparqlParser.FLOOR:
        case SparqlParser.ROUND:
        case SparqlParser.CONCAT:
        case SparqlParser.STRLEN:
        case SparqlParser.UCASE:
        case SparqlParser.LCASE:
        case SparqlParser.ENCODE_FOR_URI:
        case SparqlParser.CONTAINS:
        case SparqlParser.STRSTARTS:
        case SparqlParser.STRENDS:
        case SparqlParser.STRBEFORE:
        case SparqlParser.STRAFTER:
        case SparqlParser.REPLACE:
        case SparqlParser.YEAR:
        case SparqlParser.MONTH:
        case SparqlParser.DAY:
        case SparqlParser.HOURS:
        case SparqlParser.MINUTES:
        case SparqlParser.SECONDS:
        case SparqlParser.TIMEZONE:
        case SparqlParser.TZ:
        case SparqlParser.NOW:
        case SparqlParser.UUID:
        case SparqlParser.STRUUID:
        case SparqlParser.MD5:
        case SparqlParser.SHA1:
        case SparqlParser.SHA256:
        case SparqlParser.SHA384:
        case SparqlParser.SHA512:
        case SparqlParser.COALESCE:
        case SparqlParser.IF:
        case SparqlParser.STRLANG:
        case SparqlParser.STRDT:
        case SparqlParser.ISNUMERIC:
        case SparqlParser.COUNT:
        case SparqlParser.SUM:
        case SparqlParser.MIN:
        case SparqlParser.MAX:
        case SparqlParser.AVG:
        case SparqlParser.SAMPLE:
        case SparqlParser.GROUP_CONCAT:
        case SparqlParser.NOT:
        case SparqlParser.EXISTS:
            this.enterOuterAlt(localctx, 2);
            this.state = 1097;
            this.builtInCall();
            break;
        case SparqlParser.IRIREF:
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
            this.enterOuterAlt(localctx, 3);
            this.state = 1098;
            this.iriRefOrFunction();
            break;
        case SparqlParser.STRING_LITERAL1:
        case SparqlParser.STRING_LITERAL2:
        case SparqlParser.STRING_LITERAL_LONG1:
        case SparqlParser.STRING_LITERAL_LONG2:
            this.enterOuterAlt(localctx, 4);
            this.state = 1099;
            this.rdfLiteral();
            break;
        case SparqlParser.INTEGER:
        case SparqlParser.DECIMAL:
        case SparqlParser.DOUBLE:
        case SparqlParser.INTEGER_POSITIVE:
        case SparqlParser.DECIMAL_POSITIVE:
        case SparqlParser.DOUBLE_POSITIVE:
        case SparqlParser.INTEGER_NEGATIVE:
        case SparqlParser.DECIMAL_NEGATIVE:
        case SparqlParser.DOUBLE_NEGATIVE:
            this.enterOuterAlt(localctx, 5);
            this.state = 1100;
            this.numericLiteral();
            break;
        case SparqlParser.TRUE:
        case SparqlParser.FALSE:
            this.enterOuterAlt(localctx, 6);
            this.state = 1101;
            this.booleanLiteral();
            break;
        case SparqlParser.VAR1:
        case SparqlParser.VAR2:
            this.enterOuterAlt(localctx, 7);
            this.state = 1102;
            this.var();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BuiltInCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_builtInCall;
    return this;
}

BuiltInCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BuiltInCallContext.prototype.constructor = BuiltInCallContext;

BuiltInCallContext.prototype.aggregate = function() {
    return this.getTypedRuleContext(AggregateContext,0);
};

BuiltInCallContext.prototype.STR = function() {
    return this.getToken(SparqlParser.STR, 0);
};

BuiltInCallContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

BuiltInCallContext.prototype.LANG = function() {
    return this.getToken(SparqlParser.LANG, 0);
};

BuiltInCallContext.prototype.LANGMATCHES = function() {
    return this.getToken(SparqlParser.LANGMATCHES, 0);
};

BuiltInCallContext.prototype.DATATYPE = function() {
    return this.getToken(SparqlParser.DATATYPE, 0);
};

BuiltInCallContext.prototype.BOUND = function() {
    return this.getToken(SparqlParser.BOUND, 0);
};

BuiltInCallContext.prototype.var = function() {
    return this.getTypedRuleContext(VarContext,0);
};

BuiltInCallContext.prototype.IRI = function() {
    return this.getToken(SparqlParser.IRI, 0);
};

BuiltInCallContext.prototype.URI = function() {
    return this.getToken(SparqlParser.URI, 0);
};

BuiltInCallContext.prototype.BNODE = function() {
    return this.getToken(SparqlParser.BNODE, 0);
};

BuiltInCallContext.prototype.RAND = function() {
    return this.getToken(SparqlParser.RAND, 0);
};

BuiltInCallContext.prototype.ABS = function() {
    return this.getToken(SparqlParser.ABS, 0);
};

BuiltInCallContext.prototype.CEIL = function() {
    return this.getToken(SparqlParser.CEIL, 0);
};

BuiltInCallContext.prototype.FLOOR = function() {
    return this.getToken(SparqlParser.FLOOR, 0);
};

BuiltInCallContext.prototype.ROUND = function() {
    return this.getToken(SparqlParser.ROUND, 0);
};

BuiltInCallContext.prototype.CONCAT = function() {
    return this.getToken(SparqlParser.CONCAT, 0);
};

BuiltInCallContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

BuiltInCallContext.prototype.subStringExpression = function() {
    return this.getTypedRuleContext(SubStringExpressionContext,0);
};

BuiltInCallContext.prototype.STRLEN = function() {
    return this.getToken(SparqlParser.STRLEN, 0);
};

BuiltInCallContext.prototype.strReplaceExpression = function() {
    return this.getTypedRuleContext(StrReplaceExpressionContext,0);
};

BuiltInCallContext.prototype.UCASE = function() {
    return this.getToken(SparqlParser.UCASE, 0);
};

BuiltInCallContext.prototype.LCASE = function() {
    return this.getToken(SparqlParser.LCASE, 0);
};

BuiltInCallContext.prototype.ENCODE_FOR_URI = function() {
    return this.getToken(SparqlParser.ENCODE_FOR_URI, 0);
};

BuiltInCallContext.prototype.CONTAINS = function() {
    return this.getToken(SparqlParser.CONTAINS, 0);
};

BuiltInCallContext.prototype.STRSTARTS = function() {
    return this.getToken(SparqlParser.STRSTARTS, 0);
};

BuiltInCallContext.prototype.STRENDS = function() {
    return this.getToken(SparqlParser.STRENDS, 0);
};

BuiltInCallContext.prototype.STRBEFORE = function() {
    return this.getToken(SparqlParser.STRBEFORE, 0);
};

BuiltInCallContext.prototype.STRAFTER = function() {
    return this.getToken(SparqlParser.STRAFTER, 0);
};

BuiltInCallContext.prototype.YEAR = function() {
    return this.getToken(SparqlParser.YEAR, 0);
};

BuiltInCallContext.prototype.MONTH = function() {
    return this.getToken(SparqlParser.MONTH, 0);
};

BuiltInCallContext.prototype.DAY = function() {
    return this.getToken(SparqlParser.DAY, 0);
};

BuiltInCallContext.prototype.HOURS = function() {
    return this.getToken(SparqlParser.HOURS, 0);
};

BuiltInCallContext.prototype.MINUTES = function() {
    return this.getToken(SparqlParser.MINUTES, 0);
};

BuiltInCallContext.prototype.SECONDS = function() {
    return this.getToken(SparqlParser.SECONDS, 0);
};

BuiltInCallContext.prototype.TIMEZONE = function() {
    return this.getToken(SparqlParser.TIMEZONE, 0);
};

BuiltInCallContext.prototype.TZ = function() {
    return this.getToken(SparqlParser.TZ, 0);
};

BuiltInCallContext.prototype.NOW = function() {
    return this.getToken(SparqlParser.NOW, 0);
};

BuiltInCallContext.prototype.UUID = function() {
    return this.getToken(SparqlParser.UUID, 0);
};

BuiltInCallContext.prototype.STRUUID = function() {
    return this.getToken(SparqlParser.STRUUID, 0);
};

BuiltInCallContext.prototype.MD5 = function() {
    return this.getToken(SparqlParser.MD5, 0);
};

BuiltInCallContext.prototype.SHA1 = function() {
    return this.getToken(SparqlParser.SHA1, 0);
};

BuiltInCallContext.prototype.SHA256 = function() {
    return this.getToken(SparqlParser.SHA256, 0);
};

BuiltInCallContext.prototype.SHA384 = function() {
    return this.getToken(SparqlParser.SHA384, 0);
};

BuiltInCallContext.prototype.SHA512 = function() {
    return this.getToken(SparqlParser.SHA512, 0);
};

BuiltInCallContext.prototype.COALESCE = function() {
    return this.getToken(SparqlParser.COALESCE, 0);
};

BuiltInCallContext.prototype.IF = function() {
    return this.getToken(SparqlParser.IF, 0);
};

BuiltInCallContext.prototype.STRLANG = function() {
    return this.getToken(SparqlParser.STRLANG, 0);
};

BuiltInCallContext.prototype.STRDT = function() {
    return this.getToken(SparqlParser.STRDT, 0);
};

BuiltInCallContext.prototype.SAMETERM = function() {
    return this.getToken(SparqlParser.SAMETERM, 0);
};

BuiltInCallContext.prototype.ISIRI = function() {
    return this.getToken(SparqlParser.ISIRI, 0);
};

BuiltInCallContext.prototype.ISURI = function() {
    return this.getToken(SparqlParser.ISURI, 0);
};

BuiltInCallContext.prototype.ISBLANK = function() {
    return this.getToken(SparqlParser.ISBLANK, 0);
};

BuiltInCallContext.prototype.ISLITERAL = function() {
    return this.getToken(SparqlParser.ISLITERAL, 0);
};

BuiltInCallContext.prototype.ISNUMERIC = function() {
    return this.getToken(SparqlParser.ISNUMERIC, 0);
};

BuiltInCallContext.prototype.regexExpression = function() {
    return this.getTypedRuleContext(RegexExpressionContext,0);
};

BuiltInCallContext.prototype.existsFunction = function() {
    return this.getTypedRuleContext(ExistsFunctionContext,0);
};

BuiltInCallContext.prototype.notExistsFunction = function() {
    return this.getTypedRuleContext(NotExistsFunctionContext,0);
};

BuiltInCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterBuiltInCall(this);
	}
};

BuiltInCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitBuiltInCall(this);
	}
};




SparqlParser.BuiltInCallContext = BuiltInCallContext;

SparqlParser.prototype.builtInCall = function() {

    var localctx = new BuiltInCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, SparqlParser.RULE_builtInCall);
    var _la = 0; // Token type
    try {
        this.state = 1373;
        switch(this._input.LA(1)) {
        case SparqlParser.COUNT:
        case SparqlParser.SUM:
        case SparqlParser.MIN:
        case SparqlParser.MAX:
        case SparqlParser.AVG:
        case SparqlParser.SAMPLE:
        case SparqlParser.GROUP_CONCAT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1105;
            this.aggregate();
            break;
        case SparqlParser.STR:
            this.enterOuterAlt(localctx, 2);
            this.state = 1106;
            this.match(SparqlParser.STR);
            this.state = 1107;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1108;
            this.expression(0);
            this.state = 1109;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.LANG:
            this.enterOuterAlt(localctx, 3);
            this.state = 1111;
            this.match(SparqlParser.LANG);
            this.state = 1112;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1113;
            this.expression(0);
            this.state = 1114;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.LANGMATCHES:
            this.enterOuterAlt(localctx, 4);
            this.state = 1116;
            this.match(SparqlParser.LANGMATCHES);
            this.state = 1117;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1118;
            this.expression(0);
            this.state = 1119;
            this.match(SparqlParser.COMMA);
            this.state = 1120;
            this.expression(0);
            this.state = 1121;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.DATATYPE:
            this.enterOuterAlt(localctx, 5);
            this.state = 1123;
            this.match(SparqlParser.DATATYPE);
            this.state = 1124;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1125;
            this.expression(0);
            this.state = 1126;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.BOUND:
            this.enterOuterAlt(localctx, 6);
            this.state = 1128;
            this.match(SparqlParser.BOUND);
            this.state = 1129;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1130;
            this.var();
            this.state = 1131;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.IRI:
            this.enterOuterAlt(localctx, 7);
            this.state = 1133;
            this.match(SparqlParser.IRI);
            this.state = 1134;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1135;
            this.expression(0);
            this.state = 1136;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.URI:
            this.enterOuterAlt(localctx, 8);
            this.state = 1138;
            this.match(SparqlParser.URI);
            this.state = 1139;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1140;
            this.expression(0);
            this.state = 1141;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.BNODE:
            this.enterOuterAlt(localctx, 9);
            this.state = 1143;
            this.match(SparqlParser.BNODE);
            this.state = 1144;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1146;
            _la = this._input.LA(1);
            if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (SparqlParser.STR - 25)) | (1 << (SparqlParser.LANG - 25)) | (1 << (SparqlParser.LANGMATCHES - 25)) | (1 << (SparqlParser.DATATYPE - 25)) | (1 << (SparqlParser.BOUND - 25)) | (1 << (SparqlParser.SAMETERM - 25)) | (1 << (SparqlParser.ISIRI - 25)) | (1 << (SparqlParser.ISURI - 25)) | (1 << (SparqlParser.ISBLANK - 25)) | (1 << (SparqlParser.ISLITERAL - 25)) | (1 << (SparqlParser.REGEX - 25)) | (1 << (SparqlParser.SUBSTR - 25)) | (1 << (SparqlParser.TRUE - 25)) | (1 << (SparqlParser.FALSE - 25)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SparqlParser.IRI - 64)) | (1 << (SparqlParser.URI - 64)) | (1 << (SparqlParser.BNODE - 64)) | (1 << (SparqlParser.RAND - 64)) | (1 << (SparqlParser.ABS - 64)) | (1 << (SparqlParser.CEIL - 64)) | (1 << (SparqlParser.FLOOR - 64)) | (1 << (SparqlParser.ROUND - 64)) | (1 << (SparqlParser.CONCAT - 64)) | (1 << (SparqlParser.STRLEN - 64)) | (1 << (SparqlParser.UCASE - 64)) | (1 << (SparqlParser.LCASE - 64)) | (1 << (SparqlParser.ENCODE_FOR_URI - 64)) | (1 << (SparqlParser.CONTAINS - 64)) | (1 << (SparqlParser.STRSTARTS - 64)) | (1 << (SparqlParser.STRENDS - 64)) | (1 << (SparqlParser.STRBEFORE - 64)) | (1 << (SparqlParser.STRAFTER - 64)) | (1 << (SparqlParser.REPLACE - 64)) | (1 << (SparqlParser.YEAR - 64)) | (1 << (SparqlParser.MONTH - 64)) | (1 << (SparqlParser.DAY - 64)) | (1 << (SparqlParser.HOURS - 64)) | (1 << (SparqlParser.MINUTES - 64)) | (1 << (SparqlParser.SECONDS - 64)) | (1 << (SparqlParser.TIMEZONE - 64)) | (1 << (SparqlParser.TZ - 64)) | (1 << (SparqlParser.NOW - 64)) | (1 << (SparqlParser.UUID - 64)) | (1 << (SparqlParser.STRUUID - 64)) | (1 << (SparqlParser.MD5 - 64)) | (1 << (SparqlParser.SHA1 - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SparqlParser.SHA256 - 96)) | (1 << (SparqlParser.SHA384 - 96)) | (1 << (SparqlParser.SHA512 - 96)) | (1 << (SparqlParser.COALESCE - 96)) | (1 << (SparqlParser.IF - 96)) | (1 << (SparqlParser.STRLANG - 96)) | (1 << (SparqlParser.STRDT - 96)) | (1 << (SparqlParser.ISNUMERIC - 96)) | (1 << (SparqlParser.COUNT - 96)) | (1 << (SparqlParser.SUM - 96)) | (1 << (SparqlParser.MIN - 96)) | (1 << (SparqlParser.MAX - 96)) | (1 << (SparqlParser.AVG - 96)) | (1 << (SparqlParser.SAMPLE - 96)) | (1 << (SparqlParser.GROUP_CONCAT - 96)) | (1 << (SparqlParser.NOT - 96)) | (1 << (SparqlParser.EXISTS - 96)) | (1 << (SparqlParser.IRIREF - 96)) | (1 << (SparqlParser.PNAME_NS - 96)) | (1 << (SparqlParser.PNAME_LN - 96)) | (1 << (SparqlParser.VAR1 - 96)) | (1 << (SparqlParser.VAR2 - 96)) | (1 << (SparqlParser.INTEGER - 96)) | (1 << (SparqlParser.DECIMAL - 96)) | (1 << (SparqlParser.DOUBLE - 96)) | (1 << (SparqlParser.INTEGER_POSITIVE - 96)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 96)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SparqlParser.INTEGER_NEGATIVE - 128)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 128)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 128)) | (1 << (SparqlParser.STRING_LITERAL1 - 128)) | (1 << (SparqlParser.STRING_LITERAL2 - 128)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 128)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 128)) | (1 << (SparqlParser.OPEN_BRACE - 128)) | (1 << (SparqlParser.PLUS_SIGN - 128)) | (1 << (SparqlParser.MINUS_SIGN - 128)) | (1 << (SparqlParser.ASTERISK - 128)) | (1 << (SparqlParser.NEGATION - 128)) | (1 << (SparqlParser.DIVIDE - 128)))) !== 0)) {
                this.state = 1145;
                this.expression(0);
            }

            this.state = 1148;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.RAND:
            this.enterOuterAlt(localctx, 10);
            this.state = 1149;
            this.match(SparqlParser.RAND);
            this.state = 1150;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1151;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.ABS:
            this.enterOuterAlt(localctx, 11);
            this.state = 1152;
            this.match(SparqlParser.ABS);
            this.state = 1153;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1154;
            this.expression(0);
            this.state = 1155;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.CEIL:
            this.enterOuterAlt(localctx, 12);
            this.state = 1157;
            this.match(SparqlParser.CEIL);
            this.state = 1158;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1159;
            this.expression(0);
            this.state = 1160;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.FLOOR:
            this.enterOuterAlt(localctx, 13);
            this.state = 1162;
            this.match(SparqlParser.FLOOR);
            this.state = 1163;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1164;
            this.expression(0);
            this.state = 1165;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.ROUND:
            this.enterOuterAlt(localctx, 14);
            this.state = 1167;
            this.match(SparqlParser.ROUND);
            this.state = 1168;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1169;
            this.expression(0);
            this.state = 1170;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.CONCAT:
            this.enterOuterAlt(localctx, 15);
            this.state = 1172;
            this.match(SparqlParser.CONCAT);
            this.state = 1173;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1175;
            _la = this._input.LA(1);
            if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (SparqlParser.STR - 25)) | (1 << (SparqlParser.LANG - 25)) | (1 << (SparqlParser.LANGMATCHES - 25)) | (1 << (SparqlParser.DATATYPE - 25)) | (1 << (SparqlParser.BOUND - 25)) | (1 << (SparqlParser.SAMETERM - 25)) | (1 << (SparqlParser.ISIRI - 25)) | (1 << (SparqlParser.ISURI - 25)) | (1 << (SparqlParser.ISBLANK - 25)) | (1 << (SparqlParser.ISLITERAL - 25)) | (1 << (SparqlParser.REGEX - 25)) | (1 << (SparqlParser.SUBSTR - 25)) | (1 << (SparqlParser.TRUE - 25)) | (1 << (SparqlParser.FALSE - 25)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SparqlParser.IRI - 64)) | (1 << (SparqlParser.URI - 64)) | (1 << (SparqlParser.BNODE - 64)) | (1 << (SparqlParser.RAND - 64)) | (1 << (SparqlParser.ABS - 64)) | (1 << (SparqlParser.CEIL - 64)) | (1 << (SparqlParser.FLOOR - 64)) | (1 << (SparqlParser.ROUND - 64)) | (1 << (SparqlParser.CONCAT - 64)) | (1 << (SparqlParser.STRLEN - 64)) | (1 << (SparqlParser.UCASE - 64)) | (1 << (SparqlParser.LCASE - 64)) | (1 << (SparqlParser.ENCODE_FOR_URI - 64)) | (1 << (SparqlParser.CONTAINS - 64)) | (1 << (SparqlParser.STRSTARTS - 64)) | (1 << (SparqlParser.STRENDS - 64)) | (1 << (SparqlParser.STRBEFORE - 64)) | (1 << (SparqlParser.STRAFTER - 64)) | (1 << (SparqlParser.REPLACE - 64)) | (1 << (SparqlParser.YEAR - 64)) | (1 << (SparqlParser.MONTH - 64)) | (1 << (SparqlParser.DAY - 64)) | (1 << (SparqlParser.HOURS - 64)) | (1 << (SparqlParser.MINUTES - 64)) | (1 << (SparqlParser.SECONDS - 64)) | (1 << (SparqlParser.TIMEZONE - 64)) | (1 << (SparqlParser.TZ - 64)) | (1 << (SparqlParser.NOW - 64)) | (1 << (SparqlParser.UUID - 64)) | (1 << (SparqlParser.STRUUID - 64)) | (1 << (SparqlParser.MD5 - 64)) | (1 << (SparqlParser.SHA1 - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SparqlParser.SHA256 - 96)) | (1 << (SparqlParser.SHA384 - 96)) | (1 << (SparqlParser.SHA512 - 96)) | (1 << (SparqlParser.COALESCE - 96)) | (1 << (SparqlParser.IF - 96)) | (1 << (SparqlParser.STRLANG - 96)) | (1 << (SparqlParser.STRDT - 96)) | (1 << (SparqlParser.ISNUMERIC - 96)) | (1 << (SparqlParser.COUNT - 96)) | (1 << (SparqlParser.SUM - 96)) | (1 << (SparqlParser.MIN - 96)) | (1 << (SparqlParser.MAX - 96)) | (1 << (SparqlParser.AVG - 96)) | (1 << (SparqlParser.SAMPLE - 96)) | (1 << (SparqlParser.GROUP_CONCAT - 96)) | (1 << (SparqlParser.NOT - 96)) | (1 << (SparqlParser.EXISTS - 96)) | (1 << (SparqlParser.IRIREF - 96)) | (1 << (SparqlParser.PNAME_NS - 96)) | (1 << (SparqlParser.PNAME_LN - 96)) | (1 << (SparqlParser.VAR1 - 96)) | (1 << (SparqlParser.VAR2 - 96)) | (1 << (SparqlParser.INTEGER - 96)) | (1 << (SparqlParser.DECIMAL - 96)) | (1 << (SparqlParser.DOUBLE - 96)) | (1 << (SparqlParser.INTEGER_POSITIVE - 96)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 96)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SparqlParser.INTEGER_NEGATIVE - 128)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 128)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 128)) | (1 << (SparqlParser.STRING_LITERAL1 - 128)) | (1 << (SparqlParser.STRING_LITERAL2 - 128)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 128)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 128)) | (1 << (SparqlParser.OPEN_BRACE - 128)) | (1 << (SparqlParser.PLUS_SIGN - 128)) | (1 << (SparqlParser.MINUS_SIGN - 128)) | (1 << (SparqlParser.ASTERISK - 128)) | (1 << (SparqlParser.NEGATION - 128)) | (1 << (SparqlParser.DIVIDE - 128)))) !== 0)) {
                this.state = 1174;
                this.expressionList();
            }

            this.state = 1177;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.SUBSTR:
            this.enterOuterAlt(localctx, 16);
            this.state = 1178;
            this.subStringExpression();
            break;
        case SparqlParser.STRLEN:
            this.enterOuterAlt(localctx, 17);
            this.state = 1179;
            this.match(SparqlParser.STRLEN);
            this.state = 1180;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1181;
            this.expression(0);
            this.state = 1182;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.REPLACE:
            this.enterOuterAlt(localctx, 18);
            this.state = 1184;
            this.strReplaceExpression();
            break;
        case SparqlParser.UCASE:
            this.enterOuterAlt(localctx, 19);
            this.state = 1185;
            this.match(SparqlParser.UCASE);
            this.state = 1186;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1187;
            this.expression(0);
            this.state = 1188;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.LCASE:
            this.enterOuterAlt(localctx, 20);
            this.state = 1190;
            this.match(SparqlParser.LCASE);
            this.state = 1191;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1192;
            this.expression(0);
            this.state = 1193;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.ENCODE_FOR_URI:
            this.enterOuterAlt(localctx, 21);
            this.state = 1195;
            this.match(SparqlParser.ENCODE_FOR_URI);
            this.state = 1196;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1197;
            this.expression(0);
            this.state = 1198;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.CONTAINS:
            this.enterOuterAlt(localctx, 22);
            this.state = 1200;
            this.match(SparqlParser.CONTAINS);
            this.state = 1201;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1202;
            this.expression(0);
            this.state = 1203;
            this.match(SparqlParser.COMMA);
            this.state = 1204;
            this.expression(0);
            this.state = 1205;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.STRSTARTS:
            this.enterOuterAlt(localctx, 23);
            this.state = 1207;
            this.match(SparqlParser.STRSTARTS);
            this.state = 1208;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1209;
            this.expression(0);
            this.state = 1210;
            this.match(SparqlParser.COMMA);
            this.state = 1211;
            this.expression(0);
            this.state = 1212;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.STRENDS:
            this.enterOuterAlt(localctx, 24);
            this.state = 1214;
            this.match(SparqlParser.STRENDS);
            this.state = 1215;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1216;
            this.expression(0);
            this.state = 1217;
            this.match(SparqlParser.COMMA);
            this.state = 1218;
            this.expression(0);
            this.state = 1219;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.STRBEFORE:
            this.enterOuterAlt(localctx, 25);
            this.state = 1221;
            this.match(SparqlParser.STRBEFORE);
            this.state = 1222;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1223;
            this.expression(0);
            this.state = 1224;
            this.match(SparqlParser.COMMA);
            this.state = 1225;
            this.expression(0);
            this.state = 1226;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.STRAFTER:
            this.enterOuterAlt(localctx, 26);
            this.state = 1228;
            this.match(SparqlParser.STRAFTER);
            this.state = 1229;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1230;
            this.expression(0);
            this.state = 1231;
            this.match(SparqlParser.COMMA);
            this.state = 1232;
            this.expression(0);
            this.state = 1233;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.YEAR:
            this.enterOuterAlt(localctx, 27);
            this.state = 1235;
            this.match(SparqlParser.YEAR);
            this.state = 1236;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1237;
            this.expression(0);
            this.state = 1238;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.MONTH:
            this.enterOuterAlt(localctx, 28);
            this.state = 1240;
            this.match(SparqlParser.MONTH);
            this.state = 1241;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1242;
            this.expression(0);
            this.state = 1243;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.DAY:
            this.enterOuterAlt(localctx, 29);
            this.state = 1245;
            this.match(SparqlParser.DAY);
            this.state = 1246;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1247;
            this.expression(0);
            this.state = 1248;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.HOURS:
            this.enterOuterAlt(localctx, 30);
            this.state = 1250;
            this.match(SparqlParser.HOURS);
            this.state = 1251;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1252;
            this.expression(0);
            this.state = 1253;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.MINUTES:
            this.enterOuterAlt(localctx, 31);
            this.state = 1255;
            this.match(SparqlParser.MINUTES);
            this.state = 1256;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1257;
            this.expression(0);
            this.state = 1258;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.SECONDS:
            this.enterOuterAlt(localctx, 32);
            this.state = 1260;
            this.match(SparqlParser.SECONDS);
            this.state = 1261;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1262;
            this.expression(0);
            this.state = 1263;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.TIMEZONE:
            this.enterOuterAlt(localctx, 33);
            this.state = 1265;
            this.match(SparqlParser.TIMEZONE);
            this.state = 1266;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1267;
            this.expression(0);
            this.state = 1268;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.TZ:
            this.enterOuterAlt(localctx, 34);
            this.state = 1270;
            this.match(SparqlParser.TZ);
            this.state = 1271;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1272;
            this.expression(0);
            this.state = 1273;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.NOW:
            this.enterOuterAlt(localctx, 35);
            this.state = 1275;
            this.match(SparqlParser.NOW);
            this.state = 1276;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1277;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.UUID:
            this.enterOuterAlt(localctx, 36);
            this.state = 1278;
            this.match(SparqlParser.UUID);
            this.state = 1279;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1280;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.STRUUID:
            this.enterOuterAlt(localctx, 37);
            this.state = 1281;
            this.match(SparqlParser.STRUUID);
            this.state = 1282;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1283;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.MD5:
            this.enterOuterAlt(localctx, 38);
            this.state = 1284;
            this.match(SparqlParser.MD5);
            this.state = 1285;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1286;
            this.expression(0);
            this.state = 1287;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.SHA1:
            this.enterOuterAlt(localctx, 39);
            this.state = 1289;
            this.match(SparqlParser.SHA1);
            this.state = 1290;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1291;
            this.expression(0);
            this.state = 1292;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.SHA256:
            this.enterOuterAlt(localctx, 40);
            this.state = 1294;
            this.match(SparqlParser.SHA256);
            this.state = 1295;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1296;
            this.expression(0);
            this.state = 1297;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.SHA384:
            this.enterOuterAlt(localctx, 41);
            this.state = 1299;
            this.match(SparqlParser.SHA384);
            this.state = 1300;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1301;
            this.expression(0);
            this.state = 1302;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.SHA512:
            this.enterOuterAlt(localctx, 42);
            this.state = 1304;
            this.match(SparqlParser.SHA512);
            this.state = 1305;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1306;
            this.expression(0);
            this.state = 1307;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.COALESCE:
            this.enterOuterAlt(localctx, 43);
            this.state = 1309;
            this.match(SparqlParser.COALESCE);
            this.state = 1310;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1312;
            _la = this._input.LA(1);
            if(((((_la - 25)) & ~0x1f) == 0 && ((1 << (_la - 25)) & ((1 << (SparqlParser.STR - 25)) | (1 << (SparqlParser.LANG - 25)) | (1 << (SparqlParser.LANGMATCHES - 25)) | (1 << (SparqlParser.DATATYPE - 25)) | (1 << (SparqlParser.BOUND - 25)) | (1 << (SparqlParser.SAMETERM - 25)) | (1 << (SparqlParser.ISIRI - 25)) | (1 << (SparqlParser.ISURI - 25)) | (1 << (SparqlParser.ISBLANK - 25)) | (1 << (SparqlParser.ISLITERAL - 25)) | (1 << (SparqlParser.REGEX - 25)) | (1 << (SparqlParser.SUBSTR - 25)) | (1 << (SparqlParser.TRUE - 25)) | (1 << (SparqlParser.FALSE - 25)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (SparqlParser.IRI - 64)) | (1 << (SparqlParser.URI - 64)) | (1 << (SparqlParser.BNODE - 64)) | (1 << (SparqlParser.RAND - 64)) | (1 << (SparqlParser.ABS - 64)) | (1 << (SparqlParser.CEIL - 64)) | (1 << (SparqlParser.FLOOR - 64)) | (1 << (SparqlParser.ROUND - 64)) | (1 << (SparqlParser.CONCAT - 64)) | (1 << (SparqlParser.STRLEN - 64)) | (1 << (SparqlParser.UCASE - 64)) | (1 << (SparqlParser.LCASE - 64)) | (1 << (SparqlParser.ENCODE_FOR_URI - 64)) | (1 << (SparqlParser.CONTAINS - 64)) | (1 << (SparqlParser.STRSTARTS - 64)) | (1 << (SparqlParser.STRENDS - 64)) | (1 << (SparqlParser.STRBEFORE - 64)) | (1 << (SparqlParser.STRAFTER - 64)) | (1 << (SparqlParser.REPLACE - 64)) | (1 << (SparqlParser.YEAR - 64)) | (1 << (SparqlParser.MONTH - 64)) | (1 << (SparqlParser.DAY - 64)) | (1 << (SparqlParser.HOURS - 64)) | (1 << (SparqlParser.MINUTES - 64)) | (1 << (SparqlParser.SECONDS - 64)) | (1 << (SparqlParser.TIMEZONE - 64)) | (1 << (SparqlParser.TZ - 64)) | (1 << (SparqlParser.NOW - 64)) | (1 << (SparqlParser.UUID - 64)) | (1 << (SparqlParser.STRUUID - 64)) | (1 << (SparqlParser.MD5 - 64)) | (1 << (SparqlParser.SHA1 - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (SparqlParser.SHA256 - 96)) | (1 << (SparqlParser.SHA384 - 96)) | (1 << (SparqlParser.SHA512 - 96)) | (1 << (SparqlParser.COALESCE - 96)) | (1 << (SparqlParser.IF - 96)) | (1 << (SparqlParser.STRLANG - 96)) | (1 << (SparqlParser.STRDT - 96)) | (1 << (SparqlParser.ISNUMERIC - 96)) | (1 << (SparqlParser.COUNT - 96)) | (1 << (SparqlParser.SUM - 96)) | (1 << (SparqlParser.MIN - 96)) | (1 << (SparqlParser.MAX - 96)) | (1 << (SparqlParser.AVG - 96)) | (1 << (SparqlParser.SAMPLE - 96)) | (1 << (SparqlParser.GROUP_CONCAT - 96)) | (1 << (SparqlParser.NOT - 96)) | (1 << (SparqlParser.EXISTS - 96)) | (1 << (SparqlParser.IRIREF - 96)) | (1 << (SparqlParser.PNAME_NS - 96)) | (1 << (SparqlParser.PNAME_LN - 96)) | (1 << (SparqlParser.VAR1 - 96)) | (1 << (SparqlParser.VAR2 - 96)) | (1 << (SparqlParser.INTEGER - 96)) | (1 << (SparqlParser.DECIMAL - 96)) | (1 << (SparqlParser.DOUBLE - 96)) | (1 << (SparqlParser.INTEGER_POSITIVE - 96)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 96)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SparqlParser.INTEGER_NEGATIVE - 128)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 128)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 128)) | (1 << (SparqlParser.STRING_LITERAL1 - 128)) | (1 << (SparqlParser.STRING_LITERAL2 - 128)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 128)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 128)) | (1 << (SparqlParser.OPEN_BRACE - 128)) | (1 << (SparqlParser.PLUS_SIGN - 128)) | (1 << (SparqlParser.MINUS_SIGN - 128)) | (1 << (SparqlParser.ASTERISK - 128)) | (1 << (SparqlParser.NEGATION - 128)) | (1 << (SparqlParser.DIVIDE - 128)))) !== 0)) {
                this.state = 1311;
                this.expressionList();
            }

            this.state = 1314;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.IF:
            this.enterOuterAlt(localctx, 44);
            this.state = 1315;
            this.match(SparqlParser.IF);
            this.state = 1316;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1317;
            this.expression(0);
            this.state = 1318;
            this.match(SparqlParser.COMMA);
            this.state = 1319;
            this.expression(0);
            this.state = 1320;
            this.match(SparqlParser.COMMA);
            this.state = 1321;
            this.expression(0);
            this.state = 1322;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.STRLANG:
            this.enterOuterAlt(localctx, 45);
            this.state = 1324;
            this.match(SparqlParser.STRLANG);
            this.state = 1325;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1326;
            this.expression(0);
            this.state = 1327;
            this.match(SparqlParser.COMMA);
            this.state = 1328;
            this.expression(0);
            this.state = 1329;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.STRDT:
            this.enterOuterAlt(localctx, 46);
            this.state = 1331;
            this.match(SparqlParser.STRDT);
            this.state = 1332;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1333;
            this.expression(0);
            this.state = 1334;
            this.match(SparqlParser.COMMA);
            this.state = 1335;
            this.expression(0);
            this.state = 1336;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.SAMETERM:
            this.enterOuterAlt(localctx, 47);
            this.state = 1338;
            this.match(SparqlParser.SAMETERM);
            this.state = 1339;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1340;
            this.expression(0);
            this.state = 1341;
            this.match(SparqlParser.COMMA);
            this.state = 1342;
            this.expression(0);
            this.state = 1343;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.ISIRI:
            this.enterOuterAlt(localctx, 48);
            this.state = 1345;
            this.match(SparqlParser.ISIRI);
            this.state = 1346;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1347;
            this.expression(0);
            this.state = 1348;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.ISURI:
            this.enterOuterAlt(localctx, 49);
            this.state = 1350;
            this.match(SparqlParser.ISURI);
            this.state = 1351;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1352;
            this.expression(0);
            this.state = 1353;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.ISBLANK:
            this.enterOuterAlt(localctx, 50);
            this.state = 1355;
            this.match(SparqlParser.ISBLANK);
            this.state = 1356;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1357;
            this.expression(0);
            this.state = 1358;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.ISLITERAL:
            this.enterOuterAlt(localctx, 51);
            this.state = 1360;
            this.match(SparqlParser.ISLITERAL);
            this.state = 1361;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1362;
            this.expression(0);
            this.state = 1363;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.ISNUMERIC:
            this.enterOuterAlt(localctx, 52);
            this.state = 1365;
            this.match(SparqlParser.ISNUMERIC);
            this.state = 1366;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1367;
            this.expression(0);
            this.state = 1368;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.REGEX:
            this.enterOuterAlt(localctx, 53);
            this.state = 1370;
            this.regexExpression();
            break;
        case SparqlParser.EXISTS:
            this.enterOuterAlt(localctx, 54);
            this.state = 1371;
            this.existsFunction();
            break;
        case SparqlParser.NOT:
            this.enterOuterAlt(localctx, 55);
            this.state = 1372;
            this.notExistsFunction();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RegexExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_regexExpression;
    return this;
}

RegexExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RegexExpressionContext.prototype.constructor = RegexExpressionContext;

RegexExpressionContext.prototype.REGEX = function() {
    return this.getToken(SparqlParser.REGEX, 0);
};

RegexExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

RegexExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterRegexExpression(this);
	}
};

RegexExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitRegexExpression(this);
	}
};




SparqlParser.RegexExpressionContext = RegexExpressionContext;

SparqlParser.prototype.regexExpression = function() {

    var localctx = new RegexExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, SparqlParser.RULE_regexExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1375;
        this.match(SparqlParser.REGEX);
        this.state = 1376;
        this.match(SparqlParser.OPEN_BRACE);
        this.state = 1377;
        this.expression(0);
        this.state = 1378;
        this.match(SparqlParser.COMMA);
        this.state = 1379;
        this.expression(0);
        this.state = 1382;
        _la = this._input.LA(1);
        if(_la===SparqlParser.COMMA) {
            this.state = 1380;
            this.match(SparqlParser.COMMA);
            this.state = 1381;
            this.expression(0);
        }

        this.state = 1384;
        this.match(SparqlParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubStringExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_subStringExpression;
    return this;
}

SubStringExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubStringExpressionContext.prototype.constructor = SubStringExpressionContext;

SubStringExpressionContext.prototype.SUBSTR = function() {
    return this.getToken(SparqlParser.SUBSTR, 0);
};

SubStringExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

SubStringExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterSubStringExpression(this);
	}
};

SubStringExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitSubStringExpression(this);
	}
};




SparqlParser.SubStringExpressionContext = SubStringExpressionContext;

SparqlParser.prototype.subStringExpression = function() {

    var localctx = new SubStringExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, SparqlParser.RULE_subStringExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1386;
        this.match(SparqlParser.SUBSTR);
        this.state = 1387;
        this.match(SparqlParser.OPEN_BRACE);
        this.state = 1388;
        this.expression(0);
        this.state = 1389;
        this.match(SparqlParser.COMMA);
        this.state = 1390;
        this.expression(0);
        this.state = 1393;
        _la = this._input.LA(1);
        if(_la===SparqlParser.COMMA) {
            this.state = 1391;
            this.match(SparqlParser.COMMA);
            this.state = 1392;
            this.expression(0);
        }

        this.state = 1395;
        this.match(SparqlParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StrReplaceExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_strReplaceExpression;
    return this;
}

StrReplaceExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StrReplaceExpressionContext.prototype.constructor = StrReplaceExpressionContext;

StrReplaceExpressionContext.prototype.REPLACE = function() {
    return this.getToken(SparqlParser.REPLACE, 0);
};

StrReplaceExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

StrReplaceExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterStrReplaceExpression(this);
	}
};

StrReplaceExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitStrReplaceExpression(this);
	}
};




SparqlParser.StrReplaceExpressionContext = StrReplaceExpressionContext;

SparqlParser.prototype.strReplaceExpression = function() {

    var localctx = new StrReplaceExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, SparqlParser.RULE_strReplaceExpression);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1397;
        this.match(SparqlParser.REPLACE);
        this.state = 1398;
        this.match(SparqlParser.OPEN_BRACE);
        this.state = 1399;
        this.expression(0);
        this.state = 1400;
        this.match(SparqlParser.COMMA);
        this.state = 1401;
        this.expression(0);
        this.state = 1402;
        this.match(SparqlParser.COMMA);
        this.state = 1403;
        this.expression(0);
        this.state = 1406;
        _la = this._input.LA(1);
        if(_la===SparqlParser.COMMA) {
            this.state = 1404;
            this.match(SparqlParser.COMMA);
            this.state = 1405;
            this.expression(0);
        }

        this.state = 1408;
        this.match(SparqlParser.CLOSE_BRACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExistsFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_existsFunction;
    return this;
}

ExistsFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExistsFunctionContext.prototype.constructor = ExistsFunctionContext;

ExistsFunctionContext.prototype.EXISTS = function() {
    return this.getToken(SparqlParser.EXISTS, 0);
};

ExistsFunctionContext.prototype.groupGraphPattern = function() {
    return this.getTypedRuleContext(GroupGraphPatternContext,0);
};

ExistsFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterExistsFunction(this);
	}
};

ExistsFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitExistsFunction(this);
	}
};




SparqlParser.ExistsFunctionContext = ExistsFunctionContext;

SparqlParser.prototype.existsFunction = function() {

    var localctx = new ExistsFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, SparqlParser.RULE_existsFunction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1410;
        this.match(SparqlParser.EXISTS);
        this.state = 1411;
        this.groupGraphPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NotExistsFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_notExistsFunction;
    return this;
}

NotExistsFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NotExistsFunctionContext.prototype.constructor = NotExistsFunctionContext;

NotExistsFunctionContext.prototype.NOT = function() {
    return this.getToken(SparqlParser.NOT, 0);
};

NotExistsFunctionContext.prototype.EXISTS = function() {
    return this.getToken(SparqlParser.EXISTS, 0);
};

NotExistsFunctionContext.prototype.groupGraphPattern = function() {
    return this.getTypedRuleContext(GroupGraphPatternContext,0);
};

NotExistsFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterNotExistsFunction(this);
	}
};

NotExistsFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitNotExistsFunction(this);
	}
};




SparqlParser.NotExistsFunctionContext = NotExistsFunctionContext;

SparqlParser.prototype.notExistsFunction = function() {

    var localctx = new NotExistsFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, SparqlParser.RULE_notExistsFunction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1413;
        this.match(SparqlParser.NOT);
        this.state = 1414;
        this.match(SparqlParser.EXISTS);
        this.state = 1415;
        this.groupGraphPattern();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AggregateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_aggregate;
    return this;
}

AggregateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AggregateContext.prototype.constructor = AggregateContext;

AggregateContext.prototype.COUNT = function() {
    return this.getToken(SparqlParser.COUNT, 0);
};

AggregateContext.prototype.ASTERISK = function() {
    return this.getToken(SparqlParser.ASTERISK, 0);
};

AggregateContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

AggregateContext.prototype.DISTINCT = function() {
    return this.getToken(SparqlParser.DISTINCT, 0);
};

AggregateContext.prototype.SUM = function() {
    return this.getToken(SparqlParser.SUM, 0);
};

AggregateContext.prototype.MIN = function() {
    return this.getToken(SparqlParser.MIN, 0);
};

AggregateContext.prototype.MAX = function() {
    return this.getToken(SparqlParser.MAX, 0);
};

AggregateContext.prototype.AVG = function() {
    return this.getToken(SparqlParser.AVG, 0);
};

AggregateContext.prototype.SAMPLE = function() {
    return this.getToken(SparqlParser.SAMPLE, 0);
};

AggregateContext.prototype.GROUP_CONCAT = function() {
    return this.getToken(SparqlParser.GROUP_CONCAT, 0);
};

AggregateContext.prototype.SEPARATOR = function() {
    return this.getToken(SparqlParser.SEPARATOR, 0);
};

AggregateContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

AggregateContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterAggregate(this);
	}
};

AggregateContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitAggregate(this);
	}
};




SparqlParser.AggregateContext = AggregateContext;

SparqlParser.prototype.aggregate = function() {

    var localctx = new AggregateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, SparqlParser.RULE_aggregate);
    var _la = 0; // Token type
    try {
        this.state = 1481;
        switch(this._input.LA(1)) {
        case SparqlParser.COUNT:
            this.enterOuterAlt(localctx, 1);
            this.state = 1417;
            this.match(SparqlParser.COUNT);
            this.state = 1418;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1420;
            _la = this._input.LA(1);
            if(_la===SparqlParser.DISTINCT) {
                this.state = 1419;
                this.match(SparqlParser.DISTINCT);
            }

            this.state = 1424;
            var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1422;
                this.match(SparqlParser.ASTERISK);
                break;

            case 2:
                this.state = 1423;
                this.expression(0);
                break;

            }
            this.state = 1426;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.SUM:
            this.enterOuterAlt(localctx, 2);
            this.state = 1427;
            this.match(SparqlParser.SUM);
            this.state = 1428;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1430;
            _la = this._input.LA(1);
            if(_la===SparqlParser.DISTINCT) {
                this.state = 1429;
                this.match(SparqlParser.DISTINCT);
            }

            this.state = 1432;
            this.expression(0);
            this.state = 1433;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.MIN:
            this.enterOuterAlt(localctx, 3);
            this.state = 1435;
            this.match(SparqlParser.MIN);
            this.state = 1436;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1438;
            _la = this._input.LA(1);
            if(_la===SparqlParser.DISTINCT) {
                this.state = 1437;
                this.match(SparqlParser.DISTINCT);
            }

            this.state = 1440;
            this.expression(0);
            this.state = 1441;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.MAX:
            this.enterOuterAlt(localctx, 4);
            this.state = 1443;
            this.match(SparqlParser.MAX);
            this.state = 1444;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1446;
            _la = this._input.LA(1);
            if(_la===SparqlParser.DISTINCT) {
                this.state = 1445;
                this.match(SparqlParser.DISTINCT);
            }

            this.state = 1448;
            this.expression(0);
            this.state = 1449;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.AVG:
            this.enterOuterAlt(localctx, 5);
            this.state = 1451;
            this.match(SparqlParser.AVG);
            this.state = 1452;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1454;
            _la = this._input.LA(1);
            if(_la===SparqlParser.DISTINCT) {
                this.state = 1453;
                this.match(SparqlParser.DISTINCT);
            }

            this.state = 1456;
            this.expression(0);
            this.state = 1457;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.SAMPLE:
            this.enterOuterAlt(localctx, 6);
            this.state = 1459;
            this.match(SparqlParser.SAMPLE);
            this.state = 1460;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1462;
            _la = this._input.LA(1);
            if(_la===SparqlParser.DISTINCT) {
                this.state = 1461;
                this.match(SparqlParser.DISTINCT);
            }

            this.state = 1464;
            this.expression(0);
            this.state = 1465;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        case SparqlParser.GROUP_CONCAT:
            this.enterOuterAlt(localctx, 7);
            this.state = 1467;
            this.match(SparqlParser.GROUP_CONCAT);
            this.state = 1468;
            this.match(SparqlParser.OPEN_BRACE);
            this.state = 1470;
            _la = this._input.LA(1);
            if(_la===SparqlParser.DISTINCT) {
                this.state = 1469;
                this.match(SparqlParser.DISTINCT);
            }

            this.state = 1472;
            this.expression(0);
            this.state = 1477;
            _la = this._input.LA(1);
            if(_la===SparqlParser.SEMICOLON) {
                this.state = 1473;
                this.match(SparqlParser.SEMICOLON);
                this.state = 1474;
                this.match(SparqlParser.SEPARATOR);
                this.state = 1475;
                this.match(SparqlParser.EQUAL);
                this.state = 1476;
                this.string();
            }

            this.state = 1479;
            this.match(SparqlParser.CLOSE_BRACE);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IriRefOrFunctionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_iriRefOrFunction;
    return this;
}

IriRefOrFunctionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IriRefOrFunctionContext.prototype.constructor = IriRefOrFunctionContext;

IriRefOrFunctionContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

IriRefOrFunctionContext.prototype.argList = function() {
    return this.getTypedRuleContext(ArgListContext,0);
};

IriRefOrFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterIriRefOrFunction(this);
	}
};

IriRefOrFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitIriRefOrFunction(this);
	}
};




SparqlParser.IriRefOrFunctionContext = IriRefOrFunctionContext;

SparqlParser.prototype.iriRefOrFunction = function() {

    var localctx = new IriRefOrFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, SparqlParser.RULE_iriRefOrFunction);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1483;
        this.iri();
        this.state = 1485;
        var la_ = this._interp.adaptivePredict(this._input,143,this._ctx);
        if(la_===1) {
            this.state = 1484;
            this.argList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RdfLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_rdfLiteral;
    return this;
}

RdfLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RdfLiteralContext.prototype.constructor = RdfLiteralContext;

RdfLiteralContext.prototype.string = function() {
    return this.getTypedRuleContext(StringContext,0);
};

RdfLiteralContext.prototype.LANGTAG = function() {
    return this.getToken(SparqlParser.LANGTAG, 0);
};

RdfLiteralContext.prototype.iri = function() {
    return this.getTypedRuleContext(IriContext,0);
};

RdfLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterRdfLiteral(this);
	}
};

RdfLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitRdfLiteral(this);
	}
};




SparqlParser.RdfLiteralContext = RdfLiteralContext;

SparqlParser.prototype.rdfLiteral = function() {

    var localctx = new RdfLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, SparqlParser.RULE_rdfLiteral);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1487;
        this.string();
        this.state = 1491;
        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
        if(la_===1) {
            this.state = 1488;
            this.match(SparqlParser.LANGTAG);

        } else if(la_===2) {
            this.state = 1489;
            this.match(SparqlParser.REFERENCE);
            this.state = 1490;
            this.iri();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_numericLiteral;
    return this;
}

NumericLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericLiteralContext.prototype.constructor = NumericLiteralContext;

NumericLiteralContext.prototype.numericLiteralUnsigned = function() {
    return this.getTypedRuleContext(NumericLiteralUnsignedContext,0);
};

NumericLiteralContext.prototype.numericLiteralPositive = function() {
    return this.getTypedRuleContext(NumericLiteralPositiveContext,0);
};

NumericLiteralContext.prototype.numericLiteralNegative = function() {
    return this.getTypedRuleContext(NumericLiteralNegativeContext,0);
};

NumericLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterNumericLiteral(this);
	}
};

NumericLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitNumericLiteral(this);
	}
};




SparqlParser.NumericLiteralContext = NumericLiteralContext;

SparqlParser.prototype.numericLiteral = function() {

    var localctx = new NumericLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, SparqlParser.RULE_numericLiteral);
    try {
        this.state = 1496;
        switch(this._input.LA(1)) {
        case SparqlParser.INTEGER:
        case SparqlParser.DECIMAL:
        case SparqlParser.DOUBLE:
            this.enterOuterAlt(localctx, 1);
            this.state = 1493;
            this.numericLiteralUnsigned();
            break;
        case SparqlParser.INTEGER_POSITIVE:
        case SparqlParser.DECIMAL_POSITIVE:
        case SparqlParser.DOUBLE_POSITIVE:
            this.enterOuterAlt(localctx, 2);
            this.state = 1494;
            this.numericLiteralPositive();
            break;
        case SparqlParser.INTEGER_NEGATIVE:
        case SparqlParser.DECIMAL_NEGATIVE:
        case SparqlParser.DOUBLE_NEGATIVE:
            this.enterOuterAlt(localctx, 3);
            this.state = 1495;
            this.numericLiteralNegative();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericLiteralUnsignedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_numericLiteralUnsigned;
    return this;
}

NumericLiteralUnsignedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericLiteralUnsignedContext.prototype.constructor = NumericLiteralUnsignedContext;

NumericLiteralUnsignedContext.prototype.INTEGER = function() {
    return this.getToken(SparqlParser.INTEGER, 0);
};

NumericLiteralUnsignedContext.prototype.DECIMAL = function() {
    return this.getToken(SparqlParser.DECIMAL, 0);
};

NumericLiteralUnsignedContext.prototype.DOUBLE = function() {
    return this.getToken(SparqlParser.DOUBLE, 0);
};

NumericLiteralUnsignedContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterNumericLiteralUnsigned(this);
	}
};

NumericLiteralUnsignedContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitNumericLiteralUnsigned(this);
	}
};




SparqlParser.NumericLiteralUnsignedContext = NumericLiteralUnsignedContext;

SparqlParser.prototype.numericLiteralUnsigned = function() {

    var localctx = new NumericLiteralUnsignedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, SparqlParser.RULE_numericLiteralUnsigned);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1498;
        _la = this._input.LA(1);
        if(!(((((_la - 122)) & ~0x1f) == 0 && ((1 << (_la - 122)) & ((1 << (SparqlParser.INTEGER - 122)) | (1 << (SparqlParser.DECIMAL - 122)) | (1 << (SparqlParser.DOUBLE - 122)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericLiteralPositiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_numericLiteralPositive;
    return this;
}

NumericLiteralPositiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericLiteralPositiveContext.prototype.constructor = NumericLiteralPositiveContext;

NumericLiteralPositiveContext.prototype.INTEGER_POSITIVE = function() {
    return this.getToken(SparqlParser.INTEGER_POSITIVE, 0);
};

NumericLiteralPositiveContext.prototype.DECIMAL_POSITIVE = function() {
    return this.getToken(SparqlParser.DECIMAL_POSITIVE, 0);
};

NumericLiteralPositiveContext.prototype.DOUBLE_POSITIVE = function() {
    return this.getToken(SparqlParser.DOUBLE_POSITIVE, 0);
};

NumericLiteralPositiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterNumericLiteralPositive(this);
	}
};

NumericLiteralPositiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitNumericLiteralPositive(this);
	}
};




SparqlParser.NumericLiteralPositiveContext = NumericLiteralPositiveContext;

SparqlParser.prototype.numericLiteralPositive = function() {

    var localctx = new NumericLiteralPositiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, SparqlParser.RULE_numericLiteralPositive);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1500;
        _la = this._input.LA(1);
        if(!(((((_la - 125)) & ~0x1f) == 0 && ((1 << (_la - 125)) & ((1 << (SparqlParser.INTEGER_POSITIVE - 125)) | (1 << (SparqlParser.DECIMAL_POSITIVE - 125)) | (1 << (SparqlParser.DOUBLE_POSITIVE - 125)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumericLiteralNegativeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_numericLiteralNegative;
    return this;
}

NumericLiteralNegativeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumericLiteralNegativeContext.prototype.constructor = NumericLiteralNegativeContext;

NumericLiteralNegativeContext.prototype.INTEGER_NEGATIVE = function() {
    return this.getToken(SparqlParser.INTEGER_NEGATIVE, 0);
};

NumericLiteralNegativeContext.prototype.DECIMAL_NEGATIVE = function() {
    return this.getToken(SparqlParser.DECIMAL_NEGATIVE, 0);
};

NumericLiteralNegativeContext.prototype.DOUBLE_NEGATIVE = function() {
    return this.getToken(SparqlParser.DOUBLE_NEGATIVE, 0);
};

NumericLiteralNegativeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterNumericLiteralNegative(this);
	}
};

NumericLiteralNegativeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitNumericLiteralNegative(this);
	}
};




SparqlParser.NumericLiteralNegativeContext = NumericLiteralNegativeContext;

SparqlParser.prototype.numericLiteralNegative = function() {

    var localctx = new NumericLiteralNegativeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, SparqlParser.RULE_numericLiteralNegative);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1502;
        _la = this._input.LA(1);
        if(!(((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (SparqlParser.INTEGER_NEGATIVE - 128)) | (1 << (SparqlParser.DECIMAL_NEGATIVE - 128)) | (1 << (SparqlParser.DOUBLE_NEGATIVE - 128)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_booleanLiteral;
    return this;
}

BooleanLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanLiteralContext.prototype.constructor = BooleanLiteralContext;

BooleanLiteralContext.prototype.TRUE = function() {
    return this.getToken(SparqlParser.TRUE, 0);
};

BooleanLiteralContext.prototype.FALSE = function() {
    return this.getToken(SparqlParser.FALSE, 0);
};

BooleanLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterBooleanLiteral(this);
	}
};

BooleanLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitBooleanLiteral(this);
	}
};




SparqlParser.BooleanLiteralContext = BooleanLiteralContext;

SparqlParser.prototype.booleanLiteral = function() {

    var localctx = new BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, SparqlParser.RULE_booleanLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1504;
        _la = this._input.LA(1);
        if(!(_la===SparqlParser.TRUE || _la===SparqlParser.FALSE)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_string;
    return this;
}

StringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringContext.prototype.constructor = StringContext;

StringContext.prototype.STRING_LITERAL1 = function() {
    return this.getToken(SparqlParser.STRING_LITERAL1, 0);
};

StringContext.prototype.STRING_LITERAL2 = function() {
    return this.getToken(SparqlParser.STRING_LITERAL2, 0);
};

StringContext.prototype.STRING_LITERAL_LONG1 = function() {
    return this.getToken(SparqlParser.STRING_LITERAL_LONG1, 0);
};

StringContext.prototype.STRING_LITERAL_LONG2 = function() {
    return this.getToken(SparqlParser.STRING_LITERAL_LONG2, 0);
};

StringContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterString(this);
	}
};

StringContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitString(this);
	}
};




SparqlParser.StringContext = StringContext;

SparqlParser.prototype.string = function() {

    var localctx = new StringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, SparqlParser.RULE_string);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1506;
        _la = this._input.LA(1);
        if(!(((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (SparqlParser.STRING_LITERAL1 - 131)) | (1 << (SparqlParser.STRING_LITERAL2 - 131)) | (1 << (SparqlParser.STRING_LITERAL_LONG1 - 131)) | (1 << (SparqlParser.STRING_LITERAL_LONG2 - 131)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IriContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_iri;
    return this;
}

IriContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IriContext.prototype.constructor = IriContext;

IriContext.prototype.IRIREF = function() {
    return this.getToken(SparqlParser.IRIREF, 0);
};

IriContext.prototype.prefixedName = function() {
    return this.getTypedRuleContext(PrefixedNameContext,0);
};

IriContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterIri(this);
	}
};

IriContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitIri(this);
	}
};




SparqlParser.IriContext = IriContext;

SparqlParser.prototype.iri = function() {

    var localctx = new IriContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, SparqlParser.RULE_iri);
    try {
        this.state = 1510;
        switch(this._input.LA(1)) {
        case SparqlParser.IRIREF:
            this.enterOuterAlt(localctx, 1);
            this.state = 1508;
            this.match(SparqlParser.IRIREF);
            break;
        case SparqlParser.PNAME_NS:
        case SparqlParser.PNAME_LN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1509;
            this.prefixedName();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PrefixedNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_prefixedName;
    return this;
}

PrefixedNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrefixedNameContext.prototype.constructor = PrefixedNameContext;

PrefixedNameContext.prototype.PNAME_LN = function() {
    return this.getToken(SparqlParser.PNAME_LN, 0);
};

PrefixedNameContext.prototype.PNAME_NS = function() {
    return this.getToken(SparqlParser.PNAME_NS, 0);
};

PrefixedNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterPrefixedName(this);
	}
};

PrefixedNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitPrefixedName(this);
	}
};




SparqlParser.PrefixedNameContext = PrefixedNameContext;

SparqlParser.prototype.prefixedName = function() {

    var localctx = new PrefixedNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, SparqlParser.RULE_prefixedName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1512;
        _la = this._input.LA(1);
        if(!(_la===SparqlParser.PNAME_NS || _la===SparqlParser.PNAME_LN)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlankNodeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_blankNode;
    return this;
}

BlankNodeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlankNodeContext.prototype.constructor = BlankNodeContext;

BlankNodeContext.prototype.BLANK_NODE_LABEL = function() {
    return this.getToken(SparqlParser.BLANK_NODE_LABEL, 0);
};

BlankNodeContext.prototype.anon = function() {
    return this.getTypedRuleContext(AnonContext,0);
};

BlankNodeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterBlankNode(this);
	}
};

BlankNodeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitBlankNode(this);
	}
};




SparqlParser.BlankNodeContext = BlankNodeContext;

SparqlParser.prototype.blankNode = function() {

    var localctx = new BlankNodeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, SparqlParser.RULE_blankNode);
    try {
        this.state = 1516;
        switch(this._input.LA(1)) {
        case SparqlParser.BLANK_NODE_LABEL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1514;
            this.match(SparqlParser.BLANK_NODE_LABEL);
            break;
        case SparqlParser.OPEN_SQUARE_BRACKET:
            this.enterOuterAlt(localctx, 2);
            this.state = 1515;
            this.anon();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AnonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SparqlParser.RULE_anon;
    return this;
}

AnonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AnonContext.prototype.constructor = AnonContext;


AnonContext.prototype.enterRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.enterAnon(this);
	}
};

AnonContext.prototype.exitRule = function(listener) {
    if(listener instanceof SparqlParserListener ) {
        listener.exitAnon(this);
	}
};




SparqlParser.AnonContext = AnonContext;

SparqlParser.prototype.anon = function() {

    var localctx = new AnonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, SparqlParser.RULE_anon);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1518;
        this.match(SparqlParser.OPEN_SQUARE_BRACKET);
        this.state = 1519;
        this.match(SparqlParser.CLOSE_SQUARE_BRACKET);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


SparqlParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 110:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

SparqlParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 7);
		case 1:
			return this.precpred(this._ctx, 6);
		case 2:
			return this.precpred(this._ctx, 3);
		case 3:
			return this.precpred(this._ctx, 5);
		case 4:
			return this.precpred(this._ctx, 4);
		case 5:
			return this.precpred(this._ctx, 2);
		case 6:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

return SparqlParser;
};
